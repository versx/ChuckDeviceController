{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"Welcome to ChuckDeviceController \uf0c1 ChuckDeviceController is a .NET based frontend and backend written in C# 11.0 using ASP.NET Core, EntityFramework Core, and Dapper.NET to control real devices and parse received protobuff proto data from iOS and Android mobile devices running Pokemon Go. ChuckDeviceConfigurator Controls devices that request jobs as well as includes a dashboard interface to configure job controllers and other required entity types. Dashboard management UI Device controller Plugin system ChuckDeviceController Parses raw proto data received and inserts/upserts data entities into a MySQL compatible database. ChuckDeviceCommunicator Relays new and changed data entities to outgoing webhook endpoints that are received from the ChuckDeviceController via gRPC. ChuckDeviceProxy Splits and proxies requests from Atlas devices to separate endpoints in order to add support for ChuckDeviceController until Atlas is updated. Features \uf0c1 Plugin system Create new job controller instances Fetch database entries Add WebAPI routes and page views to existing dashboard Assign devices to job controller instances Create instances Create geofences Load/save configuration files Route generator and optimizer Event bus service for communication between plugins and host application Add custom settings to the dashboard UI Much more planned... Job controller instance types Bootstrap Dynamic Routes Circle Plots (Pokemon and Raids) Leveling Pokemon IV Quests Smart Raid Spawnpoint TTH Finder More planned User and access management system 2FA capability 3rd party authentication for Discord, GitHub, and Google accounts as well as local accounts MAD proto data parsing support Separate device controller, proto parser & data upsert service as well as a webhook relay service to load balance across multiple machines if needed or desired Reusable Geofence and Circle point lists Reusable IV lists for Pokemon IV job controller instances Quality of life utilities Clear Quests (by instance, geofence, or all) Upgraded/downgraded fort converter Stale Pokestop clearing Instance reloader Truncate expired Pokemon and Incident (Invasions) data Assignments/Assignment groups re-quester and more... Documentation \uf0c1 Overview \uf0c1 https://cdc.rtfd.io Getting Started \uf0c1 https://cdc.rtfd.io/en/latest/getting-started Plugins \uf0c1 Create a Plugin API Reference Templates Requirements \uf0c1 Git .NET 7 SDK MySQL or MariaDB Supported Databases MySQL 5.7 and MySQL 8.0 MariaDB 10.3-10.10 Frameworks and Libraries \uf0c1 .NET 7 ASP.NET Core EntityFramework Core Dapper gRPC POGOProtos.Rpc Screenshots \uf0c1 Dedication \uf0c1 \u2764\ufe0f In loving memory of Chuckleslove , rest in peace brother","title":"Home"},{"location":"#welcome-to-chuckdevicecontroller","text":"ChuckDeviceController is a .NET based frontend and backend written in C# 11.0 using ASP.NET Core, EntityFramework Core, and Dapper.NET to control real devices and parse received protobuff proto data from iOS and Android mobile devices running Pokemon Go. ChuckDeviceConfigurator Controls devices that request jobs as well as includes a dashboard interface to configure job controllers and other required entity types. Dashboard management UI Device controller Plugin system ChuckDeviceController Parses raw proto data received and inserts/upserts data entities into a MySQL compatible database. ChuckDeviceCommunicator Relays new and changed data entities to outgoing webhook endpoints that are received from the ChuckDeviceController via gRPC. ChuckDeviceProxy Splits and proxies requests from Atlas devices to separate endpoints in order to add support for ChuckDeviceController until Atlas is updated.","title":"Welcome to ChuckDeviceController"},{"location":"#features","text":"Plugin system Create new job controller instances Fetch database entries Add WebAPI routes and page views to existing dashboard Assign devices to job controller instances Create instances Create geofences Load/save configuration files Route generator and optimizer Event bus service for communication between plugins and host application Add custom settings to the dashboard UI Much more planned... Job controller instance types Bootstrap Dynamic Routes Circle Plots (Pokemon and Raids) Leveling Pokemon IV Quests Smart Raid Spawnpoint TTH Finder More planned User and access management system 2FA capability 3rd party authentication for Discord, GitHub, and Google accounts as well as local accounts MAD proto data parsing support Separate device controller, proto parser & data upsert service as well as a webhook relay service to load balance across multiple machines if needed or desired Reusable Geofence and Circle point lists Reusable IV lists for Pokemon IV job controller instances Quality of life utilities Clear Quests (by instance, geofence, or all) Upgraded/downgraded fort converter Stale Pokestop clearing Instance reloader Truncate expired Pokemon and Incident (Invasions) data Assignments/Assignment groups re-quester and more...","title":"Features"},{"location":"#documentation","text":"","title":"Documentation"},{"location":"#overview","text":"https://cdc.rtfd.io","title":"Overview"},{"location":"#getting-started","text":"https://cdc.rtfd.io/en/latest/getting-started","title":"Getting Started"},{"location":"#plugins","text":"Create a Plugin API Reference Templates","title":"Plugins"},{"location":"#requirements","text":"Git .NET 7 SDK MySQL or MariaDB Supported Databases MySQL 5.7 and MySQL 8.0 MariaDB 10.3-10.10","title":"Requirements"},{"location":"#frameworks-and-libraries","text":".NET 7 ASP.NET Core EntityFramework Core Dapper gRPC POGOProtos.Rpc","title":"Frameworks and Libraries"},{"location":"#screenshots","text":"","title":"Screenshots"},{"location":"#dedication","text":"\u2764\ufe0f In loving memory of Chuckleslove , rest in peace brother","title":"Dedication"},{"location":"getting-started/","text":"Getting Started \uf0c1 Requirements \uf0c1 Ensure all requirements are installed and met before proceeding below. Preparation \uf0c1 Clone repository: git clone https://github.com/versx/ChuckDeviceController Change directory: cd ChuckDeviceController/src Build projects, libraries, plugin templates, and included plugins: dotnet build ChuckDeviceConfigurator \uf0c1 Change directory: cd ChuckDeviceConfigurator/bin/debug Fill out appsettings.json config Start ChuckDeviceConfigurator: dotnet ChuckDeviceConfigurator.dll Visit http://127.0.0.1:8881 to begin configuring your devices. Change accordingly based on your config options. Default username is root and password is 123Pa$$word. ChuckDeviceController \uf0c1 Change directory: cd src/ChuckDeviceController/bin/debug Fill out appsettings.json config Start ChuckDeviceController: dotnet ChuckDeviceController.dll ChuckDeviceCommunicator \uf0c1 Change directory: cd src/ChuckDeviceCommunicator/bin/debug Fill out appsettings.json config Start ChuckDeviceCommunicator: dotnet ChuckDeviceCommunicator.dll ChuckDeviceProxy \uf0c1 Change directory: cd src/ChuckDeviceProxy/bin/debug Fill out appsettings.json config Start ChuckDeviceProxy: dotnet ChuckDeviceProxy.dll","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#requirements","text":"Ensure all requirements are installed and met before proceeding below.","title":"Requirements"},{"location":"getting-started/#preparation","text":"Clone repository: git clone https://github.com/versx/ChuckDeviceController Change directory: cd ChuckDeviceController/src Build projects, libraries, plugin templates, and included plugins: dotnet build","title":"Preparation"},{"location":"getting-started/#chuckdeviceconfigurator","text":"Change directory: cd ChuckDeviceConfigurator/bin/debug Fill out appsettings.json config Start ChuckDeviceConfigurator: dotnet ChuckDeviceConfigurator.dll Visit http://127.0.0.1:8881 to begin configuring your devices. Change accordingly based on your config options. Default username is root and password is 123Pa$$word.","title":"ChuckDeviceConfigurator"},{"location":"getting-started/#chuckdevicecontroller","text":"Change directory: cd src/ChuckDeviceController/bin/debug Fill out appsettings.json config Start ChuckDeviceController: dotnet ChuckDeviceController.dll","title":"ChuckDeviceController"},{"location":"getting-started/#chuckdevicecommunicator","text":"Change directory: cd src/ChuckDeviceCommunicator/bin/debug Fill out appsettings.json config Start ChuckDeviceCommunicator: dotnet ChuckDeviceCommunicator.dll","title":"ChuckDeviceCommunicator"},{"location":"getting-started/#chuckdeviceproxy","text":"Change directory: cd src/ChuckDeviceProxy/bin/debug Fill out appsettings.json config Start ChuckDeviceProxy: dotnet ChuckDeviceProxy.dll","title":"ChuckDeviceProxy"},{"location":"requirements/","text":"Requirements \uf0c1 Git .NET 7 SDK MySQL or MariaDB Install Git \uf0c1 Debian-based \uf0c1 sudo apt install git-all Windows \uf0c1 https://git-scm.com/download/win macOS \uf0c1 Homebrew: brew install git Other macOS Installations \uf0c1 Install .NET 7 SDK \uf0c1 Ubuntu \uf0c1 Replace {22,20,18} with your respective major OS version wget https://packages.microsoft.com/config/ubuntu/{22,20,18}.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb sudo dpkg -i packages-microsoft-prod.deb rm packages-microsoft-prod.deb sudo apt-get update sudo apt-get install -y apt-transport-https sudo apt-get update sudo apt-get install -y dotnet-sdk-7.0 Other Linux Distributions \uf0c1 Windows \uf0c1 x86: https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/sdk-7.0.101-windows-x86-installer x64: https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/sdk-7.0.101-windows-x64-installer ARM64: https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/sdk-7.0.101-windows-arm64-installer macOS \uf0c1 Intel: https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/sdk-7.0.101-macos-x64-installer Apple Silicon: https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/sdk-7.0.101-macos-arm64-installer Install SQL Database \uf0c1 MySQL \uf0c1 Download Installer or MariaDB \uf0c1 Download Installer","title":"Install Requirements"},{"location":"requirements/#requirements","text":"Git .NET 7 SDK MySQL or MariaDB","title":"Requirements"},{"location":"requirements/#install-git","text":"","title":"Install Git"},{"location":"requirements/#debian-based","text":"sudo apt install git-all","title":"Debian-based"},{"location":"requirements/#windows","text":"https://git-scm.com/download/win","title":"Windows"},{"location":"requirements/#macos","text":"Homebrew: brew install git","title":"macOS"},{"location":"requirements/#other-macos-installations","text":"","title":"Other macOS Installations"},{"location":"requirements/#install-net-7-sdk","text":"","title":"Install .NET 7 SDK"},{"location":"requirements/#ubuntu","text":"Replace {22,20,18} with your respective major OS version wget https://packages.microsoft.com/config/ubuntu/{22,20,18}.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb sudo dpkg -i packages-microsoft-prod.deb rm packages-microsoft-prod.deb sudo apt-get update sudo apt-get install -y apt-transport-https sudo apt-get update sudo apt-get install -y dotnet-sdk-7.0","title":"Ubuntu"},{"location":"requirements/#other-linux-distributions","text":"","title":"Other Linux Distributions"},{"location":"requirements/#windows_1","text":"x86: https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/sdk-7.0.101-windows-x86-installer x64: https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/sdk-7.0.101-windows-x64-installer ARM64: https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/sdk-7.0.101-windows-arm64-installer","title":"Windows"},{"location":"requirements/#macos_1","text":"Intel: https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/sdk-7.0.101-macos-x64-installer Apple Silicon: https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/sdk-7.0.101-macos-arm64-installer","title":"macOS"},{"location":"requirements/#install-sql-database","text":"","title":"Install SQL Database"},{"location":"requirements/#mysql","text":"Download Installer or","title":"MySQL"},{"location":"requirements/#mariadb","text":"Download Installer","title":"MariaDB"},{"location":"screenshots/","text":"Screenshot Previews \uf0c1 Dashboard \uf0c1","title":"Screenshots"},{"location":"screenshots/#screenshot-previews","text":"","title":"Screenshot Previews"},{"location":"screenshots/#dashboard","text":"","title":"Dashboard"},{"location":"about/credits/","text":"Credits and Contributions \uf0c1 RealDeviceMap TODO: Add additional credits","title":"Credits"},{"location":"about/credits/#credits-and-contributions","text":"RealDeviceMap TODO: Add additional credits","title":"Credits and Contributions"},{"location":"about/dedication/","text":"Dedication \uf0c1 \u2764\ufe0f In loving memory of Chuckleslove , rest in peace brother","title":"Dedication"},{"location":"about/dedication/#dedication","text":"\u2764\ufe0f In loving memory of Chuckleslove , rest in peace brother","title":"Dedication"},{"location":"about/todo/","text":"TODO \uf0c1 [ ] Finish localization [ ] Finish TTH finder job controller [ ] Finish implementing permissions provided by API keys [ ] Finish documentation [ ] Finish plugin service event callbacks [ ] Add more helper methods to ChuckDeviceController.Plugin.Helpers library [ ] Move most ChuckDeviceConfigurator services to plugins","title":"TODO"},{"location":"about/todo/#todo","text":"[ ] Finish localization [ ] Finish TTH finder job controller [ ] Finish implementing permissions provided by API keys [ ] Finish documentation [ ] Finish plugin service event callbacks [ ] Add more helper methods to ChuckDeviceController.Plugin.Helpers library [ ] Move most ChuckDeviceConfigurator services to plugins","title":"TODO"},{"location":"applications/communicator/","text":"ChuckDeviceCommunicator \uf0c1 Description \uf0c1 Relays new and changed data entities to outgoing webhook endpoints that are received from the ChuckDeviceController via gRPC. Configuration \uf0c1 { // Hosts allowed to access. \"AllowedHosts\": \"*\", // gRPC listener endpoints. \"Grpc\": { // gRPC listener endpoint of ChuckDeviceConfigurator. Used to retrieve configured webhook endpoints. \"Configurator\": \"http://localhost:5002\" }, // Listening endpoints settings \"Kestrel\": { \"EndpointDefaults\": { \"Protocols\": \"Http1AndHttp2\" }, \"Endpoints\": { \"Grpc\": { // gRPC listening endpoint and port to receive webhook payloads from ChuckDeviceController. \"Url\": \"http://*:5003\", \"Protocols\": \"Http2\" } } }, /* Reference: https://learn.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-7.0 */ \"Logging\": { \"LogLevel\": { \"Default\": \"Debug\", \"Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware\": \"None\" }, \"ColorConsole\": { \"LogLevel\": { \"Default\": \"Debug\", \"Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware\": \"None\" }, \"LogLevelColorMap\": { \"Trace\": \"Cyan\", \"Debug\": \"DarkGray\", \"Information\": \"White\", \"Warning\": \"Yellow\", \"Error\": \"Red\", \"Critical\": \"DarkRed\" }, \"UseTimestamp\": true, \"UseUnix\": false, \"TimestampFormat\": \"{0:HH}:{0:mm}:{0:ss}\" }, \"Console\": { \"LogLevel\": { \"Default\": \"Debug\", \"Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware\": \"None\" } }, \"File\": { \"Path\": \"bin/debug/logs/{0:yyyy}-{0:MM}-{0:dd}.log\", \"Append\": true, \"MinLevel\": \"Debug\", \"FileSizeLimitBytes\": 0, // use to activate rolling file behaviour \"MaxRollingFiles\": 0 // use to specify max number of log files } }, // Webhook relay settings. \"Relay\": { // Webhook endpoints retrieval interval in seconds. \"EndpointsIntervalS\": 60, // Retry delay upon failed webhook relay. \"FailedRetryDelayS\": 5, // Maximum amount of retries when sending failed webhook payloads. \"MaximumRetryCount\": 3, // Interval in seconds between processing received webhook payloads. \"ProcessingIntervalS\": 5, // Timeout in seconds when sending webhook payload before aborting. \"RequestTimeoutS\": 15 } }","title":"ChuckDeviceCommunicator"},{"location":"applications/communicator/#chuckdevicecommunicator","text":"","title":"ChuckDeviceCommunicator"},{"location":"applications/communicator/#description","text":"Relays new and changed data entities to outgoing webhook endpoints that are received from the ChuckDeviceController via gRPC.","title":"Description"},{"location":"applications/communicator/#configuration","text":"{ // Hosts allowed to access. \"AllowedHosts\": \"*\", // gRPC listener endpoints. \"Grpc\": { // gRPC listener endpoint of ChuckDeviceConfigurator. Used to retrieve configured webhook endpoints. \"Configurator\": \"http://localhost:5002\" }, // Listening endpoints settings \"Kestrel\": { \"EndpointDefaults\": { \"Protocols\": \"Http1AndHttp2\" }, \"Endpoints\": { \"Grpc\": { // gRPC listening endpoint and port to receive webhook payloads from ChuckDeviceController. \"Url\": \"http://*:5003\", \"Protocols\": \"Http2\" } } }, /* Reference: https://learn.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-7.0 */ \"Logging\": { \"LogLevel\": { \"Default\": \"Debug\", \"Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware\": \"None\" }, \"ColorConsole\": { \"LogLevel\": { \"Default\": \"Debug\", \"Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware\": \"None\" }, \"LogLevelColorMap\": { \"Trace\": \"Cyan\", \"Debug\": \"DarkGray\", \"Information\": \"White\", \"Warning\": \"Yellow\", \"Error\": \"Red\", \"Critical\": \"DarkRed\" }, \"UseTimestamp\": true, \"UseUnix\": false, \"TimestampFormat\": \"{0:HH}:{0:mm}:{0:ss}\" }, \"Console\": { \"LogLevel\": { \"Default\": \"Debug\", \"Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware\": \"None\" } }, \"File\": { \"Path\": \"bin/debug/logs/{0:yyyy}-{0:MM}-{0:dd}.log\", \"Append\": true, \"MinLevel\": \"Debug\", \"FileSizeLimitBytes\": 0, // use to activate rolling file behaviour \"MaxRollingFiles\": 0 // use to specify max number of log files } }, // Webhook relay settings. \"Relay\": { // Webhook endpoints retrieval interval in seconds. \"EndpointsIntervalS\": 60, // Retry delay upon failed webhook relay. \"FailedRetryDelayS\": 5, // Maximum amount of retries when sending failed webhook payloads. \"MaximumRetryCount\": 3, // Interval in seconds between processing received webhook payloads. \"ProcessingIntervalS\": 5, // Timeout in seconds when sending webhook payload before aborting. \"RequestTimeoutS\": 15 } }","title":"Configuration"},{"location":"applications/configurator/","text":"ChuckDeviceConfigurator \uf0c1 Description \uf0c1 Controls devices that request jobs as well as includes a dashboard interface to configure job controllers and other required entity types. Dashboard management UI Device controller Plugin system User Identity \uf0c1 QR Code Generation \uf0c1 TODO: Make QR code generator configurable Account Confirmation and Password Recovery \uf0c1 TODO: Make email sending service configurable Hosted Services \uf0c1 AccountStatusHostedService \uf0c1 Checks all accounts with any of the following status and marks the interested columns as NULL in the database if the account punishment time has lapsed. Warning Suspended Cooldown Configuration \uf0c1 { // Hosts allowed to access. \"AllowedHosts\": \"*\", // Default 3rd party authentication options. \"Authentication\": { // Discord user account authentication. \"Discord\": { \"Enabled\": false, \"ClientId\": \"\", \"ClientSecret\": \"\" }, // GitHub user account authentication. \"GitHub\": { \"Enabled\": false, \"ClientId\": \"\", \"ClientSecret\": \"\" }, // Google user account authentication. \"Google\": { \"Enabled\": false, \"ClientId\": \"\", \"ClientSecret\": \"\" } }, // Determines whether automatic migrations are enabled when set to `true`. // Otherwise manual migrations are required. i.e. `dotnet ef database update`. \"AutomaticMigrations\": true, // Memory cache settings. \"Cache\": { // Compactions percentage for cached entities. \"CompactionPercentage\": 0.25, // Expiration time limit for entities in minutes. \"EntityExpiryLimitM\": 15, // Entity names to cache (leave as is if you don't know what you're doing). \"EntityTypeNames\": [ \"Account\", \"Device\" ], // Interval at which cached entities are checked to see if expired or not. \"ExpirationScanFrequencyM\": 5, // Size limit of memory cache. \"SizeLimit\": 10240 }, // Database connection strings. \"ConnectionStrings\": { \"DefaultConnection\": \"Uid=cdcuser;Password=cdcpass123;Host=127.0.0.1;Port=3306;Database=cdcdb;old guids=true;Allow User Variables=true;\" }, // Database settings. \"Database\": { // Maximum timeout in seconds before a command is aborted. \"CommandTimeoutS\": 30, // Maximum timeout in seconds before a connection is determined as a leak. // When a connection is assumed a leak, it is aborted. \"ConnectionLeakTimeoutS\": 120, // Maximum timeout in seconds before a connection is aborted. \"ConnectionTimeoutS\": 30, // Maximum amount of retries upon failed connection. \"MaximumRetryCount\": 30, // Connection pool size. \"PoolSize\": 1024, // Timeout in seconds between attemping failed connections. \"RetryIntervalS\": 10 }, // Json web tokens authentication settings. \"Jwt\": { // Determines whether JWT authentication is enabled or not. \"Enabled\": false, // Host of JWT issuer. \"Issuer\": \"http://127.0.0.1:8881/\", // Host of JWT audience. \"Audience\": \"http://127.0.0.1:8881/\", // JWT signing key. \"Key\": \"JwtExampleSecretKey_MakeSureYouChangeThisToA_SecureRandomizedValue\", // JWT token expiration time in minutes. (Default: 30 days) \"TokenValidityM\": 43200 }, // Listening endpoints settings \"Kestrel\": { \"EndpointDefaults\": { \"Protocols\": \"Http1AndHttp2\" }, \"Endpoints\": { \"Http\": { // Configurator listening endpoint and port. \"Url\": \"http://*:8881\" }, \"Grpc\": { // gRPC listening endpoint and port to receive data from ChuckDeviceController. \"Url\": \"http://*:5002\", \"Protocols\": \"Http2\" } } }, // API keys. \"Keys\": { // SendGrid email service API key. \"SendGridKey\": \"\" }, // Locale to load and use. \"Locale\": \"en\", /* Reference: https://learn.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-7.0 */ \"Logging\": { \"LogLevel\": { \"Default\": \"Debug\", \"Microsoft.AspNetCore\": \"Warning\", \"Microsoft.EntityFrameworkCore\": \"Warning\" }, \"ColorConsole\": { \"LogLevel\": { \"Default\": \"Debug\", \"Grpc.Core\": \"None\", \"Grpc.Net.Client\": \"Warning\", \"Microsoft.AspNetCore\": \"Warning\", \"Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware\": \"None\", \"Microsoft.EntityFrameworkCore\": \"Warning\", \"Microsoft.Extensions\": \"Warning\", \"System.Net.Http.HttpClient\": \"Warning\", \"ChuckDeviceConfigurator\": \"Trace\", \"ChuckDeviceController\": \"Trace\", \"ChuckDeviceCommunicator\": \"Trace\" }, \"LogLevelColorMap\": { \"Trace\": \"Cyan\", \"Debug\": \"DarkGray\", \"Information\": \"White\", \"Warning\": \"Yellow\", \"Error\": \"Red\", \"Critical\": \"DarkRed\" }, \"UseTimestamp\": true, \"UseUnix\": false, \"TimestampFormat\": \"{0:HH}:{0:mm}:{0:ss}\" }, \"Console\": { \"LogLevel\": { \"Default\": \"Debug\", \"Microsoft.AspNetCore\": \"Warning\", \"Microsoft.EntityFrameworkCore\": \"Warning\", \"Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware\": \"None\" } }, \"File\": { \"Path\": \"bin/debug/logs/{0:yyyy}-{0:MM}-{0:dd}.log\", \"Append\": true, \"MinLevel\": \"Debug\", \"FileSizeLimitBytes\": 0, // use to activate rolling file behaviour \"MaxRollingFiles\": 0 // use to specify max number of log files } }, // Default map settings for any leaflet map instances. \"Map\": { // Starting latitude. \"StartLatitude\": 0, // Starting longitude. \"StartLongitude\": 0, // Starting zoom. \"StartZoom\": 13, // Minimum zoom level. \"MinimumZoom\": 4, // Maximum zoom level. \"MaximumZoom\": 18, // Leaflet map tileserver url. \"TileserverUrl\": \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" }, // Dashboard UI theme. \"Theme\": \"dark\", // User accounts settings \"UserAccounts\": { // User account lock out settings. \"Lockout\": { \"AllowedForNewUsers\": true, \"MaxFailedAccessAttempts\": 5, \"DefaultLockoutTimeSpan\": 15 }, // User account password settings. \"Password\": { \"RequireDigit\": true, \"RequiredLength\": 8, \"RequiredUniqueChars\": 1, \"RequireLowercase\": true, \"RequireUppercase\": true, \"RequireNonAlphanumeric\": true }, // User account sign-in settings. \"SignIn\": { \"RequireConfirmedAccount\": true, \"RequireConfirmedEmail\": true, \"RequireConfirmedPhoneNumber\": false }, // User account settings. \"User\": { \"AllowedUserNameCharacters\": \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._@+\", \"RequireUniqueEmail\": true } } }","title":"ChuckDeviceConfigurator"},{"location":"applications/configurator/#chuckdeviceconfigurator","text":"","title":"ChuckDeviceConfigurator"},{"location":"applications/configurator/#description","text":"Controls devices that request jobs as well as includes a dashboard interface to configure job controllers and other required entity types. Dashboard management UI Device controller Plugin system","title":"Description"},{"location":"applications/configurator/#user-identity","text":"","title":"User Identity"},{"location":"applications/configurator/#qr-code-generation","text":"TODO: Make QR code generator configurable","title":"QR Code Generation"},{"location":"applications/configurator/#account-confirmation-and-password-recovery","text":"TODO: Make email sending service configurable","title":"Account Confirmation and Password Recovery"},{"location":"applications/configurator/#hosted-services","text":"","title":"Hosted Services"},{"location":"applications/configurator/#accountstatushostedservice","text":"Checks all accounts with any of the following status and marks the interested columns as NULL in the database if the account punishment time has lapsed. Warning Suspended Cooldown","title":"AccountStatusHostedService"},{"location":"applications/configurator/#configuration","text":"{ // Hosts allowed to access. \"AllowedHosts\": \"*\", // Default 3rd party authentication options. \"Authentication\": { // Discord user account authentication. \"Discord\": { \"Enabled\": false, \"ClientId\": \"\", \"ClientSecret\": \"\" }, // GitHub user account authentication. \"GitHub\": { \"Enabled\": false, \"ClientId\": \"\", \"ClientSecret\": \"\" }, // Google user account authentication. \"Google\": { \"Enabled\": false, \"ClientId\": \"\", \"ClientSecret\": \"\" } }, // Determines whether automatic migrations are enabled when set to `true`. // Otherwise manual migrations are required. i.e. `dotnet ef database update`. \"AutomaticMigrations\": true, // Memory cache settings. \"Cache\": { // Compactions percentage for cached entities. \"CompactionPercentage\": 0.25, // Expiration time limit for entities in minutes. \"EntityExpiryLimitM\": 15, // Entity names to cache (leave as is if you don't know what you're doing). \"EntityTypeNames\": [ \"Account\", \"Device\" ], // Interval at which cached entities are checked to see if expired or not. \"ExpirationScanFrequencyM\": 5, // Size limit of memory cache. \"SizeLimit\": 10240 }, // Database connection strings. \"ConnectionStrings\": { \"DefaultConnection\": \"Uid=cdcuser;Password=cdcpass123;Host=127.0.0.1;Port=3306;Database=cdcdb;old guids=true;Allow User Variables=true;\" }, // Database settings. \"Database\": { // Maximum timeout in seconds before a command is aborted. \"CommandTimeoutS\": 30, // Maximum timeout in seconds before a connection is determined as a leak. // When a connection is assumed a leak, it is aborted. \"ConnectionLeakTimeoutS\": 120, // Maximum timeout in seconds before a connection is aborted. \"ConnectionTimeoutS\": 30, // Maximum amount of retries upon failed connection. \"MaximumRetryCount\": 30, // Connection pool size. \"PoolSize\": 1024, // Timeout in seconds between attemping failed connections. \"RetryIntervalS\": 10 }, // Json web tokens authentication settings. \"Jwt\": { // Determines whether JWT authentication is enabled or not. \"Enabled\": false, // Host of JWT issuer. \"Issuer\": \"http://127.0.0.1:8881/\", // Host of JWT audience. \"Audience\": \"http://127.0.0.1:8881/\", // JWT signing key. \"Key\": \"JwtExampleSecretKey_MakeSureYouChangeThisToA_SecureRandomizedValue\", // JWT token expiration time in minutes. (Default: 30 days) \"TokenValidityM\": 43200 }, // Listening endpoints settings \"Kestrel\": { \"EndpointDefaults\": { \"Protocols\": \"Http1AndHttp2\" }, \"Endpoints\": { \"Http\": { // Configurator listening endpoint and port. \"Url\": \"http://*:8881\" }, \"Grpc\": { // gRPC listening endpoint and port to receive data from ChuckDeviceController. \"Url\": \"http://*:5002\", \"Protocols\": \"Http2\" } } }, // API keys. \"Keys\": { // SendGrid email service API key. \"SendGridKey\": \"\" }, // Locale to load and use. \"Locale\": \"en\", /* Reference: https://learn.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-7.0 */ \"Logging\": { \"LogLevel\": { \"Default\": \"Debug\", \"Microsoft.AspNetCore\": \"Warning\", \"Microsoft.EntityFrameworkCore\": \"Warning\" }, \"ColorConsole\": { \"LogLevel\": { \"Default\": \"Debug\", \"Grpc.Core\": \"None\", \"Grpc.Net.Client\": \"Warning\", \"Microsoft.AspNetCore\": \"Warning\", \"Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware\": \"None\", \"Microsoft.EntityFrameworkCore\": \"Warning\", \"Microsoft.Extensions\": \"Warning\", \"System.Net.Http.HttpClient\": \"Warning\", \"ChuckDeviceConfigurator\": \"Trace\", \"ChuckDeviceController\": \"Trace\", \"ChuckDeviceCommunicator\": \"Trace\" }, \"LogLevelColorMap\": { \"Trace\": \"Cyan\", \"Debug\": \"DarkGray\", \"Information\": \"White\", \"Warning\": \"Yellow\", \"Error\": \"Red\", \"Critical\": \"DarkRed\" }, \"UseTimestamp\": true, \"UseUnix\": false, \"TimestampFormat\": \"{0:HH}:{0:mm}:{0:ss}\" }, \"Console\": { \"LogLevel\": { \"Default\": \"Debug\", \"Microsoft.AspNetCore\": \"Warning\", \"Microsoft.EntityFrameworkCore\": \"Warning\", \"Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware\": \"None\" } }, \"File\": { \"Path\": \"bin/debug/logs/{0:yyyy}-{0:MM}-{0:dd}.log\", \"Append\": true, \"MinLevel\": \"Debug\", \"FileSizeLimitBytes\": 0, // use to activate rolling file behaviour \"MaxRollingFiles\": 0 // use to specify max number of log files } }, // Default map settings for any leaflet map instances. \"Map\": { // Starting latitude. \"StartLatitude\": 0, // Starting longitude. \"StartLongitude\": 0, // Starting zoom. \"StartZoom\": 13, // Minimum zoom level. \"MinimumZoom\": 4, // Maximum zoom level. \"MaximumZoom\": 18, // Leaflet map tileserver url. \"TileserverUrl\": \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" }, // Dashboard UI theme. \"Theme\": \"dark\", // User accounts settings \"UserAccounts\": { // User account lock out settings. \"Lockout\": { \"AllowedForNewUsers\": true, \"MaxFailedAccessAttempts\": 5, \"DefaultLockoutTimeSpan\": 15 }, // User account password settings. \"Password\": { \"RequireDigit\": true, \"RequiredLength\": 8, \"RequiredUniqueChars\": 1, \"RequireLowercase\": true, \"RequireUppercase\": true, \"RequireNonAlphanumeric\": true }, // User account sign-in settings. \"SignIn\": { \"RequireConfirmedAccount\": true, \"RequireConfirmedEmail\": true, \"RequireConfirmedPhoneNumber\": false }, // User account settings. \"User\": { \"AllowedUserNameCharacters\": \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._@+\", \"RequireUniqueEmail\": true } } }","title":"Configuration"},{"location":"applications/controller/","text":"ChuckDeviceController \uf0c1 Description \uf0c1 Parses raw proto data received and inserts/upserts data entities into a MySQL compatible database. Hosted Services \uf0c1 ClearFortsHostedService \uf0c1 Soft deletes Pokestop and Gym forts that have not been seen within S2 cells. This will not permanently delete the entities from the database but instead set the deleted database columns to true as well as the enabled columns to false . Configuration \uf0c1 { // Hosts allowed to access. \"AllowedHosts\": \"*\", // Determines whether automatic migrations are enabled when set to `true`. // Otherwise manual migrations are required. i.e. `dotnet ef database update`. \"AutomaticMigrations\": true, \"Cache\": { // Memory cache settings. \"CompactionPercentage\": 0.25, // Expiration time limit for entities in minutes. \"EntityExpiryLimitM\": 30, // Entity names to cache (leave as is if you don't know what you're doing). \"EntityTypeNames\": [ \"Account\", \"Device\", \"Cell\", \"Gym\", \"Incident\", \"Pokemon\", \"Pokestop\", \"Spawnpoint\", \"Weather\" ], // Interval at which cached entities are checked to see if expired or not. \"ExpirationScanFrequencyM\": 5, // Size limit of memory cache. \"SizeLimit\": 10240 }, // Database connection strings. \"ConnectionStrings\": { \"DefaultConnection\": \"Uid=cdcuser;Password=cdcpass123;Host=127.0.0.1;Port=3306;Database=cdcdb;old guids=true;Allow User Variables=true;\" }, // Determines whether to convert MAD proto data to compatible payload format. \"ConvertMadData\": false, // Database settings. \"Database\": { // Maximum timeout in seconds before a command is aborted. \"CommandTimeoutS\": 30, // Maximum timeout in seconds before a connection is determined as a leak. // When a connection is assumed a leak, it is aborted. \"ConnectionLeakTimeoutS\": 120, // Maximum timeout in seconds before a connection is aborted. \"ConnectionTimeoutS\": 30, // Maximum amount of retries upon failed connection. \"MaximumRetryCount\": 30, // Connection pool size. \"PoolSize\": 1024, // Timeout in seconds between attemping failed connections. \"RetryIntervalS\": 10 }, // gRPC listener endpoints. \"Grpc\": { // gRPC listener endpoint of ChuckDeviceConfigurator. Used to relay scanned Pokemon statistics, trainer account information, as well as gym information. \"Configurator\": \"http://localhost:5002\", // gRPC listener endpoint of ChuckDeviceCommunicator. Used to relay processed data entities ready to send to configured webhook endpoints. \"Communicator\": \"http://localhost:5003\" }, /* Reference: https://learn.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-7.0 */ \"Logging\": { \"LogLevel\": { \"Default\": \"Debug\", \"Grpc.Core\": \"None\", \"Microsoft.AspNetCore\": \"Warning\", \"Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware\": \"None\", \"Microsoft.EntityFrameworkCore\": \"Information\", \"ChuckDeviceConfigurator\": \"Trace\", \"ChuckDeviceController\": \"Trace\", \"ChuckDeviceCommunicator\": \"Trace\" }, \"ColorConsole\": { \"LogLevel\": { \"Default\": \"Trace\", \"Grpc.Core\": \"None\", \"Grpc.Net.Client\": \"Warning\", \"Microsoft.AspNetCore\": \"Warning\", \"Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware\": \"None\", \"Microsoft.EntityFrameworkCore\": \"Warning\", \"Microsoft.Extensions\": \"Warning\", \"System.Net.Http.HttpClient\": \"Warning\", \"ChuckDeviceConfigurator\": \"Trace\", \"ChuckDeviceController\": \"Trace\", \"ChuckDeviceCommunicator\": \"Trace\" }, \"LogLevelColorMap\": { \"Trace\": \"Cyan\", \"Debug\": \"DarkGray\", \"Information\": \"White\", \"Warning\": \"Yellow\", \"Error\": \"Red\", \"Critical\": \"DarkRed\" }, \"UseTimestamp\": true, \"UseUnix\": false, \"TimestampFormat\": \"{0:HH}:{0:mm}:{0:ss}\" }, \"Console\": { \"LogLevel\": { \"Default\": \"Debug\", \"Microsoft.AspNetCore\": \"Warning\", \"Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware\": \"None\", \"Microsoft.EntityFrameworkCore\": \"Information\", \"Microsoft.Extensions\": \"Information\", \"ChuckDeviceConfigurator\": \"Trace\", \"ChuckDeviceController\": \"Trace\", \"ChuckDeviceCommunicator\": \"Trace\" } }, \"File\": { \"Path\": \"bin/debug/logs/{0:yyyy}-{0:MM}-{0:dd}.log\", \"Append\": true, \"MinLevel\": \"Debug\", \"FileSizeLimitBytes\": 0, // use to activate rolling file behaviour \"MaxRollingFiles\": 0 // use to specify max number of log files } }, \"GymOptions\": { \"ExRaidBossId\": 150, \"ExRaidBossForm\": 0 }, \"PokemonOptions\": { \"EnablePvp\": false, \"EnableMapPokemon\": false, \"EnableWeatherIvClearing\": false, \"SaveSpawnpointLastSeen\": true }, // Default Pokestop settings. \"PokestopOptions\": { // Lure time in seconds (Default: 30 seconds) \"LureTimeS\": 1800 }, // Data processing settings. \"ProcessingOptions\": { // Proto processing service settings. \"Protos\": { // Interval in seconds between batch processing of received protos. \"IntervalS\": 3, \"LogLevel\": \"Summary\", // Show processing benchmark times. (i.e. `Processed 64 protos in 1.234s`) \"ShowProcessingTimes\": true, // Show processing benchmark counts. (i.e. `Processed 1/20 weather cells`) \"ShowProcessingCount\": true, // Decimal precision of benchmark times when `ShowProcessingTimes` is enabled. \"DecimalPrecision\": 5, // Determines whether AR quests are allowed or not. \"AllowArQuests\": true, // Determines whether to process map/lure Pokemon encounters. \"ProcessMapPokemon\": true, // Proto processing queue settings. \"Queue\": { // Maximum amount of protos to batch when processing. \"MaximumBatchSize\": 100, // Maximum size of queue before warning message is shown. \"MaximumSizeWarning\": 1024, // Maximum queue capacity. \"MaximumQueueCapacity\": 10240 } }, // Data entities processing service settings. \"Data\": { // Soft delete any forts that have upgraded, downgraded, or removed. \"ClearOldForts\": true, // Interval in seconds between batch processing data entities. \"IntervalS\": 3, \"LogLevel\": \"Summary\", // Show processing benchmark times. (i.e. `Processed 1422 entities in 1.234s`) \"ShowProcessingTimes\": true, // Show processing benchmark counts. (i.e. `Processed 1/20 weather cells`) Disabled by default and should only be used for debugging. \"ShowProcessingCount\": false, // Decimal precision of benchmark times when `ShowProcessingTimes` is enabled. \"DecimalPrecision\": 4, // Concurrency level for processing data entities. Basically how many parsers active at once. \"ParsingConcurrencyLevel\": 15, // Determines whether or not to process player account protos. \"ProcessPlayerData\": true, // Determines whether or not to process S2 cell protos. \"ProcessCells\": true, // Determines whether or not to process S2 client weather cell protos. \"ProcessWeather\": true, // Determines whether or not to process fort protos. \"ProcessForts\": true, // Determines whether or not to process fort details protos. \"ProcessFortDetails\": true, // Determines whether or not to process Gym info protos. \"ProcessGymInfo\": true, // Determines whether or not to process Gym defenders from `GymInfo`. \"ProcessGymDefenders\": true, // Determines whether or not to process Gym trainers from `GymInfo` protos. \"ProcessGymTrainers\": true, // Determines whether or not to process Pokestop incidents. \"ProcessIncidents\": true, // Determines whether or not to process wild Pokemon protos. \"ProcessWildPokemon\": true, // Determines whether or not to process nearby Pokemon protos. \"ProcessNearbyPokemon\": true, // Determines whether or not to process map/lure Pokemon protos. \"ProcessMapPokemon\": true, // Determines whether or not to process Pokestop quest protos. \"ProcessQuests\": true, // Determines whether or not to process Pokemon encounter protos. \"ProcessEncounters\": true, // Determines whether or not to process Pokemon disk encounter protos. \"ProcessDiskEncounters\": true, // Data entity processing queue settings. \"Queue\": { // Maximum amount of entities to batch when processing. \"MaximumBatchSize\": 100, // Maximum size of queue before warning message is shown. \"MaximumSizeWarning\": 1024, // Maximum queue capacity. \"MaximumQueueCapacity\": 10240 } }, // Data entity consumer service settings. \"Consumer\": { // Interval in seconds between batch insert/upsert of processed data entities. \"IntervalS\": 5, \"LogLevel\": \"Summary\", // Show processing benchmark times. (i.e. `Consumed 1422 entities in 1.234s`) \"ShowProcessingTimes\": true, // Not currently used. \"ShowProcessingCount\": true, // Decimal precision of benchmark times when `ShowProcessingTimes` is enabled. \"DecimalPrecision\": 3, // Not currently used. Transactions are always used. \"UseTransactions\": true, // Data entity consumer processing queue settings. \"Queue\": { // Maximum amount of entities to batch upsert. \"MaximumBatchSize\": 5000, // Maximum size of queue before warning message is shown. \"MaximumSizeWarning\": 10240, // Maximum queue capacity. \"MaximumQueueCapacity\": 1048576 }, // Concurrency level for consuming processed data entities. Basically how many parsers active at once * CPU core count. \"QueueConcurrencyLevelMultiplier\": 10 } }, // Statistics database triggers settings. \"StatisticTriggers\": { // Determines whether to enable Pokemon database triggers. (Not currently used) \"Pokemon\": false }, // Listening endpoint and port to receive proto data from devices. Multiple endpoints are supported, use semicolons (`;`) as delimiter between endpoints. \"Urls\": \"http://*:8888\", // Webhook settings. \"Webhooks\": { // Determines whether to relay webhook payloads to ChuckDeviceCommunicator. \"Enabled\": false } }","title":"ChuckDeviceController"},{"location":"applications/controller/#chuckdevicecontroller","text":"","title":"ChuckDeviceController"},{"location":"applications/controller/#description","text":"Parses raw proto data received and inserts/upserts data entities into a MySQL compatible database.","title":"Description"},{"location":"applications/controller/#hosted-services","text":"","title":"Hosted Services"},{"location":"applications/controller/#clearfortshostedservice","text":"Soft deletes Pokestop and Gym forts that have not been seen within S2 cells. This will not permanently delete the entities from the database but instead set the deleted database columns to true as well as the enabled columns to false .","title":"ClearFortsHostedService"},{"location":"applications/controller/#configuration","text":"{ // Hosts allowed to access. \"AllowedHosts\": \"*\", // Determines whether automatic migrations are enabled when set to `true`. // Otherwise manual migrations are required. i.e. `dotnet ef database update`. \"AutomaticMigrations\": true, \"Cache\": { // Memory cache settings. \"CompactionPercentage\": 0.25, // Expiration time limit for entities in minutes. \"EntityExpiryLimitM\": 30, // Entity names to cache (leave as is if you don't know what you're doing). \"EntityTypeNames\": [ \"Account\", \"Device\", \"Cell\", \"Gym\", \"Incident\", \"Pokemon\", \"Pokestop\", \"Spawnpoint\", \"Weather\" ], // Interval at which cached entities are checked to see if expired or not. \"ExpirationScanFrequencyM\": 5, // Size limit of memory cache. \"SizeLimit\": 10240 }, // Database connection strings. \"ConnectionStrings\": { \"DefaultConnection\": \"Uid=cdcuser;Password=cdcpass123;Host=127.0.0.1;Port=3306;Database=cdcdb;old guids=true;Allow User Variables=true;\" }, // Determines whether to convert MAD proto data to compatible payload format. \"ConvertMadData\": false, // Database settings. \"Database\": { // Maximum timeout in seconds before a command is aborted. \"CommandTimeoutS\": 30, // Maximum timeout in seconds before a connection is determined as a leak. // When a connection is assumed a leak, it is aborted. \"ConnectionLeakTimeoutS\": 120, // Maximum timeout in seconds before a connection is aborted. \"ConnectionTimeoutS\": 30, // Maximum amount of retries upon failed connection. \"MaximumRetryCount\": 30, // Connection pool size. \"PoolSize\": 1024, // Timeout in seconds between attemping failed connections. \"RetryIntervalS\": 10 }, // gRPC listener endpoints. \"Grpc\": { // gRPC listener endpoint of ChuckDeviceConfigurator. Used to relay scanned Pokemon statistics, trainer account information, as well as gym information. \"Configurator\": \"http://localhost:5002\", // gRPC listener endpoint of ChuckDeviceCommunicator. Used to relay processed data entities ready to send to configured webhook endpoints. \"Communicator\": \"http://localhost:5003\" }, /* Reference: https://learn.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-7.0 */ \"Logging\": { \"LogLevel\": { \"Default\": \"Debug\", \"Grpc.Core\": \"None\", \"Microsoft.AspNetCore\": \"Warning\", \"Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware\": \"None\", \"Microsoft.EntityFrameworkCore\": \"Information\", \"ChuckDeviceConfigurator\": \"Trace\", \"ChuckDeviceController\": \"Trace\", \"ChuckDeviceCommunicator\": \"Trace\" }, \"ColorConsole\": { \"LogLevel\": { \"Default\": \"Trace\", \"Grpc.Core\": \"None\", \"Grpc.Net.Client\": \"Warning\", \"Microsoft.AspNetCore\": \"Warning\", \"Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware\": \"None\", \"Microsoft.EntityFrameworkCore\": \"Warning\", \"Microsoft.Extensions\": \"Warning\", \"System.Net.Http.HttpClient\": \"Warning\", \"ChuckDeviceConfigurator\": \"Trace\", \"ChuckDeviceController\": \"Trace\", \"ChuckDeviceCommunicator\": \"Trace\" }, \"LogLevelColorMap\": { \"Trace\": \"Cyan\", \"Debug\": \"DarkGray\", \"Information\": \"White\", \"Warning\": \"Yellow\", \"Error\": \"Red\", \"Critical\": \"DarkRed\" }, \"UseTimestamp\": true, \"UseUnix\": false, \"TimestampFormat\": \"{0:HH}:{0:mm}:{0:ss}\" }, \"Console\": { \"LogLevel\": { \"Default\": \"Debug\", \"Microsoft.AspNetCore\": \"Warning\", \"Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware\": \"None\", \"Microsoft.EntityFrameworkCore\": \"Information\", \"Microsoft.Extensions\": \"Information\", \"ChuckDeviceConfigurator\": \"Trace\", \"ChuckDeviceController\": \"Trace\", \"ChuckDeviceCommunicator\": \"Trace\" } }, \"File\": { \"Path\": \"bin/debug/logs/{0:yyyy}-{0:MM}-{0:dd}.log\", \"Append\": true, \"MinLevel\": \"Debug\", \"FileSizeLimitBytes\": 0, // use to activate rolling file behaviour \"MaxRollingFiles\": 0 // use to specify max number of log files } }, \"GymOptions\": { \"ExRaidBossId\": 150, \"ExRaidBossForm\": 0 }, \"PokemonOptions\": { \"EnablePvp\": false, \"EnableMapPokemon\": false, \"EnableWeatherIvClearing\": false, \"SaveSpawnpointLastSeen\": true }, // Default Pokestop settings. \"PokestopOptions\": { // Lure time in seconds (Default: 30 seconds) \"LureTimeS\": 1800 }, // Data processing settings. \"ProcessingOptions\": { // Proto processing service settings. \"Protos\": { // Interval in seconds between batch processing of received protos. \"IntervalS\": 3, \"LogLevel\": \"Summary\", // Show processing benchmark times. (i.e. `Processed 64 protos in 1.234s`) \"ShowProcessingTimes\": true, // Show processing benchmark counts. (i.e. `Processed 1/20 weather cells`) \"ShowProcessingCount\": true, // Decimal precision of benchmark times when `ShowProcessingTimes` is enabled. \"DecimalPrecision\": 5, // Determines whether AR quests are allowed or not. \"AllowArQuests\": true, // Determines whether to process map/lure Pokemon encounters. \"ProcessMapPokemon\": true, // Proto processing queue settings. \"Queue\": { // Maximum amount of protos to batch when processing. \"MaximumBatchSize\": 100, // Maximum size of queue before warning message is shown. \"MaximumSizeWarning\": 1024, // Maximum queue capacity. \"MaximumQueueCapacity\": 10240 } }, // Data entities processing service settings. \"Data\": { // Soft delete any forts that have upgraded, downgraded, or removed. \"ClearOldForts\": true, // Interval in seconds between batch processing data entities. \"IntervalS\": 3, \"LogLevel\": \"Summary\", // Show processing benchmark times. (i.e. `Processed 1422 entities in 1.234s`) \"ShowProcessingTimes\": true, // Show processing benchmark counts. (i.e. `Processed 1/20 weather cells`) Disabled by default and should only be used for debugging. \"ShowProcessingCount\": false, // Decimal precision of benchmark times when `ShowProcessingTimes` is enabled. \"DecimalPrecision\": 4, // Concurrency level for processing data entities. Basically how many parsers active at once. \"ParsingConcurrencyLevel\": 15, // Determines whether or not to process player account protos. \"ProcessPlayerData\": true, // Determines whether or not to process S2 cell protos. \"ProcessCells\": true, // Determines whether or not to process S2 client weather cell protos. \"ProcessWeather\": true, // Determines whether or not to process fort protos. \"ProcessForts\": true, // Determines whether or not to process fort details protos. \"ProcessFortDetails\": true, // Determines whether or not to process Gym info protos. \"ProcessGymInfo\": true, // Determines whether or not to process Gym defenders from `GymInfo`. \"ProcessGymDefenders\": true, // Determines whether or not to process Gym trainers from `GymInfo` protos. \"ProcessGymTrainers\": true, // Determines whether or not to process Pokestop incidents. \"ProcessIncidents\": true, // Determines whether or not to process wild Pokemon protos. \"ProcessWildPokemon\": true, // Determines whether or not to process nearby Pokemon protos. \"ProcessNearbyPokemon\": true, // Determines whether or not to process map/lure Pokemon protos. \"ProcessMapPokemon\": true, // Determines whether or not to process Pokestop quest protos. \"ProcessQuests\": true, // Determines whether or not to process Pokemon encounter protos. \"ProcessEncounters\": true, // Determines whether or not to process Pokemon disk encounter protos. \"ProcessDiskEncounters\": true, // Data entity processing queue settings. \"Queue\": { // Maximum amount of entities to batch when processing. \"MaximumBatchSize\": 100, // Maximum size of queue before warning message is shown. \"MaximumSizeWarning\": 1024, // Maximum queue capacity. \"MaximumQueueCapacity\": 10240 } }, // Data entity consumer service settings. \"Consumer\": { // Interval in seconds between batch insert/upsert of processed data entities. \"IntervalS\": 5, \"LogLevel\": \"Summary\", // Show processing benchmark times. (i.e. `Consumed 1422 entities in 1.234s`) \"ShowProcessingTimes\": true, // Not currently used. \"ShowProcessingCount\": true, // Decimal precision of benchmark times when `ShowProcessingTimes` is enabled. \"DecimalPrecision\": 3, // Not currently used. Transactions are always used. \"UseTransactions\": true, // Data entity consumer processing queue settings. \"Queue\": { // Maximum amount of entities to batch upsert. \"MaximumBatchSize\": 5000, // Maximum size of queue before warning message is shown. \"MaximumSizeWarning\": 10240, // Maximum queue capacity. \"MaximumQueueCapacity\": 1048576 }, // Concurrency level for consuming processed data entities. Basically how many parsers active at once * CPU core count. \"QueueConcurrencyLevelMultiplier\": 10 } }, // Statistics database triggers settings. \"StatisticTriggers\": { // Determines whether to enable Pokemon database triggers. (Not currently used) \"Pokemon\": false }, // Listening endpoint and port to receive proto data from devices. Multiple endpoints are supported, use semicolons (`;`) as delimiter between endpoints. \"Urls\": \"http://*:8888\", // Webhook settings. \"Webhooks\": { // Determines whether to relay webhook payloads to ChuckDeviceCommunicator. \"Enabled\": false } }","title":"Configuration"},{"location":"applications/proxy/","text":"ChuckDeviceProxy \uf0c1 Description \uf0c1 Splits and proxies requests from Atlas devices to separate endpoints in order to add support for ChuckDeviceController until Atlas is updated. Configuration \uf0c1 { // Listening endpoint and port to receive proto data from Atlas devices which // will be relayed to the below configured endpoints. // Multiple endpoints are supported, use semicolons (`;`) as delimiter // between endpoints. \"Urls\": \"http://*:5151\", // ChuckDeviceConfigurator device controller endpoint to proxy. \"ControllerEndpoint\": \"http://127.0.0.1:8881/controler\", // ChuckDeviceController proto data endpoint to proxy. \"RawEndpoint\": \"http://127.0.0.1:8882/raw\", \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft.AspNetCore\": \"Warning\" } }, // Hosts allowed to access. \"AllowedHosts\": \"*\" }","title":"ChuckDeviceProxy"},{"location":"applications/proxy/#chuckdeviceproxy","text":"","title":"ChuckDeviceProxy"},{"location":"applications/proxy/#description","text":"Splits and proxies requests from Atlas devices to separate endpoints in order to add support for ChuckDeviceController until Atlas is updated.","title":"Description"},{"location":"applications/proxy/#configuration","text":"{ // Listening endpoint and port to receive proto data from Atlas devices which // will be relayed to the below configured endpoints. // Multiple endpoints are supported, use semicolons (`;`) as delimiter // between endpoints. \"Urls\": \"http://*:5151\", // ChuckDeviceConfigurator device controller endpoint to proxy. \"ControllerEndpoint\": \"http://127.0.0.1:8881/controler\", // ChuckDeviceController proto data endpoint to proxy. \"RawEndpoint\": \"http://127.0.0.1:8882/raw\", \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft.AspNetCore\": \"Warning\" } }, // Hosts allowed to access. \"AllowedHosts\": \"*\" }","title":"Configuration"},{"location":"other/3rd-party-auth/","text":"3rd Party OAuth Authentication Providers \uf0c1 Modify the below configuration file auth_providers.json to customize the displayed login buttons for each 3rd party authentication provider. Microsoft Documentation \uf0c1 https://learn.microsoft.com/en-us/aspnet/core/security/authentication/social Fontawesome Icons \uf0c1 https://fontawesome.com/search?m=free Configuration \uf0c1 Location \uf0c1 The 3rd party OAuth authentication providers styling configuration file is located: src/ChuckDeviceConfigurator/bin/Debug/wwwroot/data/auth_providers.json Example \uf0c1 { \"Discord\": { \"Icon\": \"fa-brands fa-discord fa-align-left social-icon\", \"Class\": \"\", \"Style\": \"background: #5865F2; color: #fff;\" }, \"GitHub\": { \"Icon\": \"fa-brands fa-github fa-align-left social-icon\", \"Class\": \"\", \"Style\": \"background: #000000; color: #fff;\" }, \"Google\": { \"Icon\": \"fa-brands fa-google fa-align-left social-icon\", \"Class\": \"\", \"Style\": \"background: #d24228; color: #fff;\" }, \"Reddit\": { \"Icon\": \"fa-brands fa-reddit fa-align-left social-icon\", \"Class\": \"\", \"Style\": \"background: #FF4500; color: #fff;\" }, \"GitLab\": { \"Icon\": \"fa-brands fa-gitlab fa-align-left social-icon\", \"Class\": \"\", \"Style\": \"background: #E24329; color: #fff;\" }, \"Bitbucket\": { \"Icon\": \"fa-brands fa-bitbucket fa-align-left social-icon\", \"Class\": \"\", \"Style\": \"background: #2684FF; color: #fff;\" }, \"Visual Studio Online\": { \"Icon\": \"fa-brands fa-microsoft fa-align-left social-icon\", \"Class\": \"\", \"Style\": \"background: #3376D0; color: #fff;\" }, \"Microsoft\": { \"Icon\": \"fa-brands fa-microsoft fa-align-left social-icon\", \"Class\": \"\", \"Style\": \"background: #3376D0; color: #fff;\" } }","title":"3rd Party Authentication"},{"location":"other/3rd-party-auth/#3rd-party-oauth-authentication-providers","text":"Modify the below configuration file auth_providers.json to customize the displayed login buttons for each 3rd party authentication provider.","title":"3rd Party OAuth Authentication Providers"},{"location":"other/3rd-party-auth/#microsoft-documentation","text":"https://learn.microsoft.com/en-us/aspnet/core/security/authentication/social","title":"Microsoft Documentation"},{"location":"other/3rd-party-auth/#fontawesome-icons","text":"https://fontawesome.com/search?m=free","title":"Fontawesome Icons"},{"location":"other/3rd-party-auth/#configuration","text":"","title":"Configuration"},{"location":"other/3rd-party-auth/#location","text":"The 3rd party OAuth authentication providers styling configuration file is located: src/ChuckDeviceConfigurator/bin/Debug/wwwroot/data/auth_providers.json","title":"Location"},{"location":"other/3rd-party-auth/#example","text":"{ \"Discord\": { \"Icon\": \"fa-brands fa-discord fa-align-left social-icon\", \"Class\": \"\", \"Style\": \"background: #5865F2; color: #fff;\" }, \"GitHub\": { \"Icon\": \"fa-brands fa-github fa-align-left social-icon\", \"Class\": \"\", \"Style\": \"background: #000000; color: #fff;\" }, \"Google\": { \"Icon\": \"fa-brands fa-google fa-align-left social-icon\", \"Class\": \"\", \"Style\": \"background: #d24228; color: #fff;\" }, \"Reddit\": { \"Icon\": \"fa-brands fa-reddit fa-align-left social-icon\", \"Class\": \"\", \"Style\": \"background: #FF4500; color: #fff;\" }, \"GitLab\": { \"Icon\": \"fa-brands fa-gitlab fa-align-left social-icon\", \"Class\": \"\", \"Style\": \"background: #E24329; color: #fff;\" }, \"Bitbucket\": { \"Icon\": \"fa-brands fa-bitbucket fa-align-left social-icon\", \"Class\": \"\", \"Style\": \"background: #2684FF; color: #fff;\" }, \"Visual Studio Online\": { \"Icon\": \"fa-brands fa-microsoft fa-align-left social-icon\", \"Class\": \"\", \"Style\": \"background: #3376D0; color: #fff;\" }, \"Microsoft\": { \"Icon\": \"fa-brands fa-microsoft fa-align-left social-icon\", \"Class\": \"\", \"Style\": \"background: #3376D0; color: #fff;\" } }","title":"Example"},{"location":"other/custom-settings/","text":"Custom Settings \uf0c1 Any custom settings introduced by plugins using the IUiHost host handler are read from and saved to the following location: ./src/ChuckDeviceConfigurator/bin/Debug/settings.json","title":"Custom Settings"},{"location":"other/custom-settings/#custom-settings","text":"Any custom settings introduced by plugins using the IUiHost host handler are read from and saved to the following location: ./src/ChuckDeviceConfigurator/bin/Debug/settings.json","title":"Custom Settings"},{"location":"plugin-system/api/","text":"Plugin API Reference \uf0c1 Contents \uf0c1 DashboardStatsItem #ctor(name,value,isHtml) IsHtml Name Value DashboardTile #ctor(text,value,icon,controllerName,actionName) ActionName ControllerName Icon Text Value DatabaseConnectionState Connected Disconnected EventExecutionResult Executed UnhandledException GeofenceTypeAttribute #ctor(type) Type IAuthorizeHost RegisterRole(name,displayIndex) IConfigurationHost GetConfiguration(jsonFileName,sectionName) GetValue``1(name,defaultValue,sectionName) ICustomObserver`1 Unsubscribe() IDashboardStatsItem IsHtml Name Value IDashboardTile ActionName ControllerName Icon Text Value IDatabaseEvents OnEntityAdded``1(entity) OnEntityDeleted``1(entity) OnEntityModified``1(oldEntity,newEntity) OnStateChanged(state) IDatabaseHost FindAllAsync``1() FindAsync``2(id) FindAsync``2(predicate,order,sortDirection,limit) IEvent Payload IEventAggregatorHost Publish(message) Subscribe(observer) Subscribe``1(observer) IFileStorageHost IGeofenceServiceHost CreateGeofenceAsync(options) GetCoordinates(geofence) GetGeofenceAsync(name) GetMultiPolygons(geofence) IsPointInMultiPolygon(coord,multiPolygon) IsPointInMultiPolygons(coord,multiPolygons) IsPointInPolygon(coord,coordinates) IInstanceServiceHost CreateInstanceAsync(options) IJobControllerServiceEvents IJobControllerServiceHost CustomInstanceTypes Devices Instances AssignDeviceToJobControllerAsync(device,instanceName) RegisterJobControllerAsync``1(customInstanceType) ILoadData Load``1(folderName,fileName) ILocalizationHost CountryCode CurrentCulture GetAlignmentName(alignmentTypeId) GetCharacterCategoryName(characterCategoryId) GetCostumeName(costumeId) GetEvolutionName(evolutionId) GetFormName(formId,includeNormal) GetGruntType(invasionCharacterId) GetItem(itemId) GetMoveName(moveId) GetPokemonName(pokemonId) GetThrowName(throwTypeId) GetWeather(weatherConditionId) SetLocale(locale) Translate(key) Translate(keyWithArgs,args) ILoggingHost LogCritical(message,args) LogCritical(error,message,args) LogDebug(message,args) LogError(message,args) LogError(error,message,args) LogInformation(message,args) LogTrace(message,args) LogWarning(message,args) IMemoryCacheHost Clear() GetValue``1(key) IsSet(key) Remove(key) SetValue``1(key,value,expiryS) TryGetValue``1(key,value) IMetadata Author Description Name Version IPlugin IPluginBootstrapperServiceAttribute ProxyType ServiceType IPluginEvents OnLoad() OnReload() OnRemove() OnStateChanged(state) OnStop() IPluginServiceAttribute Lifetime Provider ProxyType ServiceType IPublisher Publish(payload) IRepository`2 GetByIdAsync(id) GetListAsync() IRoutingHost GenerateRoute(options) ISaveData Save``1(data,folderName,name,prettyPrint) ISettingsProperty Class DefaultValue DisplayIndex Group IsRequired Name Style Text Type Validate Value ISettingsPropertyEvents OnSave() ISettingsPropertyGroup DisplayIndex Id Text ISettingsTab Anchor Class DisplayIndex Id Style Text ISidebarItem ActionName ControllerName DisplayIndex Icon IsDisabled IsSeparator Text IUIconsHost GetPokemonIcon(pokemonId,formId,evolutionId,gender,costumeId,shiny) IUiEvents IUiHost DashboardStatsItems DashboardTiles SettingsProperties SettingsTabs SidebarItems AddDashboardStatisticAsync(stat) AddDashboardStatisticsAsync(stats) AddDashboardTileAsync(tile) AddDashboardTilesAsync(tiles) AddSettingsPropertiesAsync(tabId,properties) AddSettingsPropertyAsync(tabId,property) AddSettingsTabAsync(tab) AddSidebarItemAsync(header) AddSidebarItemsAsync(headers) GetSettingsPropertyValue``1(name) UpdateDashboardStatisticAsync(stat) UpdateDashboardStatisticsAsync(stats) IWebPlugin Configure(appBuilder) ConfigureMvcBuilder(mvcBuilder) ConfigureServices(services) PluginApiKeyAttribute #ctor(apiKey) ApiKey PluginBootstrapperServiceAttribute #ctor(serviceType) #ctor(serviceType,proxyType) ProxyType ServiceType PluginEvent #ctor(payload) Payload PluginObserver OnCompleted() OnError(error) OnNext(value) Unsubscribe() PluginServiceAttribute #ctor() #ctor(serviceType,proxyType,provider,lifetime) Lifetime Provider ProxyType ServiceType PluginServiceProvider Host Plugin RouteGenerationType Bootstrap Optimized Randomized RouteGeneratorOptions MaximumPoints MultiPolygons RadiusM RouteType SettingsProperty #ctor() #ctor(text,name,type,value,defaultValue,displayIndex,isRequired,validate,className,style,group) Class DefaultValue DisplayIndex Group IsRequired Name Style Text Type Validate Value SettingsPropertyGroup #ctor() #ctor(id,text,displayIndex) DisplayIndex Id Text Equals(obj) Equals(other) GetHashCode() SettingsPropertyType CheckBox Number Select Text TextArea SettingsTab #ctor() #ctor(id,text,anchor,displayIndex,className,style) Anchor Class DisplayIndex Id Style Text SidebarItem #ctor() #ctor(text,controllerName,actionName,icon,displayIndex,isDropdown,dropdownItems,isDisabled,isSeparator) ActionName ControllerName DisplayIndex DropdownItems Icon IsDisabled IsDropdown IsSeparator Text StaticFilesLocation External None Resources StaticFilesLocationAttribute #ctor(views,webRoot) Views WebRoot DashboardStatsItem type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 IDashboardStatsItem class implementation for displaying information on the front page. #ctor(name,value,isHtml) constructor \uf0c1 Summary \uf0c1 Instantiates a new instance of the DashboardStatsItem class. Parameters \uf0c1 Name Type Description name System.String Name of the statistic. value System.String Value of the statistic. isHtml System.Boolean Whether or not the name or value contains raw HTML. IsHtml property \uf0c1 Summary \uf0c1 Gets a value determining whether the name and value properties include raw HTML or not. Name property \uf0c1 Summary \uf0c1 Gets the name or title of the statistic. Value property \uf0c1 Summary \uf0c1 Gets the value of the statistic. DashboardTile type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 IDashboardTile class implementation to display custom tile-like elements on the dashboard. #ctor(text,value,icon,controllerName,actionName) constructor \uf0c1 Summary \uf0c1 Instantiates a new instance of the class. Parameters \uf0c1 Name Type Description text System.String The text displayed for the dashboard tile. value System.String The value for the dashboard tile. icon System.String Fontawesome icon to display. controllerName System.String Mvc Controller name the action name should relate to when the tile is clicked. actionName System.String Mvc controller action name to execute when the navbar header is clicked. ActionName property \uf0c1 Summary \uf0c1 Gets the Mvc controller action name to execute when the navbar header is clicked. ControllerName property \uf0c1 Summary \uf0c1 Gets the Mvc controller name the action name should relate to when the tile is clicked. Icon property \uf0c1 Summary \uf0c1 Gets the Fontawesome icon to display. Text property \uf0c1 Summary \uf0c1 Gets the text displayed for the dashboard tile. Value property \uf0c1 Summary \uf0c1 Gets the value for the dashboard tile. DatabaseConnectionState type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Enumeration of possible database connection states. Connected constants \uf0c1 Summary \uf0c1 Database is in the connected state. Disconnected constants \uf0c1 Summary \uf0c1 Database is in the disconnected state. EventExecutionResult type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin.EventBus Summary \uf0c1 Indicates the result status of an observable emitted event. Executed constants \uf0c1 Summary \uf0c1 Event was executed successfully. UnhandledException constants \uf0c1 Summary \uf0c1 Unhandled exception occurred while emitting the event. GeofenceTypeAttribute type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Sets the expected for custom instances. #ctor(type) constructor \uf0c1 Summary \uf0c1 Instantiates a new instance of the GeofenceTypeAttribute attribute class. Parameters \uf0c1 Name Type Description type ChuckDeviceController.Data.Common.GeofenceType Expected geofence type required by the custom . Type property \uf0c1 Summary \uf0c1 Gets the specified geofence type expected. IAuthorizeHost type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 User identity authorization host handler. RegisterRole(name,displayIndex) method \uf0c1 Summary \uf0c1 Registers a custom user role with the host application. Returns \uf0c1 Returns a value determining whether the role was registered or not. Parameters \uf0c1 Name Type Description name System.String The name of the role to register. displayIndex System.Int32 Display index value when listing roles. IConfigurationHost type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 This interface contract can be used by all plugin modules to load setting and configuration data from files. The default implementation which is loaded if no other plugin registers an instance uses appsettings.json to store configuration data to be used by Plugins. An instance of this interface is available via the DI container, any custom implementations must be configured to be used in the DI contaner when being initialized. Remarks \uf0c1 This class can be customized by the host application, if no implementation is provided then a default implementation is provided. GetConfiguration(jsonFileName,sectionName) method \uf0c1 Summary \uf0c1 Retrieves a configuration instance. Returns \uf0c1 Configuration file instance initialized with the required settings. Parameters \uf0c1 Name Type Description jsonFileName System.String Name of the JSON file name to be used. If a JSON cofiguration file is not provided, the default 'appsettings.json' will be loaded from the calling plugin's root folder. sectionName System.String The name of the configuration section that might be required. GetValue``1(name,defaultValue,sectionName) method \uf0c1 Summary \uf0c1 Retrieves a value from a JSON configuration file. Returns \uf0c1 Returns the value related to the named configuration property. Parameters \uf0c1 Name Type Description name System.String Name of the property to retrieve the value for. defaultValue ``0 Default value to return. sectionName System.String The name of the configuration section that might be required. Generic Types \uf0c1 Name Description T The class related to the settings being requested. ICustomObserver`1 type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin.EventBus Summary \uf0c1 Typed observer implementation. Generic Types \uf0c1 Name Description T The event type the observer should expect. Unsubscribe() method \uf0c1 Summary \uf0c1 Unsubscribes from the inherited type indicated. Parameters \uf0c1 This method has no parameters. IDashboardStatsItem type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Dashboard statistics item interface contract for displaying information on the front page. IsHtml property \uf0c1 Summary \uf0c1 Gets or sets a value determining whether the name and value properties include raw HTML or not. Name property \uf0c1 Summary \uf0c1 Gets or sets the name or title of the statistic. Value property \uf0c1 Summary \uf0c1 Gets or sets the value of the statistic. IDashboardTile type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Dashboard tile interface contract to display custom tile-like elements on the dashboard. ActionName property \uf0c1 Summary \uf0c1 Gets or sets the Mvc controller action name to execute when the navbar header is clicked. ControllerName property \uf0c1 Summary \uf0c1 Gets or sets the Mvc controller name the action name should relate to when the tile is clicked. Icon property \uf0c1 Summary \uf0c1 Gets or sets the Fontawesome icon to display. Text property \uf0c1 Summary \uf0c1 Gets or sets the text displayed for the dashboard tile. Value property \uf0c1 Summary \uf0c1 Gets or sets the value for the dashboard tile. IDatabaseEvents type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Provides delegates of database related events from the host application. OnEntityAdded``1(entity) method \uf0c1 Summary \uf0c1 Called when an entity has been added to the database by the host application. Parameters \uf0c1 Name Type Description entity ``0 The entity that was added. Generic Types \uf0c1 Name Description T Data entity type that was added. OnEntityDeleted``1(entity) method \uf0c1 Summary \uf0c1 Called when an entity has been deleted in the database by the host application. Parameters \uf0c1 Name Type Description entity ``0 The entity that was deleted. Generic Types \uf0c1 Name Description T Data entity type that was deleted. OnEntityModified``1(oldEntity,newEntity) method \uf0c1 Summary \uf0c1 Called when an entity has been modified in the database by the host application. Parameters \uf0c1 Name Type Description oldEntity ``0 The entity's previous version. newEntity ``0 The entity that was modified. Generic Types \uf0c1 Name Description T Data entity type that was modified. OnStateChanged(state) method \uf0c1 Summary \uf0c1 Called when the state of the database has changed. Parameters \uf0c1 Name Type Description state ChuckDeviceController.Plugin.DatabaseConnectionState Current state of the database connection. IDatabaseHost type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Plugin host handler contract used to interact with the database entities. FindAllAsync``1() method \uf0c1 Summary \uf0c1 Gets a list of database entities. Returns \uf0c1 Returns the list of database entities. Parameters \uf0c1 This method has no parameters. Generic Types \uf0c1 Name Description TEntity Database entity contract type. FindAsync``2(id) method \uf0c1 Summary \uf0c1 Gets a database entity by primary key. Returns \uf0c1 Returns the database entity. Parameters \uf0c1 Name Type Description id ``1 Primary key of the database entity. Generic Types \uf0c1 Name Description TEntity Database entity contract type. TKey Database entity primary key type. FindAsync``2(predicate,order,sortDirection,limit) method \uf0c1 Summary \uf0c1 Gets a list of database entities matching the specified criteria. Returns \uf0c1 Returns the list of database entities. Parameters \uf0c1 Name Type Description predicate System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}} Predicate used to determine if a database entity matches. order System.Linq.Expressions.Expression{System.Func{``0,``1}} Sort order expression. (Optional) sortDirection ChuckDeviceController.Data.Common.SortOrderDirection Sort ordering direction. limit System.Int32 Limit the returned number of results. Generic Types \uf0c1 Name Description TKey Entity property type when sorting. TEntity Database entity contract type. IEvent type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin.EventBus Summary \uf0c1 Interface contract for event bus events. Payload property \uf0c1 Summary \uf0c1 Gets or sets the payload data included in the event. IEventAggregatorHost type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin.EventBus Summary \uf0c1 Publish(message) method \uf0c1 Summary \uf0c1 Parameters \uf0c1 Name Type Description message ChuckDeviceController.Plugin.EventBus.IEvent Subscribe(observer) method \uf0c1 Summary \uf0c1 Returns \uf0c1 Parameters \uf0c1 Name Type Description observer ChuckDeviceController.Plugin.EventBus.ICustomObserver{ChuckDeviceController.Plugin.EventBus.IEvent} Subscribe``1(observer) method \uf0c1 Summary \uf0c1 Returns \uf0c1 Parameters \uf0c1 Name Type Description observer ChuckDeviceController.Plugin.EventBus.ICustomObserver{``0} Generic Types \uf0c1 Name Description T IFileStorageHost type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Interface contract used for reading data from as well as persisting data to storage. The type of storage used will depend on the implementation. IGeofenceServiceHost type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Geofence service interface contract used to create new geofences, check if coordinate is within a polygon, as well as converting geofence text to actual geometry models. CreateGeofenceAsync(options) method \uf0c1 Summary \uf0c1 Create a new or update an existing geofence. Parameters \uf0c1 Name Type Description options ChuckDeviceController.Data.Abstractions.IGeofence Geofence options used to create or update. GetCoordinates(geofence) method \uf0c1 Summary \uf0c1 Gets the geofence location plots as a list of coordinates. Returns \uf0c1 Returns a list of coordinates. Parameters \uf0c1 Name Type Description geofence ChuckDeviceController.Data.Abstractions.IGeofence Geofence to get coordinates from. GetGeofenceAsync(name) method \uf0c1 Summary \uf0c1 Retrieves a geofence from the database by name. Returns \uf0c1 Returns a geofence interface contract. Parameters \uf0c1 Name Type Description name System.String Name of geofence to retrieve. GetMultiPolygons(geofence) method \uf0c1 Summary \uf0c1 Gets the geofence boundaries in multipolygon format as well as a two-dimensional list of coordinates. Returns \uf0c1 Returns a tuple with a list of MultiPolygons and a two-dimensional list of coordinates. Parameters \uf0c1 Name Type Description geofence ChuckDeviceController.Data.Abstractions.IGeofence Geofence to get coordinates from. IsPointInMultiPolygon(coord,multiPolygon) method \uf0c1 Summary \uf0c1 Returns \uf0c1 Parameters \uf0c1 Name Type Description coord ChuckDeviceController.Geometry.Models.Abstractions.ICoordinate multiPolygon ChuckDeviceController.Geometry.Models.Abstractions.IMultiPolygon IsPointInMultiPolygons(coord,multiPolygons) method \uf0c1 Summary \uf0c1 Returns \uf0c1 Parameters \uf0c1 Name Type Description coord ChuckDeviceController.Geometry.Models.Abstractions.ICoordinate multiPolygons System.Collections.Generic.IEnumerable{ChuckDeviceController.Geometry.Models.Abstractions.IMultiPolygon} IsPointInPolygon(coord,coordinates) method \uf0c1 Summary \uf0c1 Returns \uf0c1 Parameters \uf0c1 Name Type Description coord ChuckDeviceController.Geometry.Models.Abstractions.ICoordinate coordinates System.Collections.Generic.IEnumerable{ChuckDeviceController.Geometry.Models.Abstractions.ICoordinate} IInstanceServiceHost type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Instance service interface contract used to create new instances. CreateInstanceAsync(options) method \uf0c1 Summary \uf0c1 Creates a new instance in the database. Parameters \uf0c1 Name Type Description options ChuckDeviceController.Data.Abstractions.IInstance Options used to create the new instance. IJobControllerServiceEvents type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Job controller service related events that have occurred in the host application. IJobControllerServiceHost type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Plugin host handler contract used to interact with and manage the job controller service. CustomInstanceTypes property \uf0c1 Summary \uf0c1 Gets a list of all registered custom job controller instance types. Devices property \uf0c1 Summary \uf0c1 Gets a dictionary of active and configured devices. Instances property \uf0c1 Summary \uf0c1 Gets a dictionary of all loaded job controller instances. AssignDeviceToJobControllerAsync(device,instanceName) method \uf0c1 Summary \uf0c1 Assigns the specified device to a specific job controller instance by name. Parameters \uf0c1 Name Type Description device ChuckDeviceController.Data.Abstractions.IDevice Device entity. instanceName System.String Job controller instance name. RegisterJobControllerAsync``1(customInstanceType) method \uf0c1 Summary \uf0c1 Returns \uf0c1 Parameters \uf0c1 Name Type Description customInstanceType System.String Generic Types \uf0c1 Name Description T ILoadData type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Interface contract used by to load data from the file system. Load``1(folderName,fileName) method \uf0c1 Summary \uf0c1 Loads file data of type T from the plugin's folder. Returns \uf0c1 Type of data to be loaded or default type if exception occurs. Parameters \uf0c1 Name Type Description folderName System.String Sub folder within plugin's folder, optional. If not set, searches root of plugin's folder. fileName System.String File name of storage file to load, including extension otherwise generic '.dat' extension will be appended. Generic Types \uf0c1 Name Description T Type of file data to be loaded. ILocalizationHost type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Plugin host handler contract used to translating strings. CountryCode property \uf0c1 Summary \uf0c1 Gets the two letter ISO country code for the currently set localization. CurrentCulture property \uf0c1 Summary \uf0c1 Gets the current culture localization to use. GetAlignmentName(alignmentTypeId) method \uf0c1 Summary \uf0c1 Returns \uf0c1 Parameters \uf0c1 Name Type Description alignmentTypeId System.UInt32 GetCharacterCategoryName(characterCategoryId) method \uf0c1 Summary \uf0c1 Returns \uf0c1 Parameters \uf0c1 Name Type Description characterCategoryId System.UInt32 GetCostumeName(costumeId) method \uf0c1 Summary \uf0c1 Translate a Pokemon costume id to name. Returns \uf0c1 Parameters \uf0c1 Name Type Description costumeId System.UInt32 Costume ID to translate to name. GetEvolutionName(evolutionId) method \uf0c1 Summary \uf0c1 Translate a Pokemon evolution id to name. Returns \uf0c1 Parameters \uf0c1 Name Type Description evolutionId System.UInt32 Evolution ID to translate to name. GetFormName(formId,includeNormal) method \uf0c1 Summary \uf0c1 Translate a Pokemon form id to name. Returns \uf0c1 Parameters \uf0c1 Name Type Description formId System.UInt32 Form ID to translate to name. includeNormal System.Boolean Include 'Normal' form name or not. GetGruntType(invasionCharacterId) method \uf0c1 Summary \uf0c1 Returns \uf0c1 Parameters \uf0c1 Name Type Description invasionCharacterId System.UInt32 GetItem(itemId) method \uf0c1 Summary \uf0c1 Returns \uf0c1 Parameters \uf0c1 Name Type Description itemId System.UInt32 GetMoveName(moveId) method \uf0c1 Summary \uf0c1 Returns \uf0c1 Parameters \uf0c1 Name Type Description moveId System.UInt32 GetPokemonName(pokemonId) method \uf0c1 Summary \uf0c1 Translate a Pokemon id to name. Returns \uf0c1 Parameters \uf0c1 Name Type Description pokemonId System.UInt32 Pokemon ID to translate to name. GetThrowName(throwTypeId) method \uf0c1 Summary \uf0c1 Returns \uf0c1 Parameters \uf0c1 Name Type Description throwTypeId System.UInt32 GetWeather(weatherConditionId) method \uf0c1 Summary \uf0c1 Returns \uf0c1 Parameters \uf0c1 Name Type Description weatherConditionId System.UInt32 SetLocale(locale) method \uf0c1 Summary \uf0c1 Sets the country locale code to use for translations. Parameters \uf0c1 Name Type Description locale System.String Two letter ISO language name code. Translate(key) method \uf0c1 Summary \uf0c1 Returns \uf0c1 Parameters \uf0c1 Name Type Description key System.String Translate(keyWithArgs,args) method \uf0c1 Summary \uf0c1 Returns \uf0c1 Parameters \uf0c1 Name Type Description keyWithArgs System.String args System.Object[] ILoggingHost type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Plugin host handler for logging messages from plugins. LogCritical(message,args) method \uf0c1 Summary \uf0c1 Parameters \uf0c1 Name Type Description message System.String args System.Object[] LogCritical(error,message,args) method \uf0c1 Summary \uf0c1 Parameters \uf0c1 Name Type Description error System.Exception message System.String args System.Object[] LogDebug(message,args) method \uf0c1 Summary \uf0c1 Parameters \uf0c1 Name Type Description message System.String args System.Object[] LogError(message,args) method \uf0c1 Summary \uf0c1 Parameters \uf0c1 Name Type Description message System.String args System.Object[] LogError(error,message,args) method \uf0c1 Summary \uf0c1 Parameters \uf0c1 Name Type Description error System.Exception message System.String args System.Object[] LogInformation(message,args) method \uf0c1 Summary \uf0c1 Parameters \uf0c1 Name Type Description message System.String args System.Object[] LogTrace(message,args) method \uf0c1 Summary \uf0c1 Parameters \uf0c1 Name Type Description message System.String args System.Object[] LogWarning(message,args) method \uf0c1 Summary \uf0c1 Parameters \uf0c1 Name Type Description message System.String args System.Object[] IMemoryCacheHost type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 In memory cache host handler. Clear() method \uf0c1 Summary \uf0c1 Clears all cached entries. Parameters \uf0c1 This method has no parameters. GetValue``1(key) method \uf0c1 Summary \uf0c1 Retrieve a value by key from the cache. Returns \uf0c1 Returns a value from the cache, otherwise null . Parameters \uf0c1 Name Type Description key System.String Key to check. Generic Types \uf0c1 Name Description T Type of value. IsSet(key) method \uf0c1 Summary \uf0c1 Checks whether a key exists in the cache. Returns \uf0c1 Returns true if the key exists, otherwise false . Parameters \uf0c1 Name Type Description key System.String Key to check if exists. Remove(key) method \uf0c1 Summary \uf0c1 Remove a entry from the cache by key. Parameters \uf0c1 Name Type Description key System.String Key to remove from the cache. SetValue``1(key,value,expiryS) method \uf0c1 Summary \uf0c1 Caches a value by key with a set expiration time. Parameters \uf0c1 Name Type Description key System.String Key to set. value ``0 Value to cache. expiryS System.UInt16 Expiration time in seconds. Generic Types \uf0c1 Name Description T Type of value. TryGetValue``1(key,value) method \uf0c1 Summary \uf0c1 Trys to retrieve a value by key from the cache. Returns \uf0c1 Returns true if the key exists, otherwise false . Parameters \uf0c1 Name Type Description key System.String Key to check. value ``0@ Value returned from the cache. Generic Types \uf0c1 Name Description T Type of value. IMetadata type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Plugin metadata details. Author property \uf0c1 Summary \uf0c1 Gets or sets the creator/author name that wrote the Plugin. Description property \uf0c1 Summary \uf0c1 Gets or sets the description about the Plugin. Name property \uf0c1 Summary \uf0c1 Gets or sets the name of the Plugin. Version property \uf0c1 Summary \uf0c1 Gets or sets the current version of the Plugin. IPlugin type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Base Plugin interface contract all plugins are required to inherit at a minimum. IPluginBootstrapperServiceAttribute type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin.Services Summary \uf0c1 Assigns fields and properties in a plugin assembly with registered service implementations. ProxyType property \uf0c1 Summary \uf0c1 Gets or sets the bootstrap service implementation type. ServiceType property \uf0c1 Summary \uf0c1 Gets or sets the bootstrap service contract type. IPluginEvents type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Provides delegates of plugin related events from the host application. OnLoad() method \uf0c1 Summary \uf0c1 Called when the plugin has been fully loaded and initialized from the host application. Parameters \uf0c1 This method has no parameters. OnReload() method \uf0c1 Summary \uf0c1 Called when the plugin has been reloaded by the host application. Parameters \uf0c1 This method has no parameters. OnRemove() method \uf0c1 Summary \uf0c1 Called when the plugin has been removed by the host application. Parameters \uf0c1 This method has no parameters. OnStateChanged(state) method \uf0c1 Summary \uf0c1 Called when the plugin's state has been changed by the host application. Parameters \uf0c1 Name Type Description state ChuckDeviceController.Data.Common.PluginState Plugin's current state OnStop() method \uf0c1 Summary \uf0c1 Called when the plugin has been stopped by the host application. Parameters \uf0c1 This method has no parameters. IPluginServiceAttribute type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin.Services Summary \uf0c1 Contract for registering plugin service classes marked with 'PluginServiceAttribute' with the host application in order to be used with dependency injection. Lifetime property \uf0c1 Summary \uf0c1 Gets or sets the service lifetime for the plugin service. Provider property \uf0c1 Summary \uf0c1 Gets or sets who provided the service. ProxyType property \uf0c1 Summary \uf0c1 Gets or sets the service implementation type. ServiceType property \uf0c1 Summary \uf0c1 Gets or sets the Service contract type. IPublisher type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin.EventBus Summary \uf0c1 An interface contract for publishing data to the event bus aggregator service which all subscribers will receive. Publish(payload) method \uf0c1 Summary \uf0c1 Publish data to all subscriptions via event bus aggregator host. Parameters \uf0c1 Name Type Description payload System.String Payload data to publish to subscribers. IRepository`2 type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Repository contract for specific database entity types. Generic Types \uf0c1 Name Description TEntity Database entity contract type. TId Database entity primary key type. GetByIdAsync(id) method \uf0c1 Summary \uf0c1 Gets a database entity by primary key. Returns \uf0c1 Returns a database entity. Parameters \uf0c1 Name Type Description id `1 Primary key of the database entity. GetListAsync() method \uf0c1 Summary \uf0c1 Gets a list of database entities. Returns \uf0c1 Returns a list of database entities. Parameters \uf0c1 This method has no parameters. IRoutingHost type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Route generator plugin host. GenerateRoute(options) method \uf0c1 Summary \uf0c1 Generates a route using the specified route generator options. Returns \uf0c1 Returns a list of coordinates of the generated route. Parameters \uf0c1 Name Type Description options ChuckDeviceController.Plugin.RouteGeneratorOptions Routing generation options to use. ISaveData type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Interface contract used by to save data to the file system. Save``1(data,folderName,name,prettyPrint) method \uf0c1 Summary \uf0c1 Saves file data of type T to the plugin's folder. Returns \uf0c1 Returns true if successful, otherwise false . Parameters \uf0c1 Name Type Description data ``0 File data to be saved. folderName System.String Sub folder within plugin's folder, optional. If not set, uses root of plugin's folder. name System.String File name of storage file to save, including extension otherwise generic '.dat' extension will be appended. prettyPrint System.Boolean Determines whether or not to 'pretty print' the JSON file to readable format. Generic Types \uf0c1 Name Description T Type of data to be saved. ISettingsProperty type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Settings property interface contract used by plugins to create UI setting elements in the dashboard. Class property \uf0c1 Summary \uf0c1 Gets or sets the CSS class name to use. DefaultValue property \uf0c1 Summary \uf0c1 Gets or sets the default value to use for the element, if it supports it. DisplayIndex property \uf0c1 Summary \uf0c1 Gets or sets a value used for sorting each HTML element created for the properties. Group property \uf0c1 Summary \uf0c1 Gets or sets the group the settings property will be in. IsRequired property \uf0c1 Summary \uf0c1 Gets or sets a value determining whether the HTML element value is required. Name property \uf0c1 Summary \uf0c1 Gets or sets the ID and name of the element. Style property \uf0c1 Summary \uf0c1 Gets or sets the raw CSS styling to use. Text property \uf0c1 Summary \uf0c1 Gets or sets the displayed text for the property, possibly used in a label. Type property \uf0c1 Summary \uf0c1 Gets or sets the type of HTML element to create. Validate property \uf0c1 Summary \uf0c1 Gets or sets a value determining whether to validate the value of the HTML element. Value property \uf0c1 Summary \uf0c1 Gets or sets the initial value to set for the element. ISettingsPropertyEvents type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 OnSave() method \uf0c1 Summary \uf0c1 Parameters \uf0c1 This method has no parameters. ISettingsPropertyGroup type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Interface contract for grouping settings properties. DisplayIndex property \uf0c1 Summary \uf0c1 Gets or sets a value used for sorting each HTML element created for the properties. Id property \uf0c1 Summary \uf0c1 Gets or sets the unique identifier for the settings property group. Text property \uf0c1 Summary \uf0c1 Gets or sets the text to display for the settings property group. ISettingsTab type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Settings tab interface contract for adding UI settings from plugins to separate tabs. Anchor property \uf0c1 Summary \uf0c1 Gets or sets the html anchor tag name of the tab. Note: No hash symbol needed. Class property \uf0c1 Summary \uf0c1 Gets or sets the CSS class name to use. DisplayIndex property \uf0c1 Summary \uf0c1 Gets or sets the display index of the tab in the tab list. Id property \uf0c1 Summary \uf0c1 Gets or sets the unique ID of the tab. Style property \uf0c1 Summary \uf0c1 Gets or sets the raw CSS styling to use. Text property \uf0c1 Summary \uf0c1 Gets or sets the display text of the tab. ISidebarItem type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Side navigation bar plugin contract. ActionName property \uf0c1 Summary \uf0c1 Gets or sets the controller action name to execute when the sidebar item is clicked. ControllerName property \uf0c1 Summary \uf0c1 Gets or sets the controller name the action name should relate to. DisplayIndex property \uf0c1 Summary \uf0c1 Gets or sets the numeric display index order of the sidebar item in the list of sidebar items. Icon property \uf0c1 Summary \uf0c1 Gets or sets the FontAwesome v6 icon key to use for the sidebar item. https://fontawesome.com/icons IsDisabled property \uf0c1 Summary \uf0c1 Gets or sets a value determining whether the sidebar item is disabled or not. IsSeparator property \uf0c1 Summary \uf0c1 Gets or sets a value determining whether to insert a separator instead of a dropdown item. Text property \uf0c1 Summary \uf0c1 Gets or sets the text to display for this sidebar item. IUIconsHost type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 UIcons standard host handler to retrieve icon url endpoints for plugins. GetPokemonIcon(pokemonId,formId,evolutionId,gender,costumeId,shiny) method \uf0c1 Summary \uf0c1 Gets an icon image url based on the provided Pokemon details. Returns \uf0c1 Returns a url of the Pokemon image. Parameters \uf0c1 Name Type Description pokemonId System.UInt32 Pokemon pokedex id. formId System.UInt32 Pokemon form id. evolutionId System.UInt32 Pokemon mega evolution id. gender System.UInt32 Pokemon gender id. costumeId System.UInt32 Pokemon costume id. shiny System.Boolean Whether the Pokemon is shiny or not. IUiEvents type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 UI related events that have occurred in the host application. IUiHost type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Plugin host handler for executing user interface operations. DashboardStatsItems property \uf0c1 Summary \uf0c1 Gets a list of dashboard statistics registered by plugins. DashboardTiles property \uf0c1 Summary \uf0c1 Gets a list of dashboard tiles registered by plugins. SettingsProperties property \uf0c1 Summary \uf0c1 Gets a dictionary of settings properties for tabs registered by plugins. SettingsTabs property \uf0c1 Summary \uf0c1 Gets a list of settings tabs registered by plugins. SidebarItems property \uf0c1 Summary \uf0c1 Gets a list of sidebar items registered by plugins. AddDashboardStatisticAsync(stat) method \uf0c1 Summary \uf0c1 Adds a custom to the dashboard front page. Parameters \uf0c1 Name Type Description stat ChuckDeviceController.Plugin.IDashboardStatsItem Dashboard statistics item to add. AddDashboardStatisticsAsync(stats) method \uf0c1 Summary \uf0c1 Adds a list of items to the dashboard front page. Parameters \uf0c1 Name Type Description stats System.Collections.Generic.IEnumerable{ChuckDeviceController.Plugin.IDashboardStatsItem} List of dashboard statistic items to add. AddDashboardTileAsync(tile) method \uf0c1 Summary \uf0c1 Adds a statistic tile to the front page dashboard. Parameters \uf0c1 Name Type Description tile ChuckDeviceController.Plugin.IDashboardTile Dashboard statistics tile to add. AddDashboardTilesAsync(tiles) method \uf0c1 Summary \uf0c1 Adds a list of statistic tiles to the front page dashboard. Parameters \uf0c1 Name Type Description tiles System.Collections.Generic.IEnumerable{ChuckDeviceController.Plugin.IDashboardTile} List of dashboard statistic tiles to add. AddSettingsPropertiesAsync(tabId,properties) method \uf0c1 Summary \uf0c1 Adds a list of settings properties to an existing settings tab. Parameters \uf0c1 Name Type Description tabId System.String Unique identifier of the destination tab. properties System.Collections.Generic.IEnumerable{ChuckDeviceController.Plugin.SettingsProperty} List of settings properties to add to the destination. AddSettingsPropertyAsync(tabId,property) method \uf0c1 Summary \uf0c1 Adds a settings property to an existing settings tab. Parameters \uf0c1 Name Type Description tabId System.String Unique identifier of the destination tab. property ChuckDeviceController.Plugin.SettingsProperty Settings property to add to the destination tab. AddSettingsTabAsync(tab) method \uf0c1 Summary \uf0c1 Adds a new settings tab. Parameters \uf0c1 Name Type Description tab ChuckDeviceController.Plugin.SettingsTab Settings tab to add. AddSidebarItemAsync(header) method \uf0c1 Summary \uf0c1 Adds a item to the main application's Mvc sidebar. Parameters \uf0c1 Name Type Description header ChuckDeviceController.Plugin.SidebarItem Sidebar item to add. AddSidebarItemsAsync(headers) method \uf0c1 Summary \uf0c1 Adds a list of items to the main application's Mvc sidebar. Parameters \uf0c1 Name Type Description headers System.Collections.Generic.IEnumerable{ChuckDeviceController.Plugin.SidebarItem} List of sidebar items to add. GetSettingsPropertyValue``1(name) method \uf0c1 Summary \uf0c1 Gets the value of a settings property by name. Parameters \uf0c1 Name Type Description name System.String Name of the property to get the value of. Generic Types \uf0c1 Name Description T Expected return type of the settings property. UpdateDashboardStatisticAsync(stat) method \uf0c1 Summary \uf0c1 Update an existing item on the dashboard front page. Parameters \uf0c1 Name Type Description stat ChuckDeviceController.Plugin.IDashboardStatsItem Dashboard statistics item to update. UpdateDashboardStatisticsAsync(stats) method \uf0c1 Summary \uf0c1 Update a list of existing items on the dashboard front page. Parameters \uf0c1 Name Type Description stats System.Collections.Generic.IEnumerable{ChuckDeviceController.Plugin.IDashboardStatsItem} List of dashboard statistic items to update. IWebPlugin type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Interface contract allowing Mvc services registration and configuration Configure(appBuilder) method \uf0c1 Summary \uf0c1 Configures the application to set up middlewares, map routing rules, etc. Parameters \uf0c1 Name Type Description appBuilder Microsoft.AspNetCore.Builder.WebApplication Provides the mechanisms to configure an application's request pipeline. ConfigureMvcBuilder(mvcBuilder) method \uf0c1 Summary \uf0c1 Provides an opportunity for plugins to configure Mvc Builder. Parameters \uf0c1 Name Type Description mvcBuilder Microsoft.Extensions.DependencyInjection.IMvcBuilder IMvcBuilder instance that can be configured. ConfigureServices(services) method \uf0c1 Summary \uf0c1 Register services into the IServiceCollection to use with Dependency Injection. Parameters \uf0c1 Name Type Description services Microsoft.Extensions.DependencyInjection.IServiceCollection Specifies the contract for a collection of service descriptors. PluginApiKeyAttribute type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Defines the API key used by a plugin. #ctor(apiKey) constructor \uf0c1 Summary \uf0c1 Instantiates a new instance of the PluginApiKeyAttribute attribute class. Parameters \uf0c1 Name Type Description apiKey System.String ApiKey property \uf0c1 Summary \uf0c1 Gets the API key string used by the plugin. PluginBootstrapperServiceAttribute type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin.Services Summary \uf0c1 Assigns fields and properties in a plugin assembly with registered service implementations. #ctor(serviceType) constructor \uf0c1 Summary \uf0c1 Parameters \uf0c1 Name Type Description serviceType System.Type #ctor(serviceType,proxyType) constructor \uf0c1 Summary \uf0c1 Parameters \uf0c1 Name Type Description serviceType System.Type proxyType System.Type ProxyType property \uf0c1 Summary \uf0c1 Gets or sets the bootstrap service implementation type. ServiceType property \uf0c1 Summary \uf0c1 Gets or sets the bootstrap service contract type. PluginEvent type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin.EventBus.Events Summary \uf0c1 Plugin event for event bus service. #ctor(payload) constructor \uf0c1 Summary \uf0c1 Parameters \uf0c1 Name Type Description payload System.String Plugin event payload to send. Payload property \uf0c1 Summary \uf0c1 Gets or sets the payload data included in the event. PluginObserver type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin.EventBus.Observer Summary \uf0c1 OnCompleted() method \uf0c1 Summary \uf0c1 Parameters \uf0c1 This method has no parameters. OnError(error) method \uf0c1 Summary \uf0c1 Parameters \uf0c1 Name Type Description error System.Exception OnNext(value) method \uf0c1 Summary \uf0c1 Parameters \uf0c1 Name Type Description value ChuckDeviceController.Plugin.EventBus.IEvent Unsubscribe() method \uf0c1 Summary \uf0c1 Parameters \uf0c1 This method has no parameters. PluginServiceAttribute type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin.Services Summary \uf0c1 Registers plugin service classes that are marked with the 'PluginService' attribute with the host application in order to be used with dependency injection. #ctor() constructor \uf0c1 Summary \uf0c1 Parameters \uf0c1 This constructor has no parameters. #ctor(serviceType,proxyType,provider,lifetime) constructor \uf0c1 Summary \uf0c1 Parameters \uf0c1 Name Type Description serviceType System.Type proxyType System.Type provider ChuckDeviceController.Plugin.Services.PluginServiceProvider lifetime Microsoft.Extensions.DependencyInjection.ServiceLifetime Lifetime property \uf0c1 Summary \uf0c1 Gets or sets the service lifetime for the plugin service. Provider property \uf0c1 Summary \uf0c1 Gets or sets who provided the service. ProxyType property \uf0c1 Summary \uf0c1 Gets or sets the service implementation type. ServiceType property \uf0c1 Summary \uf0c1 Gets or sets the service contract type. PluginServiceProvider type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin.Services Summary \uf0c1 Determines who provided the plugin service to register with dependency injection. Host constants \uf0c1 Summary \uf0c1 Service was provided by the host application. Plugin constants \uf0c1 Summary \uf0c1 Service was provided by the plugin. RouteGenerationType type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Routing generation type Bootstrap constants \uf0c1 Summary \uf0c1 Generates a bootstrap route based on the circle size. Optimized constants \uf0c1 Summary \uf0c1 Generates an optimized route Randomized constants \uf0c1 Summary \uf0c1 Generates a randomized route RouteGeneratorOptions type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Routing generation options MaximumPoints property \uf0c1 Summary \uf0c1 Gets or sets a value to limit the amount of coordinate points to return when generating the route. MultiPolygons property \uf0c1 Summary \uf0c1 Gets or sets the list of (geofences) used to generate the route in. RadiusM property \uf0c1 Summary \uf0c1 Gets or sets a value used to determine the radius between each coordinate when generating the route. RouteType property \uf0c1 Summary \uf0c1 Gets or sets the route generation type to use. SettingsProperty type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 ISettingsProperty class implementation used by plugins to create UI setting elements in the dashboard. #ctor() constructor \uf0c1 Summary \uf0c1 Instantiates a new instance of the SettingsProperty class. Parameters \uf0c1 This constructor has no parameters. #ctor(text,name,type,value,defaultValue,displayIndex,isRequired,validate,className,style,group) constructor \uf0c1 Summary \uf0c1 Instantiates a new instance of the SettingsProperty class. Parameters \uf0c1 Name Type Description text System.String Text displayed for the property, possibly used in a label. name System.String The ID and name of the element. type ChuckDeviceController.Plugin.SettingsPropertyType The type of HTML element to create. value System.Object Sets the initial value of the HTML element. defaultValue System.Object Default value of the HTML element, if it supports it. displayIndex System.UInt32 Defines the sorting of the HTML element created for the properties. isRequired System.Boolean Determining whether or not the HTML element value is required. validate System.Boolean Determines whether or not to validate the value of the HTML element. className System.String CSS class name to use. style System.String Raw CSS styling to use. group ChuckDeviceController.Plugin.SettingsPropertyGroup Element group the settings property will be placed in. Class property \uf0c1 Summary \uf0c1 Gets or sets the CSS class name to use. DefaultValue property \uf0c1 Summary \uf0c1 Gets or sets the default value to use for the element, if it supports it. DisplayIndex property \uf0c1 Summary \uf0c1 Gets or sets a value used for sorting each HTML element created for the properties. Group property \uf0c1 Summary \uf0c1 Gets or sets the group the settings property will be in. IsRequired property \uf0c1 Summary \uf0c1 Gets or sets a value determining whether the HTML element value is required. Name property \uf0c1 Summary \uf0c1 Gets or sets the ID and name of the element. Style property \uf0c1 Summary \uf0c1 Gets or sets the raw CSS styling to use. Text property \uf0c1 Summary \uf0c1 Gets or sets the displayed text for the property, possibly used in a label. Type property \uf0c1 Summary \uf0c1 Gets or sets the type of HTML element to create. Validate property \uf0c1 Summary \uf0c1 Gets or sets a value determining whether to validate the value of the HTML element. Value property \uf0c1 Summary \uf0c1 Gets or sets the initial value to set for the element. SettingsPropertyGroup type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 ISettingsPropertyGroup class implementation for grouping . #ctor() constructor \uf0c1 Summary \uf0c1 Instantiates a new instance of the SettingsPropertyGroup class. Parameters \uf0c1 This constructor has no parameters. #ctor(id,text,displayIndex) constructor \uf0c1 Summary \uf0c1 Instantiates a new instance of the SettingsPropertyGroup class. Parameters \uf0c1 Name Type Description id System.String Unique identifier for the settings property group. text System.String Text displayed for the settings property group. displayIndex System.UInt32 Sorting index used with each HTML element created for the grouped properties. DisplayIndex property \uf0c1 Summary \uf0c1 Gets or sets a value used for sorting each HTML element created for the properties. Id property \uf0c1 Summary \uf0c1 Gets or sets the unique identifier for the settings property group. Text property \uf0c1 Summary \uf0c1 Gets or sets the text to display for the settings property group. Equals(obj) method \uf0c1 Summary \uf0c1 Returns \uf0c1 Parameters \uf0c1 Name Type Description obj System.Object Equals(other) method \uf0c1 Summary \uf0c1 Returns \uf0c1 Parameters \uf0c1 Name Type Description other ChuckDeviceController.Plugin.SettingsPropertyGroup GetHashCode() method \uf0c1 Summary \uf0c1 Returns \uf0c1 Parameters \uf0c1 This method has no parameters. SettingsPropertyType type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Defines the type of HTML element to create for the settings property. CheckBox constants \uf0c1 Summary \uf0c1 Settings property type is a checkbox field. Number constants \uf0c1 Summary \uf0c1 Settings property type is a numeric selector. Select constants \uf0c1 Summary \uf0c1 Settings property type is a select item list element. Text constants \uf0c1 Summary \uf0c1 Settings property type is a text field. TextArea constants \uf0c1 Summary \uf0c1 Settings property type is a text area. SettingsTab type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 ISettingsTab class implementation for adding UI settings from plugins to separate tabs. #ctor() constructor \uf0c1 Summary \uf0c1 Instantiates a new instance of the SettingsTab class. Parameters \uf0c1 This constructor has no parameters. #ctor(id,text,anchor,displayIndex,className,style) constructor \uf0c1 Summary \uf0c1 Instantiates a new instance of the SettingsTab class. Parameters \uf0c1 Name Type Description id System.String Unique identifier of the tab. text System.String Text displayed for the tab header. anchor System.String The HTML anchor tag name of the tab. displayIndex System.UInt32 Display index of the tab in the tab list. className System.String CSS class name to use. style System.String Raw CSS styling to use. Anchor property \uf0c1 Summary \uf0c1 Gets or sets the html anchor tag name of the tab. Note: No hash symbol needed. Class property \uf0c1 Summary \uf0c1 Gets or sets the CSS class name to use. DisplayIndex property \uf0c1 Summary \uf0c1 Gets or sets the display index of the tab in the tab list. Id property \uf0c1 Summary \uf0c1 Gets or sets the unique identifier of the tab. Style property \uf0c1 Summary \uf0c1 Gets or sets the raw CSS styling to use. Text property \uf0c1 Summary \uf0c1 Gets or sets the display text of the tab. SidebarItem type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Navigation bar header plugin contract implementation. #ctor() constructor \uf0c1 Summary \uf0c1 Instantiates a new navbar header instance using default property values. Parameters \uf0c1 This constructor has no parameters. #ctor(text,controllerName,actionName,icon,displayIndex,isDropdown,dropdownItems,isDisabled,isSeparator) constructor \uf0c1 Summary \uf0c1 Instantiates a new navbar header instance using the specified property values. Parameters \uf0c1 Name Type Description text System.String controllerName System.String actionName System.String icon System.String displayIndex System.UInt32 isDropdown System.Boolean dropdownItems System.Collections.Generic.IEnumerable{ChuckDeviceController.Plugin.SidebarItem} isDisabled System.Boolean isSeparator System.Boolean ActionName property \uf0c1 Summary \uf0c1 Gets or sets the controller action name to execute when the navbar header is clicked. ControllerName property \uf0c1 Summary \uf0c1 Gets or sets the controller name the action name should relate to. DisplayIndex property \uf0c1 Summary \uf0c1 Gets or sets the numeric display index order of the navbar header in the list of navbar headers. DropdownItems property \uf0c1 Summary \uf0c1 Gets or sets a list of navbar header dropdown items. Icon property \uf0c1 Summary \uf0c1 Gets or sets the FontAwesome v6 icon key to use for the navbar header. https://fontawesome.com/icons IsDisabled property \uf0c1 Summary \uf0c1 Gets or sets a value determining whether the navbar header is disabled or not. IsDropdown property \uf0c1 Summary \uf0c1 Gets or sets a value determining whether the navbar header should be treated as a dropdown. IsSeparator property \uf0c1 Summary \uf0c1 Gets or sets a value determining whether to insert a separator instead of a dropdown item. Text property \uf0c1 Summary \uf0c1 Gets or sets the text to display for this navbar header. StaticFilesLocation type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Determines the location of any static files and folders. i.e. 'wwwroot' External constants \uf0c1 Summary \uf0c1 Static files are located externally on the file system. None constants \uf0c1 Summary \uf0c1 No static files or folders from the plugin. Resources constants \uf0c1 Summary \uf0c1 Static files are embedded in a resource file within the plugin. StaticFilesLocationAttribute type \uf0c1 Namespace \uf0c1 ChuckDeviceController.Plugin Summary \uf0c1 Defines where the static files or folders (i.e. `wwwroot` and `Views`) will be located, relevant to the plugin's path. #ctor(views,webRoot) constructor \uf0c1 Summary \uf0c1 Instantiates a new instance of the StaticFilesLocationAttribute attribute class. Parameters \uf0c1 Name Type Description views ChuckDeviceController.Plugin.StaticFilesLocation Determines where the Mvc `Views` folder is located. webRoot ChuckDeviceController.Plugin.StaticFilesLocation Determines where the `wwwroot` folder is located. Views property \uf0c1 Summary \uf0c1 Gets an enum value defining where the plugin's Mvc Views folder is located. i.e. `Views` folder. WebRoot property \uf0c1 Summary \uf0c1 Gets an enum value determining where any web resource files are located. i.e. `wwwroot` web root folder.","title":"API Documentation"},{"location":"plugin-system/api/#plugin-api-reference","text":"","title":"Plugin API Reference"},{"location":"plugin-system/api/#contents","text":"DashboardStatsItem #ctor(name,value,isHtml) IsHtml Name Value DashboardTile #ctor(text,value,icon,controllerName,actionName) ActionName ControllerName Icon Text Value DatabaseConnectionState Connected Disconnected EventExecutionResult Executed UnhandledException GeofenceTypeAttribute #ctor(type) Type IAuthorizeHost RegisterRole(name,displayIndex) IConfigurationHost GetConfiguration(jsonFileName,sectionName) GetValue``1(name,defaultValue,sectionName) ICustomObserver`1 Unsubscribe() IDashboardStatsItem IsHtml Name Value IDashboardTile ActionName ControllerName Icon Text Value IDatabaseEvents OnEntityAdded``1(entity) OnEntityDeleted``1(entity) OnEntityModified``1(oldEntity,newEntity) OnStateChanged(state) IDatabaseHost FindAllAsync``1() FindAsync``2(id) FindAsync``2(predicate,order,sortDirection,limit) IEvent Payload IEventAggregatorHost Publish(message) Subscribe(observer) Subscribe``1(observer) IFileStorageHost IGeofenceServiceHost CreateGeofenceAsync(options) GetCoordinates(geofence) GetGeofenceAsync(name) GetMultiPolygons(geofence) IsPointInMultiPolygon(coord,multiPolygon) IsPointInMultiPolygons(coord,multiPolygons) IsPointInPolygon(coord,coordinates) IInstanceServiceHost CreateInstanceAsync(options) IJobControllerServiceEvents IJobControllerServiceHost CustomInstanceTypes Devices Instances AssignDeviceToJobControllerAsync(device,instanceName) RegisterJobControllerAsync``1(customInstanceType) ILoadData Load``1(folderName,fileName) ILocalizationHost CountryCode CurrentCulture GetAlignmentName(alignmentTypeId) GetCharacterCategoryName(characterCategoryId) GetCostumeName(costumeId) GetEvolutionName(evolutionId) GetFormName(formId,includeNormal) GetGruntType(invasionCharacterId) GetItem(itemId) GetMoveName(moveId) GetPokemonName(pokemonId) GetThrowName(throwTypeId) GetWeather(weatherConditionId) SetLocale(locale) Translate(key) Translate(keyWithArgs,args) ILoggingHost LogCritical(message,args) LogCritical(error,message,args) LogDebug(message,args) LogError(message,args) LogError(error,message,args) LogInformation(message,args) LogTrace(message,args) LogWarning(message,args) IMemoryCacheHost Clear() GetValue``1(key) IsSet(key) Remove(key) SetValue``1(key,value,expiryS) TryGetValue``1(key,value) IMetadata Author Description Name Version IPlugin IPluginBootstrapperServiceAttribute ProxyType ServiceType IPluginEvents OnLoad() OnReload() OnRemove() OnStateChanged(state) OnStop() IPluginServiceAttribute Lifetime Provider ProxyType ServiceType IPublisher Publish(payload) IRepository`2 GetByIdAsync(id) GetListAsync() IRoutingHost GenerateRoute(options) ISaveData Save``1(data,folderName,name,prettyPrint) ISettingsProperty Class DefaultValue DisplayIndex Group IsRequired Name Style Text Type Validate Value ISettingsPropertyEvents OnSave() ISettingsPropertyGroup DisplayIndex Id Text ISettingsTab Anchor Class DisplayIndex Id Style Text ISidebarItem ActionName ControllerName DisplayIndex Icon IsDisabled IsSeparator Text IUIconsHost GetPokemonIcon(pokemonId,formId,evolutionId,gender,costumeId,shiny) IUiEvents IUiHost DashboardStatsItems DashboardTiles SettingsProperties SettingsTabs SidebarItems AddDashboardStatisticAsync(stat) AddDashboardStatisticsAsync(stats) AddDashboardTileAsync(tile) AddDashboardTilesAsync(tiles) AddSettingsPropertiesAsync(tabId,properties) AddSettingsPropertyAsync(tabId,property) AddSettingsTabAsync(tab) AddSidebarItemAsync(header) AddSidebarItemsAsync(headers) GetSettingsPropertyValue``1(name) UpdateDashboardStatisticAsync(stat) UpdateDashboardStatisticsAsync(stats) IWebPlugin Configure(appBuilder) ConfigureMvcBuilder(mvcBuilder) ConfigureServices(services) PluginApiKeyAttribute #ctor(apiKey) ApiKey PluginBootstrapperServiceAttribute #ctor(serviceType) #ctor(serviceType,proxyType) ProxyType ServiceType PluginEvent #ctor(payload) Payload PluginObserver OnCompleted() OnError(error) OnNext(value) Unsubscribe() PluginServiceAttribute #ctor() #ctor(serviceType,proxyType,provider,lifetime) Lifetime Provider ProxyType ServiceType PluginServiceProvider Host Plugin RouteGenerationType Bootstrap Optimized Randomized RouteGeneratorOptions MaximumPoints MultiPolygons RadiusM RouteType SettingsProperty #ctor() #ctor(text,name,type,value,defaultValue,displayIndex,isRequired,validate,className,style,group) Class DefaultValue DisplayIndex Group IsRequired Name Style Text Type Validate Value SettingsPropertyGroup #ctor() #ctor(id,text,displayIndex) DisplayIndex Id Text Equals(obj) Equals(other) GetHashCode() SettingsPropertyType CheckBox Number Select Text TextArea SettingsTab #ctor() #ctor(id,text,anchor,displayIndex,className,style) Anchor Class DisplayIndex Id Style Text SidebarItem #ctor() #ctor(text,controllerName,actionName,icon,displayIndex,isDropdown,dropdownItems,isDisabled,isSeparator) ActionName ControllerName DisplayIndex DropdownItems Icon IsDisabled IsDropdown IsSeparator Text StaticFilesLocation External None Resources StaticFilesLocationAttribute #ctor(views,webRoot) Views WebRoot","title":"Contents"},{"location":"plugin-system/api/#dashboardstatsitem-type","text":"","title":"DashboardStatsItem type"},{"location":"plugin-system/api/#namespace","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary","text":"IDashboardStatsItem class implementation for displaying information on the front page.","title":"Summary"},{"location":"plugin-system/api/#ctornamevalueishtml-constructor","text":"","title":"#ctor(name,value,isHtml) constructor"},{"location":"plugin-system/api/#summary_1","text":"Instantiates a new instance of the DashboardStatsItem class.","title":"Summary"},{"location":"plugin-system/api/#parameters","text":"Name Type Description name System.String Name of the statistic. value System.String Value of the statistic. isHtml System.Boolean Whether or not the name or value contains raw HTML.","title":"Parameters"},{"location":"plugin-system/api/#ishtml-property","text":"","title":"IsHtml property"},{"location":"plugin-system/api/#summary_2","text":"Gets a value determining whether the name and value properties include raw HTML or not.","title":"Summary"},{"location":"plugin-system/api/#name-property","text":"","title":"Name property"},{"location":"plugin-system/api/#summary_3","text":"Gets the name or title of the statistic.","title":"Summary"},{"location":"plugin-system/api/#value-property","text":"","title":"Value property"},{"location":"plugin-system/api/#summary_4","text":"Gets the value of the statistic.","title":"Summary"},{"location":"plugin-system/api/#dashboardtile-type","text":"","title":"DashboardTile type"},{"location":"plugin-system/api/#namespace_1","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_5","text":"IDashboardTile class implementation to display custom tile-like elements on the dashboard.","title":"Summary"},{"location":"plugin-system/api/#ctortextvalueiconcontrollernameactionname-constructor","text":"","title":"#ctor(text,value,icon,controllerName,actionName) constructor"},{"location":"plugin-system/api/#summary_6","text":"Instantiates a new instance of the class.","title":"Summary"},{"location":"plugin-system/api/#parameters_1","text":"Name Type Description text System.String The text displayed for the dashboard tile. value System.String The value for the dashboard tile. icon System.String Fontawesome icon to display. controllerName System.String Mvc Controller name the action name should relate to when the tile is clicked. actionName System.String Mvc controller action name to execute when the navbar header is clicked.","title":"Parameters"},{"location":"plugin-system/api/#actionname-property","text":"","title":"ActionName property"},{"location":"plugin-system/api/#summary_7","text":"Gets the Mvc controller action name to execute when the navbar header is clicked.","title":"Summary"},{"location":"plugin-system/api/#controllername-property","text":"","title":"ControllerName property"},{"location":"plugin-system/api/#summary_8","text":"Gets the Mvc controller name the action name should relate to when the tile is clicked.","title":"Summary"},{"location":"plugin-system/api/#icon-property","text":"","title":"Icon property"},{"location":"plugin-system/api/#summary_9","text":"Gets the Fontawesome icon to display.","title":"Summary"},{"location":"plugin-system/api/#text-property","text":"","title":"Text property"},{"location":"plugin-system/api/#summary_10","text":"Gets the text displayed for the dashboard tile.","title":"Summary"},{"location":"plugin-system/api/#value-property_1","text":"","title":"Value property"},{"location":"plugin-system/api/#summary_11","text":"Gets the value for the dashboard tile.","title":"Summary"},{"location":"plugin-system/api/#databaseconnectionstate-type","text":"","title":"DatabaseConnectionState type"},{"location":"plugin-system/api/#namespace_2","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_12","text":"Enumeration of possible database connection states.","title":"Summary"},{"location":"plugin-system/api/#connected-constants","text":"","title":"Connected constants"},{"location":"plugin-system/api/#summary_13","text":"Database is in the connected state.","title":"Summary"},{"location":"plugin-system/api/#disconnected-constants","text":"","title":"Disconnected constants"},{"location":"plugin-system/api/#summary_14","text":"Database is in the disconnected state.","title":"Summary"},{"location":"plugin-system/api/#eventexecutionresult-type","text":"","title":"EventExecutionResult type"},{"location":"plugin-system/api/#namespace_3","text":"ChuckDeviceController.Plugin.EventBus","title":"Namespace"},{"location":"plugin-system/api/#summary_15","text":"Indicates the result status of an observable emitted event.","title":"Summary"},{"location":"plugin-system/api/#executed-constants","text":"","title":"Executed constants"},{"location":"plugin-system/api/#summary_16","text":"Event was executed successfully.","title":"Summary"},{"location":"plugin-system/api/#unhandledexception-constants","text":"","title":"UnhandledException constants"},{"location":"plugin-system/api/#summary_17","text":"Unhandled exception occurred while emitting the event.","title":"Summary"},{"location":"plugin-system/api/#geofencetypeattribute-type","text":"","title":"GeofenceTypeAttribute type"},{"location":"plugin-system/api/#namespace_4","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_18","text":"Sets the expected for custom instances.","title":"Summary"},{"location":"plugin-system/api/#ctortype-constructor","text":"","title":"#ctor(type) constructor"},{"location":"plugin-system/api/#summary_19","text":"Instantiates a new instance of the GeofenceTypeAttribute attribute class.","title":"Summary"},{"location":"plugin-system/api/#parameters_2","text":"Name Type Description type ChuckDeviceController.Data.Common.GeofenceType Expected geofence type required by the custom .","title":"Parameters"},{"location":"plugin-system/api/#type-property","text":"","title":"Type property"},{"location":"plugin-system/api/#summary_20","text":"Gets the specified geofence type expected.","title":"Summary"},{"location":"plugin-system/api/#iauthorizehost-type","text":"","title":"IAuthorizeHost type"},{"location":"plugin-system/api/#namespace_5","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_21","text":"User identity authorization host handler.","title":"Summary"},{"location":"plugin-system/api/#registerrolenamedisplayindex-method","text":"","title":"RegisterRole(name,displayIndex) method"},{"location":"plugin-system/api/#summary_22","text":"Registers a custom user role with the host application.","title":"Summary"},{"location":"plugin-system/api/#returns","text":"Returns a value determining whether the role was registered or not.","title":"Returns"},{"location":"plugin-system/api/#parameters_3","text":"Name Type Description name System.String The name of the role to register. displayIndex System.Int32 Display index value when listing roles.","title":"Parameters"},{"location":"plugin-system/api/#iconfigurationhost-type","text":"","title":"IConfigurationHost type"},{"location":"plugin-system/api/#namespace_6","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_23","text":"This interface contract can be used by all plugin modules to load setting and configuration data from files. The default implementation which is loaded if no other plugin registers an instance uses appsettings.json to store configuration data to be used by Plugins. An instance of this interface is available via the DI container, any custom implementations must be configured to be used in the DI contaner when being initialized.","title":"Summary"},{"location":"plugin-system/api/#remarks","text":"This class can be customized by the host application, if no implementation is provided then a default implementation is provided.","title":"Remarks"},{"location":"plugin-system/api/#getconfigurationjsonfilenamesectionname-method","text":"","title":"GetConfiguration(jsonFileName,sectionName) method"},{"location":"plugin-system/api/#summary_24","text":"Retrieves a configuration instance.","title":"Summary"},{"location":"plugin-system/api/#returns_1","text":"Configuration file instance initialized with the required settings.","title":"Returns"},{"location":"plugin-system/api/#parameters_4","text":"Name Type Description jsonFileName System.String Name of the JSON file name to be used. If a JSON cofiguration file is not provided, the default 'appsettings.json' will be loaded from the calling plugin's root folder. sectionName System.String The name of the configuration section that might be required.","title":"Parameters"},{"location":"plugin-system/api/#getvalue1namedefaultvaluesectionname-method","text":"","title":"GetValue``1(name,defaultValue,sectionName) method"},{"location":"plugin-system/api/#summary_25","text":"Retrieves a value from a JSON configuration file.","title":"Summary"},{"location":"plugin-system/api/#returns_2","text":"Returns the value related to the named configuration property.","title":"Returns"},{"location":"plugin-system/api/#parameters_5","text":"Name Type Description name System.String Name of the property to retrieve the value for. defaultValue ``0 Default value to return. sectionName System.String The name of the configuration section that might be required.","title":"Parameters"},{"location":"plugin-system/api/#generic-types","text":"Name Description T The class related to the settings being requested.","title":"Generic Types"},{"location":"plugin-system/api/#icustomobserver1-type","text":"","title":"ICustomObserver`1 type"},{"location":"plugin-system/api/#namespace_7","text":"ChuckDeviceController.Plugin.EventBus","title":"Namespace"},{"location":"plugin-system/api/#summary_26","text":"Typed observer implementation.","title":"Summary"},{"location":"plugin-system/api/#generic-types_1","text":"Name Description T The event type the observer should expect.","title":"Generic Types"},{"location":"plugin-system/api/#unsubscribe-method","text":"","title":"Unsubscribe() method"},{"location":"plugin-system/api/#summary_27","text":"Unsubscribes from the inherited type indicated.","title":"Summary"},{"location":"plugin-system/api/#parameters_6","text":"This method has no parameters.","title":"Parameters"},{"location":"plugin-system/api/#idashboardstatsitem-type","text":"","title":"IDashboardStatsItem type"},{"location":"plugin-system/api/#namespace_8","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_28","text":"Dashboard statistics item interface contract for displaying information on the front page.","title":"Summary"},{"location":"plugin-system/api/#ishtml-property_1","text":"","title":"IsHtml property"},{"location":"plugin-system/api/#summary_29","text":"Gets or sets a value determining whether the name and value properties include raw HTML or not.","title":"Summary"},{"location":"plugin-system/api/#name-property_1","text":"","title":"Name property"},{"location":"plugin-system/api/#summary_30","text":"Gets or sets the name or title of the statistic.","title":"Summary"},{"location":"plugin-system/api/#value-property_2","text":"","title":"Value property"},{"location":"plugin-system/api/#summary_31","text":"Gets or sets the value of the statistic.","title":"Summary"},{"location":"plugin-system/api/#idashboardtile-type","text":"","title":"IDashboardTile type"},{"location":"plugin-system/api/#namespace_9","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_32","text":"Dashboard tile interface contract to display custom tile-like elements on the dashboard.","title":"Summary"},{"location":"plugin-system/api/#actionname-property_1","text":"","title":"ActionName property"},{"location":"plugin-system/api/#summary_33","text":"Gets or sets the Mvc controller action name to execute when the navbar header is clicked.","title":"Summary"},{"location":"plugin-system/api/#controllername-property_1","text":"","title":"ControllerName property"},{"location":"plugin-system/api/#summary_34","text":"Gets or sets the Mvc controller name the action name should relate to when the tile is clicked.","title":"Summary"},{"location":"plugin-system/api/#icon-property_1","text":"","title":"Icon property"},{"location":"plugin-system/api/#summary_35","text":"Gets or sets the Fontawesome icon to display.","title":"Summary"},{"location":"plugin-system/api/#text-property_1","text":"","title":"Text property"},{"location":"plugin-system/api/#summary_36","text":"Gets or sets the text displayed for the dashboard tile.","title":"Summary"},{"location":"plugin-system/api/#value-property_3","text":"","title":"Value property"},{"location":"plugin-system/api/#summary_37","text":"Gets or sets the value for the dashboard tile.","title":"Summary"},{"location":"plugin-system/api/#idatabaseevents-type","text":"","title":"IDatabaseEvents type"},{"location":"plugin-system/api/#namespace_10","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_38","text":"Provides delegates of database related events from the host application.","title":"Summary"},{"location":"plugin-system/api/#onentityadded1entity-method","text":"","title":"OnEntityAdded``1(entity) method"},{"location":"plugin-system/api/#summary_39","text":"Called when an entity has been added to the database by the host application.","title":"Summary"},{"location":"plugin-system/api/#parameters_7","text":"Name Type Description entity ``0 The entity that was added.","title":"Parameters"},{"location":"plugin-system/api/#generic-types_2","text":"Name Description T Data entity type that was added.","title":"Generic Types"},{"location":"plugin-system/api/#onentitydeleted1entity-method","text":"","title":"OnEntityDeleted``1(entity) method"},{"location":"plugin-system/api/#summary_40","text":"Called when an entity has been deleted in the database by the host application.","title":"Summary"},{"location":"plugin-system/api/#parameters_8","text":"Name Type Description entity ``0 The entity that was deleted.","title":"Parameters"},{"location":"plugin-system/api/#generic-types_3","text":"Name Description T Data entity type that was deleted.","title":"Generic Types"},{"location":"plugin-system/api/#onentitymodified1oldentitynewentity-method","text":"","title":"OnEntityModified``1(oldEntity,newEntity) method"},{"location":"plugin-system/api/#summary_41","text":"Called when an entity has been modified in the database by the host application.","title":"Summary"},{"location":"plugin-system/api/#parameters_9","text":"Name Type Description oldEntity ``0 The entity's previous version. newEntity ``0 The entity that was modified.","title":"Parameters"},{"location":"plugin-system/api/#generic-types_4","text":"Name Description T Data entity type that was modified.","title":"Generic Types"},{"location":"plugin-system/api/#onstatechangedstate-method","text":"","title":"OnStateChanged(state) method"},{"location":"plugin-system/api/#summary_42","text":"Called when the state of the database has changed.","title":"Summary"},{"location":"plugin-system/api/#parameters_10","text":"Name Type Description state ChuckDeviceController.Plugin.DatabaseConnectionState Current state of the database connection.","title":"Parameters"},{"location":"plugin-system/api/#idatabasehost-type","text":"","title":"IDatabaseHost type"},{"location":"plugin-system/api/#namespace_11","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_43","text":"Plugin host handler contract used to interact with the database entities.","title":"Summary"},{"location":"plugin-system/api/#findallasync1-method","text":"","title":"FindAllAsync``1() method"},{"location":"plugin-system/api/#summary_44","text":"Gets a list of database entities.","title":"Summary"},{"location":"plugin-system/api/#returns_3","text":"Returns the list of database entities.","title":"Returns"},{"location":"plugin-system/api/#parameters_11","text":"This method has no parameters.","title":"Parameters"},{"location":"plugin-system/api/#generic-types_5","text":"Name Description TEntity Database entity contract type.","title":"Generic Types"},{"location":"plugin-system/api/#findasync2id-method","text":"","title":"FindAsync``2(id) method"},{"location":"plugin-system/api/#summary_45","text":"Gets a database entity by primary key.","title":"Summary"},{"location":"plugin-system/api/#returns_4","text":"Returns the database entity.","title":"Returns"},{"location":"plugin-system/api/#parameters_12","text":"Name Type Description id ``1 Primary key of the database entity.","title":"Parameters"},{"location":"plugin-system/api/#generic-types_6","text":"Name Description TEntity Database entity contract type. TKey Database entity primary key type.","title":"Generic Types"},{"location":"plugin-system/api/#findasync2predicateordersortdirectionlimit-method","text":"","title":"FindAsync``2(predicate,order,sortDirection,limit) method"},{"location":"plugin-system/api/#summary_46","text":"Gets a list of database entities matching the specified criteria.","title":"Summary"},{"location":"plugin-system/api/#returns_5","text":"Returns the list of database entities.","title":"Returns"},{"location":"plugin-system/api/#parameters_13","text":"Name Type Description predicate System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}} Predicate used to determine if a database entity matches. order System.Linq.Expressions.Expression{System.Func{``0,``1}} Sort order expression. (Optional) sortDirection ChuckDeviceController.Data.Common.SortOrderDirection Sort ordering direction. limit System.Int32 Limit the returned number of results.","title":"Parameters"},{"location":"plugin-system/api/#generic-types_7","text":"Name Description TKey Entity property type when sorting. TEntity Database entity contract type.","title":"Generic Types"},{"location":"plugin-system/api/#ievent-type","text":"","title":"IEvent type"},{"location":"plugin-system/api/#namespace_12","text":"ChuckDeviceController.Plugin.EventBus","title":"Namespace"},{"location":"plugin-system/api/#summary_47","text":"Interface contract for event bus events.","title":"Summary"},{"location":"plugin-system/api/#payload-property","text":"","title":"Payload property"},{"location":"plugin-system/api/#summary_48","text":"Gets or sets the payload data included in the event.","title":"Summary"},{"location":"plugin-system/api/#ieventaggregatorhost-type","text":"","title":"IEventAggregatorHost type"},{"location":"plugin-system/api/#namespace_13","text":"ChuckDeviceController.Plugin.EventBus","title":"Namespace"},{"location":"plugin-system/api/#summary_49","text":"","title":"Summary"},{"location":"plugin-system/api/#publishmessage-method","text":"","title":"Publish(message) method"},{"location":"plugin-system/api/#summary_50","text":"","title":"Summary"},{"location":"plugin-system/api/#parameters_14","text":"Name Type Description message ChuckDeviceController.Plugin.EventBus.IEvent","title":"Parameters"},{"location":"plugin-system/api/#subscribeobserver-method","text":"","title":"Subscribe(observer) method"},{"location":"plugin-system/api/#summary_51","text":"","title":"Summary"},{"location":"plugin-system/api/#returns_6","text":"","title":"Returns"},{"location":"plugin-system/api/#parameters_15","text":"Name Type Description observer ChuckDeviceController.Plugin.EventBus.ICustomObserver{ChuckDeviceController.Plugin.EventBus.IEvent}","title":"Parameters"},{"location":"plugin-system/api/#subscribe1observer-method","text":"","title":"Subscribe``1(observer) method"},{"location":"plugin-system/api/#summary_52","text":"","title":"Summary"},{"location":"plugin-system/api/#returns_7","text":"","title":"Returns"},{"location":"plugin-system/api/#parameters_16","text":"Name Type Description observer ChuckDeviceController.Plugin.EventBus.ICustomObserver{``0}","title":"Parameters"},{"location":"plugin-system/api/#generic-types_8","text":"Name Description T","title":"Generic Types"},{"location":"plugin-system/api/#ifilestoragehost-type","text":"","title":"IFileStorageHost type"},{"location":"plugin-system/api/#namespace_14","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_53","text":"Interface contract used for reading data from as well as persisting data to storage. The type of storage used will depend on the implementation.","title":"Summary"},{"location":"plugin-system/api/#igeofenceservicehost-type","text":"","title":"IGeofenceServiceHost type"},{"location":"plugin-system/api/#namespace_15","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_54","text":"Geofence service interface contract used to create new geofences, check if coordinate is within a polygon, as well as converting geofence text to actual geometry models.","title":"Summary"},{"location":"plugin-system/api/#creategeofenceasyncoptions-method","text":"","title":"CreateGeofenceAsync(options) method"},{"location":"plugin-system/api/#summary_55","text":"Create a new or update an existing geofence.","title":"Summary"},{"location":"plugin-system/api/#parameters_17","text":"Name Type Description options ChuckDeviceController.Data.Abstractions.IGeofence Geofence options used to create or update.","title":"Parameters"},{"location":"plugin-system/api/#getcoordinatesgeofence-method","text":"","title":"GetCoordinates(geofence) method"},{"location":"plugin-system/api/#summary_56","text":"Gets the geofence location plots as a list of coordinates.","title":"Summary"},{"location":"plugin-system/api/#returns_8","text":"Returns a list of coordinates.","title":"Returns"},{"location":"plugin-system/api/#parameters_18","text":"Name Type Description geofence ChuckDeviceController.Data.Abstractions.IGeofence Geofence to get coordinates from.","title":"Parameters"},{"location":"plugin-system/api/#getgeofenceasyncname-method","text":"","title":"GetGeofenceAsync(name) method"},{"location":"plugin-system/api/#summary_57","text":"Retrieves a geofence from the database by name.","title":"Summary"},{"location":"plugin-system/api/#returns_9","text":"Returns a geofence interface contract.","title":"Returns"},{"location":"plugin-system/api/#parameters_19","text":"Name Type Description name System.String Name of geofence to retrieve.","title":"Parameters"},{"location":"plugin-system/api/#getmultipolygonsgeofence-method","text":"","title":"GetMultiPolygons(geofence) method"},{"location":"plugin-system/api/#summary_58","text":"Gets the geofence boundaries in multipolygon format as well as a two-dimensional list of coordinates.","title":"Summary"},{"location":"plugin-system/api/#returns_10","text":"Returns a tuple with a list of MultiPolygons and a two-dimensional list of coordinates.","title":"Returns"},{"location":"plugin-system/api/#parameters_20","text":"Name Type Description geofence ChuckDeviceController.Data.Abstractions.IGeofence Geofence to get coordinates from.","title":"Parameters"},{"location":"plugin-system/api/#ispointinmultipolygoncoordmultipolygon-method","text":"","title":"IsPointInMultiPolygon(coord,multiPolygon) method"},{"location":"plugin-system/api/#summary_59","text":"","title":"Summary"},{"location":"plugin-system/api/#returns_11","text":"","title":"Returns"},{"location":"plugin-system/api/#parameters_21","text":"Name Type Description coord ChuckDeviceController.Geometry.Models.Abstractions.ICoordinate multiPolygon ChuckDeviceController.Geometry.Models.Abstractions.IMultiPolygon","title":"Parameters"},{"location":"plugin-system/api/#ispointinmultipolygonscoordmultipolygons-method","text":"","title":"IsPointInMultiPolygons(coord,multiPolygons) method"},{"location":"plugin-system/api/#summary_60","text":"","title":"Summary"},{"location":"plugin-system/api/#returns_12","text":"","title":"Returns"},{"location":"plugin-system/api/#parameters_22","text":"Name Type Description coord ChuckDeviceController.Geometry.Models.Abstractions.ICoordinate multiPolygons System.Collections.Generic.IEnumerable{ChuckDeviceController.Geometry.Models.Abstractions.IMultiPolygon}","title":"Parameters"},{"location":"plugin-system/api/#ispointinpolygoncoordcoordinates-method","text":"","title":"IsPointInPolygon(coord,coordinates) method"},{"location":"plugin-system/api/#summary_61","text":"","title":"Summary"},{"location":"plugin-system/api/#returns_13","text":"","title":"Returns"},{"location":"plugin-system/api/#parameters_23","text":"Name Type Description coord ChuckDeviceController.Geometry.Models.Abstractions.ICoordinate coordinates System.Collections.Generic.IEnumerable{ChuckDeviceController.Geometry.Models.Abstractions.ICoordinate}","title":"Parameters"},{"location":"plugin-system/api/#iinstanceservicehost-type","text":"","title":"IInstanceServiceHost type"},{"location":"plugin-system/api/#namespace_16","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_62","text":"Instance service interface contract used to create new instances.","title":"Summary"},{"location":"plugin-system/api/#createinstanceasyncoptions-method","text":"","title":"CreateInstanceAsync(options) method"},{"location":"plugin-system/api/#summary_63","text":"Creates a new instance in the database.","title":"Summary"},{"location":"plugin-system/api/#parameters_24","text":"Name Type Description options ChuckDeviceController.Data.Abstractions.IInstance Options used to create the new instance.","title":"Parameters"},{"location":"plugin-system/api/#ijobcontrollerserviceevents-type","text":"","title":"IJobControllerServiceEvents type"},{"location":"plugin-system/api/#namespace_17","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_64","text":"Job controller service related events that have occurred in the host application.","title":"Summary"},{"location":"plugin-system/api/#ijobcontrollerservicehost-type","text":"","title":"IJobControllerServiceHost type"},{"location":"plugin-system/api/#namespace_18","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_65","text":"Plugin host handler contract used to interact with and manage the job controller service.","title":"Summary"},{"location":"plugin-system/api/#custominstancetypes-property","text":"","title":"CustomInstanceTypes property"},{"location":"plugin-system/api/#summary_66","text":"Gets a list of all registered custom job controller instance types.","title":"Summary"},{"location":"plugin-system/api/#devices-property","text":"","title":"Devices property"},{"location":"plugin-system/api/#summary_67","text":"Gets a dictionary of active and configured devices.","title":"Summary"},{"location":"plugin-system/api/#instances-property","text":"","title":"Instances property"},{"location":"plugin-system/api/#summary_68","text":"Gets a dictionary of all loaded job controller instances.","title":"Summary"},{"location":"plugin-system/api/#assigndevicetojobcontrollerasyncdeviceinstancename-method","text":"","title":"AssignDeviceToJobControllerAsync(device,instanceName) method"},{"location":"plugin-system/api/#summary_69","text":"Assigns the specified device to a specific job controller instance by name.","title":"Summary"},{"location":"plugin-system/api/#parameters_25","text":"Name Type Description device ChuckDeviceController.Data.Abstractions.IDevice Device entity. instanceName System.String Job controller instance name.","title":"Parameters"},{"location":"plugin-system/api/#registerjobcontrollerasync1custominstancetype-method","text":"","title":"RegisterJobControllerAsync``1(customInstanceType) method"},{"location":"plugin-system/api/#summary_70","text":"","title":"Summary"},{"location":"plugin-system/api/#returns_14","text":"","title":"Returns"},{"location":"plugin-system/api/#parameters_26","text":"Name Type Description customInstanceType System.String","title":"Parameters"},{"location":"plugin-system/api/#generic-types_9","text":"Name Description T","title":"Generic Types"},{"location":"plugin-system/api/#iloaddata-type","text":"","title":"ILoadData type"},{"location":"plugin-system/api/#namespace_19","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_71","text":"Interface contract used by to load data from the file system.","title":"Summary"},{"location":"plugin-system/api/#load1foldernamefilename-method","text":"","title":"Load``1(folderName,fileName) method"},{"location":"plugin-system/api/#summary_72","text":"Loads file data of type T from the plugin's folder.","title":"Summary"},{"location":"plugin-system/api/#returns_15","text":"Type of data to be loaded or default type if exception occurs.","title":"Returns"},{"location":"plugin-system/api/#parameters_27","text":"Name Type Description folderName System.String Sub folder within plugin's folder, optional. If not set, searches root of plugin's folder. fileName System.String File name of storage file to load, including extension otherwise generic '.dat' extension will be appended.","title":"Parameters"},{"location":"plugin-system/api/#generic-types_10","text":"Name Description T Type of file data to be loaded.","title":"Generic Types"},{"location":"plugin-system/api/#ilocalizationhost-type","text":"","title":"ILocalizationHost type"},{"location":"plugin-system/api/#namespace_20","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_73","text":"Plugin host handler contract used to translating strings.","title":"Summary"},{"location":"plugin-system/api/#countrycode-property","text":"","title":"CountryCode property"},{"location":"plugin-system/api/#summary_74","text":"Gets the two letter ISO country code for the currently set localization.","title":"Summary"},{"location":"plugin-system/api/#currentculture-property","text":"","title":"CurrentCulture property"},{"location":"plugin-system/api/#summary_75","text":"Gets the current culture localization to use.","title":"Summary"},{"location":"plugin-system/api/#getalignmentnamealignmenttypeid-method","text":"","title":"GetAlignmentName(alignmentTypeId) method"},{"location":"plugin-system/api/#summary_76","text":"","title":"Summary"},{"location":"plugin-system/api/#returns_16","text":"","title":"Returns"},{"location":"plugin-system/api/#parameters_28","text":"Name Type Description alignmentTypeId System.UInt32","title":"Parameters"},{"location":"plugin-system/api/#getcharactercategorynamecharactercategoryid-method","text":"","title":"GetCharacterCategoryName(characterCategoryId) method"},{"location":"plugin-system/api/#summary_77","text":"","title":"Summary"},{"location":"plugin-system/api/#returns_17","text":"","title":"Returns"},{"location":"plugin-system/api/#parameters_29","text":"Name Type Description characterCategoryId System.UInt32","title":"Parameters"},{"location":"plugin-system/api/#getcostumenamecostumeid-method","text":"","title":"GetCostumeName(costumeId) method"},{"location":"plugin-system/api/#summary_78","text":"Translate a Pokemon costume id to name.","title":"Summary"},{"location":"plugin-system/api/#returns_18","text":"","title":"Returns"},{"location":"plugin-system/api/#parameters_30","text":"Name Type Description costumeId System.UInt32 Costume ID to translate to name.","title":"Parameters"},{"location":"plugin-system/api/#getevolutionnameevolutionid-method","text":"","title":"GetEvolutionName(evolutionId) method"},{"location":"plugin-system/api/#summary_79","text":"Translate a Pokemon evolution id to name.","title":"Summary"},{"location":"plugin-system/api/#returns_19","text":"","title":"Returns"},{"location":"plugin-system/api/#parameters_31","text":"Name Type Description evolutionId System.UInt32 Evolution ID to translate to name.","title":"Parameters"},{"location":"plugin-system/api/#getformnameformidincludenormal-method","text":"","title":"GetFormName(formId,includeNormal) method"},{"location":"plugin-system/api/#summary_80","text":"Translate a Pokemon form id to name.","title":"Summary"},{"location":"plugin-system/api/#returns_20","text":"","title":"Returns"},{"location":"plugin-system/api/#parameters_32","text":"Name Type Description formId System.UInt32 Form ID to translate to name. includeNormal System.Boolean Include 'Normal' form name or not.","title":"Parameters"},{"location":"plugin-system/api/#getgrunttypeinvasioncharacterid-method","text":"","title":"GetGruntType(invasionCharacterId) method"},{"location":"plugin-system/api/#summary_81","text":"","title":"Summary"},{"location":"plugin-system/api/#returns_21","text":"","title":"Returns"},{"location":"plugin-system/api/#parameters_33","text":"Name Type Description invasionCharacterId System.UInt32","title":"Parameters"},{"location":"plugin-system/api/#getitemitemid-method","text":"","title":"GetItem(itemId) method"},{"location":"plugin-system/api/#summary_82","text":"","title":"Summary"},{"location":"plugin-system/api/#returns_22","text":"","title":"Returns"},{"location":"plugin-system/api/#parameters_34","text":"Name Type Description itemId System.UInt32","title":"Parameters"},{"location":"plugin-system/api/#getmovenamemoveid-method","text":"","title":"GetMoveName(moveId) method"},{"location":"plugin-system/api/#summary_83","text":"","title":"Summary"},{"location":"plugin-system/api/#returns_23","text":"","title":"Returns"},{"location":"plugin-system/api/#parameters_35","text":"Name Type Description moveId System.UInt32","title":"Parameters"},{"location":"plugin-system/api/#getpokemonnamepokemonid-method","text":"","title":"GetPokemonName(pokemonId) method"},{"location":"plugin-system/api/#summary_84","text":"Translate a Pokemon id to name.","title":"Summary"},{"location":"plugin-system/api/#returns_24","text":"","title":"Returns"},{"location":"plugin-system/api/#parameters_36","text":"Name Type Description pokemonId System.UInt32 Pokemon ID to translate to name.","title":"Parameters"},{"location":"plugin-system/api/#getthrownamethrowtypeid-method","text":"","title":"GetThrowName(throwTypeId) method"},{"location":"plugin-system/api/#summary_85","text":"","title":"Summary"},{"location":"plugin-system/api/#returns_25","text":"","title":"Returns"},{"location":"plugin-system/api/#parameters_37","text":"Name Type Description throwTypeId System.UInt32","title":"Parameters"},{"location":"plugin-system/api/#getweatherweatherconditionid-method","text":"","title":"GetWeather(weatherConditionId) method"},{"location":"plugin-system/api/#summary_86","text":"","title":"Summary"},{"location":"plugin-system/api/#returns_26","text":"","title":"Returns"},{"location":"plugin-system/api/#parameters_38","text":"Name Type Description weatherConditionId System.UInt32","title":"Parameters"},{"location":"plugin-system/api/#setlocalelocale-method","text":"","title":"SetLocale(locale) method"},{"location":"plugin-system/api/#summary_87","text":"Sets the country locale code to use for translations.","title":"Summary"},{"location":"plugin-system/api/#parameters_39","text":"Name Type Description locale System.String Two letter ISO language name code.","title":"Parameters"},{"location":"plugin-system/api/#translatekey-method","text":"","title":"Translate(key) method"},{"location":"plugin-system/api/#summary_88","text":"","title":"Summary"},{"location":"plugin-system/api/#returns_27","text":"","title":"Returns"},{"location":"plugin-system/api/#parameters_40","text":"Name Type Description key System.String","title":"Parameters"},{"location":"plugin-system/api/#translatekeywithargsargs-method","text":"","title":"Translate(keyWithArgs,args) method"},{"location":"plugin-system/api/#summary_89","text":"","title":"Summary"},{"location":"plugin-system/api/#returns_28","text":"","title":"Returns"},{"location":"plugin-system/api/#parameters_41","text":"Name Type Description keyWithArgs System.String args System.Object[]","title":"Parameters"},{"location":"plugin-system/api/#ilogginghost-type","text":"","title":"ILoggingHost type"},{"location":"plugin-system/api/#namespace_21","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_90","text":"Plugin host handler for logging messages from plugins.","title":"Summary"},{"location":"plugin-system/api/#logcriticalmessageargs-method","text":"","title":"LogCritical(message,args) method"},{"location":"plugin-system/api/#summary_91","text":"","title":"Summary"},{"location":"plugin-system/api/#parameters_42","text":"Name Type Description message System.String args System.Object[]","title":"Parameters"},{"location":"plugin-system/api/#logcriticalerrormessageargs-method","text":"","title":"LogCritical(error,message,args) method"},{"location":"plugin-system/api/#summary_92","text":"","title":"Summary"},{"location":"plugin-system/api/#parameters_43","text":"Name Type Description error System.Exception message System.String args System.Object[]","title":"Parameters"},{"location":"plugin-system/api/#logdebugmessageargs-method","text":"","title":"LogDebug(message,args) method"},{"location":"plugin-system/api/#summary_93","text":"","title":"Summary"},{"location":"plugin-system/api/#parameters_44","text":"Name Type Description message System.String args System.Object[]","title":"Parameters"},{"location":"plugin-system/api/#logerrormessageargs-method","text":"","title":"LogError(message,args) method"},{"location":"plugin-system/api/#summary_94","text":"","title":"Summary"},{"location":"plugin-system/api/#parameters_45","text":"Name Type Description message System.String args System.Object[]","title":"Parameters"},{"location":"plugin-system/api/#logerrorerrormessageargs-method","text":"","title":"LogError(error,message,args) method"},{"location":"plugin-system/api/#summary_95","text":"","title":"Summary"},{"location":"plugin-system/api/#parameters_46","text":"Name Type Description error System.Exception message System.String args System.Object[]","title":"Parameters"},{"location":"plugin-system/api/#loginformationmessageargs-method","text":"","title":"LogInformation(message,args) method"},{"location":"plugin-system/api/#summary_96","text":"","title":"Summary"},{"location":"plugin-system/api/#parameters_47","text":"Name Type Description message System.String args System.Object[]","title":"Parameters"},{"location":"plugin-system/api/#logtracemessageargs-method","text":"","title":"LogTrace(message,args) method"},{"location":"plugin-system/api/#summary_97","text":"","title":"Summary"},{"location":"plugin-system/api/#parameters_48","text":"Name Type Description message System.String args System.Object[]","title":"Parameters"},{"location":"plugin-system/api/#logwarningmessageargs-method","text":"","title":"LogWarning(message,args) method"},{"location":"plugin-system/api/#summary_98","text":"","title":"Summary"},{"location":"plugin-system/api/#parameters_49","text":"Name Type Description message System.String args System.Object[]","title":"Parameters"},{"location":"plugin-system/api/#imemorycachehost-type","text":"","title":"IMemoryCacheHost type"},{"location":"plugin-system/api/#namespace_22","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_99","text":"In memory cache host handler.","title":"Summary"},{"location":"plugin-system/api/#clear-method","text":"","title":"Clear() method"},{"location":"plugin-system/api/#summary_100","text":"Clears all cached entries.","title":"Summary"},{"location":"plugin-system/api/#parameters_50","text":"This method has no parameters.","title":"Parameters"},{"location":"plugin-system/api/#getvalue1key-method","text":"","title":"GetValue``1(key) method"},{"location":"plugin-system/api/#summary_101","text":"Retrieve a value by key from the cache.","title":"Summary"},{"location":"plugin-system/api/#returns_29","text":"Returns a value from the cache, otherwise null .","title":"Returns"},{"location":"plugin-system/api/#parameters_51","text":"Name Type Description key System.String Key to check.","title":"Parameters"},{"location":"plugin-system/api/#generic-types_11","text":"Name Description T Type of value.","title":"Generic Types"},{"location":"plugin-system/api/#issetkey-method","text":"","title":"IsSet(key) method"},{"location":"plugin-system/api/#summary_102","text":"Checks whether a key exists in the cache.","title":"Summary"},{"location":"plugin-system/api/#returns_30","text":"Returns true if the key exists, otherwise false .","title":"Returns"},{"location":"plugin-system/api/#parameters_52","text":"Name Type Description key System.String Key to check if exists.","title":"Parameters"},{"location":"plugin-system/api/#removekey-method","text":"","title":"Remove(key) method"},{"location":"plugin-system/api/#summary_103","text":"Remove a entry from the cache by key.","title":"Summary"},{"location":"plugin-system/api/#parameters_53","text":"Name Type Description key System.String Key to remove from the cache.","title":"Parameters"},{"location":"plugin-system/api/#setvalue1keyvalueexpirys-method","text":"","title":"SetValue``1(key,value,expiryS) method"},{"location":"plugin-system/api/#summary_104","text":"Caches a value by key with a set expiration time.","title":"Summary"},{"location":"plugin-system/api/#parameters_54","text":"Name Type Description key System.String Key to set. value ``0 Value to cache. expiryS System.UInt16 Expiration time in seconds.","title":"Parameters"},{"location":"plugin-system/api/#generic-types_12","text":"Name Description T Type of value.","title":"Generic Types"},{"location":"plugin-system/api/#trygetvalue1keyvalue-method","text":"","title":"TryGetValue``1(key,value) method"},{"location":"plugin-system/api/#summary_105","text":"Trys to retrieve a value by key from the cache.","title":"Summary"},{"location":"plugin-system/api/#returns_31","text":"Returns true if the key exists, otherwise false .","title":"Returns"},{"location":"plugin-system/api/#parameters_55","text":"Name Type Description key System.String Key to check. value ``0@ Value returned from the cache.","title":"Parameters"},{"location":"plugin-system/api/#generic-types_13","text":"Name Description T Type of value.","title":"Generic Types"},{"location":"plugin-system/api/#imetadata-type","text":"","title":"IMetadata type"},{"location":"plugin-system/api/#namespace_23","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_106","text":"Plugin metadata details.","title":"Summary"},{"location":"plugin-system/api/#author-property","text":"","title":"Author property"},{"location":"plugin-system/api/#summary_107","text":"Gets or sets the creator/author name that wrote the Plugin.","title":"Summary"},{"location":"plugin-system/api/#description-property","text":"","title":"Description property"},{"location":"plugin-system/api/#summary_108","text":"Gets or sets the description about the Plugin.","title":"Summary"},{"location":"plugin-system/api/#name-property_2","text":"","title":"Name property"},{"location":"plugin-system/api/#summary_109","text":"Gets or sets the name of the Plugin.","title":"Summary"},{"location":"plugin-system/api/#version-property","text":"","title":"Version property"},{"location":"plugin-system/api/#summary_110","text":"Gets or sets the current version of the Plugin.","title":"Summary"},{"location":"plugin-system/api/#iplugin-type","text":"","title":"IPlugin type"},{"location":"plugin-system/api/#namespace_24","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_111","text":"Base Plugin interface contract all plugins are required to inherit at a minimum.","title":"Summary"},{"location":"plugin-system/api/#ipluginbootstrapperserviceattribute-type","text":"","title":"IPluginBootstrapperServiceAttribute type"},{"location":"plugin-system/api/#namespace_25","text":"ChuckDeviceController.Plugin.Services","title":"Namespace"},{"location":"plugin-system/api/#summary_112","text":"Assigns fields and properties in a plugin assembly with registered service implementations.","title":"Summary"},{"location":"plugin-system/api/#proxytype-property","text":"","title":"ProxyType property"},{"location":"plugin-system/api/#summary_113","text":"Gets or sets the bootstrap service implementation type.","title":"Summary"},{"location":"plugin-system/api/#servicetype-property","text":"","title":"ServiceType property"},{"location":"plugin-system/api/#summary_114","text":"Gets or sets the bootstrap service contract type.","title":"Summary"},{"location":"plugin-system/api/#ipluginevents-type","text":"","title":"IPluginEvents type"},{"location":"plugin-system/api/#namespace_26","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_115","text":"Provides delegates of plugin related events from the host application.","title":"Summary"},{"location":"plugin-system/api/#onload-method","text":"","title":"OnLoad() method"},{"location":"plugin-system/api/#summary_116","text":"Called when the plugin has been fully loaded and initialized from the host application.","title":"Summary"},{"location":"plugin-system/api/#parameters_56","text":"This method has no parameters.","title":"Parameters"},{"location":"plugin-system/api/#onreload-method","text":"","title":"OnReload() method"},{"location":"plugin-system/api/#summary_117","text":"Called when the plugin has been reloaded by the host application.","title":"Summary"},{"location":"plugin-system/api/#parameters_57","text":"This method has no parameters.","title":"Parameters"},{"location":"plugin-system/api/#onremove-method","text":"","title":"OnRemove() method"},{"location":"plugin-system/api/#summary_118","text":"Called when the plugin has been removed by the host application.","title":"Summary"},{"location":"plugin-system/api/#parameters_58","text":"This method has no parameters.","title":"Parameters"},{"location":"plugin-system/api/#onstatechangedstate-method_1","text":"","title":"OnStateChanged(state) method"},{"location":"plugin-system/api/#summary_119","text":"Called when the plugin's state has been changed by the host application.","title":"Summary"},{"location":"plugin-system/api/#parameters_59","text":"Name Type Description state ChuckDeviceController.Data.Common.PluginState Plugin's current state","title":"Parameters"},{"location":"plugin-system/api/#onstop-method","text":"","title":"OnStop() method"},{"location":"plugin-system/api/#summary_120","text":"Called when the plugin has been stopped by the host application.","title":"Summary"},{"location":"plugin-system/api/#parameters_60","text":"This method has no parameters.","title":"Parameters"},{"location":"plugin-system/api/#ipluginserviceattribute-type","text":"","title":"IPluginServiceAttribute type"},{"location":"plugin-system/api/#namespace_27","text":"ChuckDeviceController.Plugin.Services","title":"Namespace"},{"location":"plugin-system/api/#summary_121","text":"Contract for registering plugin service classes marked with 'PluginServiceAttribute' with the host application in order to be used with dependency injection.","title":"Summary"},{"location":"plugin-system/api/#lifetime-property","text":"","title":"Lifetime property"},{"location":"plugin-system/api/#summary_122","text":"Gets or sets the service lifetime for the plugin service.","title":"Summary"},{"location":"plugin-system/api/#provider-property","text":"","title":"Provider property"},{"location":"plugin-system/api/#summary_123","text":"Gets or sets who provided the service.","title":"Summary"},{"location":"plugin-system/api/#proxytype-property_1","text":"","title":"ProxyType property"},{"location":"plugin-system/api/#summary_124","text":"Gets or sets the service implementation type.","title":"Summary"},{"location":"plugin-system/api/#servicetype-property_1","text":"","title":"ServiceType property"},{"location":"plugin-system/api/#summary_125","text":"Gets or sets the Service contract type.","title":"Summary"},{"location":"plugin-system/api/#ipublisher-type","text":"","title":"IPublisher type"},{"location":"plugin-system/api/#namespace_28","text":"ChuckDeviceController.Plugin.EventBus","title":"Namespace"},{"location":"plugin-system/api/#summary_126","text":"An interface contract for publishing data to the event bus aggregator service which all subscribers will receive.","title":"Summary"},{"location":"plugin-system/api/#publishpayload-method","text":"","title":"Publish(payload) method"},{"location":"plugin-system/api/#summary_127","text":"Publish data to all subscriptions via event bus aggregator host.","title":"Summary"},{"location":"plugin-system/api/#parameters_61","text":"Name Type Description payload System.String Payload data to publish to subscribers.","title":"Parameters"},{"location":"plugin-system/api/#irepository2-type","text":"","title":"IRepository`2 type"},{"location":"plugin-system/api/#namespace_29","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_128","text":"Repository contract for specific database entity types.","title":"Summary"},{"location":"plugin-system/api/#generic-types_14","text":"Name Description TEntity Database entity contract type. TId Database entity primary key type.","title":"Generic Types"},{"location":"plugin-system/api/#getbyidasyncid-method","text":"","title":"GetByIdAsync(id) method"},{"location":"plugin-system/api/#summary_129","text":"Gets a database entity by primary key.","title":"Summary"},{"location":"plugin-system/api/#returns_32","text":"Returns a database entity.","title":"Returns"},{"location":"plugin-system/api/#parameters_62","text":"Name Type Description id `1 Primary key of the database entity.","title":"Parameters"},{"location":"plugin-system/api/#getlistasync-method","text":"","title":"GetListAsync() method"},{"location":"plugin-system/api/#summary_130","text":"Gets a list of database entities.","title":"Summary"},{"location":"plugin-system/api/#returns_33","text":"Returns a list of database entities.","title":"Returns"},{"location":"plugin-system/api/#parameters_63","text":"This method has no parameters.","title":"Parameters"},{"location":"plugin-system/api/#iroutinghost-type","text":"","title":"IRoutingHost type"},{"location":"plugin-system/api/#namespace_30","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_131","text":"Route generator plugin host.","title":"Summary"},{"location":"plugin-system/api/#generaterouteoptions-method","text":"","title":"GenerateRoute(options) method"},{"location":"plugin-system/api/#summary_132","text":"Generates a route using the specified route generator options.","title":"Summary"},{"location":"plugin-system/api/#returns_34","text":"Returns a list of coordinates of the generated route.","title":"Returns"},{"location":"plugin-system/api/#parameters_64","text":"Name Type Description options ChuckDeviceController.Plugin.RouteGeneratorOptions Routing generation options to use.","title":"Parameters"},{"location":"plugin-system/api/#isavedata-type","text":"","title":"ISaveData type"},{"location":"plugin-system/api/#namespace_31","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_133","text":"Interface contract used by to save data to the file system.","title":"Summary"},{"location":"plugin-system/api/#save1datafoldernamenameprettyprint-method","text":"","title":"Save``1(data,folderName,name,prettyPrint) method"},{"location":"plugin-system/api/#summary_134","text":"Saves file data of type T to the plugin's folder.","title":"Summary"},{"location":"plugin-system/api/#returns_35","text":"Returns true if successful, otherwise false .","title":"Returns"},{"location":"plugin-system/api/#parameters_65","text":"Name Type Description data ``0 File data to be saved. folderName System.String Sub folder within plugin's folder, optional. If not set, uses root of plugin's folder. name System.String File name of storage file to save, including extension otherwise generic '.dat' extension will be appended. prettyPrint System.Boolean Determines whether or not to 'pretty print' the JSON file to readable format.","title":"Parameters"},{"location":"plugin-system/api/#generic-types_15","text":"Name Description T Type of data to be saved.","title":"Generic Types"},{"location":"plugin-system/api/#isettingsproperty-type","text":"","title":"ISettingsProperty type"},{"location":"plugin-system/api/#namespace_32","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_135","text":"Settings property interface contract used by plugins to create UI setting elements in the dashboard.","title":"Summary"},{"location":"plugin-system/api/#class-property","text":"","title":"Class property"},{"location":"plugin-system/api/#summary_136","text":"Gets or sets the CSS class name to use.","title":"Summary"},{"location":"plugin-system/api/#defaultvalue-property","text":"","title":"DefaultValue property"},{"location":"plugin-system/api/#summary_137","text":"Gets or sets the default value to use for the element, if it supports it.","title":"Summary"},{"location":"plugin-system/api/#displayindex-property","text":"","title":"DisplayIndex property"},{"location":"plugin-system/api/#summary_138","text":"Gets or sets a value used for sorting each HTML element created for the properties.","title":"Summary"},{"location":"plugin-system/api/#group-property","text":"","title":"Group property"},{"location":"plugin-system/api/#summary_139","text":"Gets or sets the group the settings property will be in.","title":"Summary"},{"location":"plugin-system/api/#isrequired-property","text":"","title":"IsRequired property"},{"location":"plugin-system/api/#summary_140","text":"Gets or sets a value determining whether the HTML element value is required.","title":"Summary"},{"location":"plugin-system/api/#name-property_3","text":"","title":"Name property"},{"location":"plugin-system/api/#summary_141","text":"Gets or sets the ID and name of the element.","title":"Summary"},{"location":"plugin-system/api/#style-property","text":"","title":"Style property"},{"location":"plugin-system/api/#summary_142","text":"Gets or sets the raw CSS styling to use.","title":"Summary"},{"location":"plugin-system/api/#text-property_2","text":"","title":"Text property"},{"location":"plugin-system/api/#summary_143","text":"Gets or sets the displayed text for the property, possibly used in a label.","title":"Summary"},{"location":"plugin-system/api/#type-property_1","text":"","title":"Type property"},{"location":"plugin-system/api/#summary_144","text":"Gets or sets the type of HTML element to create.","title":"Summary"},{"location":"plugin-system/api/#validate-property","text":"","title":"Validate property"},{"location":"plugin-system/api/#summary_145","text":"Gets or sets a value determining whether to validate the value of the HTML element.","title":"Summary"},{"location":"plugin-system/api/#value-property_4","text":"","title":"Value property"},{"location":"plugin-system/api/#summary_146","text":"Gets or sets the initial value to set for the element.","title":"Summary"},{"location":"plugin-system/api/#isettingspropertyevents-type","text":"","title":"ISettingsPropertyEvents type"},{"location":"plugin-system/api/#namespace_33","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_147","text":"","title":"Summary"},{"location":"plugin-system/api/#onsave-method","text":"","title":"OnSave() method"},{"location":"plugin-system/api/#summary_148","text":"","title":"Summary"},{"location":"plugin-system/api/#parameters_66","text":"This method has no parameters.","title":"Parameters"},{"location":"plugin-system/api/#isettingspropertygroup-type","text":"","title":"ISettingsPropertyGroup type"},{"location":"plugin-system/api/#namespace_34","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_149","text":"Interface contract for grouping settings properties.","title":"Summary"},{"location":"plugin-system/api/#displayindex-property_1","text":"","title":"DisplayIndex property"},{"location":"plugin-system/api/#summary_150","text":"Gets or sets a value used for sorting each HTML element created for the properties.","title":"Summary"},{"location":"plugin-system/api/#id-property","text":"","title":"Id property"},{"location":"plugin-system/api/#summary_151","text":"Gets or sets the unique identifier for the settings property group.","title":"Summary"},{"location":"plugin-system/api/#text-property_3","text":"","title":"Text property"},{"location":"plugin-system/api/#summary_152","text":"Gets or sets the text to display for the settings property group.","title":"Summary"},{"location":"plugin-system/api/#isettingstab-type","text":"","title":"ISettingsTab type"},{"location":"plugin-system/api/#namespace_35","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_153","text":"Settings tab interface contract for adding UI settings from plugins to separate tabs.","title":"Summary"},{"location":"plugin-system/api/#anchor-property","text":"","title":"Anchor property"},{"location":"plugin-system/api/#summary_154","text":"Gets or sets the html anchor tag name of the tab. Note: No hash symbol needed.","title":"Summary"},{"location":"plugin-system/api/#class-property_1","text":"","title":"Class property"},{"location":"plugin-system/api/#summary_155","text":"Gets or sets the CSS class name to use.","title":"Summary"},{"location":"plugin-system/api/#displayindex-property_2","text":"","title":"DisplayIndex property"},{"location":"plugin-system/api/#summary_156","text":"Gets or sets the display index of the tab in the tab list.","title":"Summary"},{"location":"plugin-system/api/#id-property_1","text":"","title":"Id property"},{"location":"plugin-system/api/#summary_157","text":"Gets or sets the unique ID of the tab.","title":"Summary"},{"location":"plugin-system/api/#style-property_1","text":"","title":"Style property"},{"location":"plugin-system/api/#summary_158","text":"Gets or sets the raw CSS styling to use.","title":"Summary"},{"location":"plugin-system/api/#text-property_4","text":"","title":"Text property"},{"location":"plugin-system/api/#summary_159","text":"Gets or sets the display text of the tab.","title":"Summary"},{"location":"plugin-system/api/#isidebaritem-type","text":"","title":"ISidebarItem type"},{"location":"plugin-system/api/#namespace_36","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_160","text":"Side navigation bar plugin contract.","title":"Summary"},{"location":"plugin-system/api/#actionname-property_2","text":"","title":"ActionName property"},{"location":"plugin-system/api/#summary_161","text":"Gets or sets the controller action name to execute when the sidebar item is clicked.","title":"Summary"},{"location":"plugin-system/api/#controllername-property_2","text":"","title":"ControllerName property"},{"location":"plugin-system/api/#summary_162","text":"Gets or sets the controller name the action name should relate to.","title":"Summary"},{"location":"plugin-system/api/#displayindex-property_3","text":"","title":"DisplayIndex property"},{"location":"plugin-system/api/#summary_163","text":"Gets or sets the numeric display index order of the sidebar item in the list of sidebar items.","title":"Summary"},{"location":"plugin-system/api/#icon-property_2","text":"","title":"Icon property"},{"location":"plugin-system/api/#summary_164","text":"Gets or sets the FontAwesome v6 icon key to use for the sidebar item. https://fontawesome.com/icons","title":"Summary"},{"location":"plugin-system/api/#isdisabled-property","text":"","title":"IsDisabled property"},{"location":"plugin-system/api/#summary_165","text":"Gets or sets a value determining whether the sidebar item is disabled or not.","title":"Summary"},{"location":"plugin-system/api/#isseparator-property","text":"","title":"IsSeparator property"},{"location":"plugin-system/api/#summary_166","text":"Gets or sets a value determining whether to insert a separator instead of a dropdown item.","title":"Summary"},{"location":"plugin-system/api/#text-property_5","text":"","title":"Text property"},{"location":"plugin-system/api/#summary_167","text":"Gets or sets the text to display for this sidebar item.","title":"Summary"},{"location":"plugin-system/api/#iuiconshost-type","text":"","title":"IUIconsHost type"},{"location":"plugin-system/api/#namespace_37","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_168","text":"UIcons standard host handler to retrieve icon url endpoints for plugins.","title":"Summary"},{"location":"plugin-system/api/#getpokemoniconpokemonidformidevolutionidgendercostumeidshiny-method","text":"","title":"GetPokemonIcon(pokemonId,formId,evolutionId,gender,costumeId,shiny) method"},{"location":"plugin-system/api/#summary_169","text":"Gets an icon image url based on the provided Pokemon details.","title":"Summary"},{"location":"plugin-system/api/#returns_36","text":"Returns a url of the Pokemon image.","title":"Returns"},{"location":"plugin-system/api/#parameters_67","text":"Name Type Description pokemonId System.UInt32 Pokemon pokedex id. formId System.UInt32 Pokemon form id. evolutionId System.UInt32 Pokemon mega evolution id. gender System.UInt32 Pokemon gender id. costumeId System.UInt32 Pokemon costume id. shiny System.Boolean Whether the Pokemon is shiny or not.","title":"Parameters"},{"location":"plugin-system/api/#iuievents-type","text":"","title":"IUiEvents type"},{"location":"plugin-system/api/#namespace_38","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_170","text":"UI related events that have occurred in the host application.","title":"Summary"},{"location":"plugin-system/api/#iuihost-type","text":"","title":"IUiHost type"},{"location":"plugin-system/api/#namespace_39","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_171","text":"Plugin host handler for executing user interface operations.","title":"Summary"},{"location":"plugin-system/api/#dashboardstatsitems-property","text":"","title":"DashboardStatsItems property"},{"location":"plugin-system/api/#summary_172","text":"Gets a list of dashboard statistics registered by plugins.","title":"Summary"},{"location":"plugin-system/api/#dashboardtiles-property","text":"","title":"DashboardTiles property"},{"location":"plugin-system/api/#summary_173","text":"Gets a list of dashboard tiles registered by plugins.","title":"Summary"},{"location":"plugin-system/api/#settingsproperties-property","text":"","title":"SettingsProperties property"},{"location":"plugin-system/api/#summary_174","text":"Gets a dictionary of settings properties for tabs registered by plugins.","title":"Summary"},{"location":"plugin-system/api/#settingstabs-property","text":"","title":"SettingsTabs property"},{"location":"plugin-system/api/#summary_175","text":"Gets a list of settings tabs registered by plugins.","title":"Summary"},{"location":"plugin-system/api/#sidebaritems-property","text":"","title":"SidebarItems property"},{"location":"plugin-system/api/#summary_176","text":"Gets a list of sidebar items registered by plugins.","title":"Summary"},{"location":"plugin-system/api/#adddashboardstatisticasyncstat-method","text":"","title":"AddDashboardStatisticAsync(stat) method"},{"location":"plugin-system/api/#summary_177","text":"Adds a custom to the dashboard front page.","title":"Summary"},{"location":"plugin-system/api/#parameters_68","text":"Name Type Description stat ChuckDeviceController.Plugin.IDashboardStatsItem Dashboard statistics item to add.","title":"Parameters"},{"location":"plugin-system/api/#adddashboardstatisticsasyncstats-method","text":"","title":"AddDashboardStatisticsAsync(stats) method"},{"location":"plugin-system/api/#summary_178","text":"Adds a list of items to the dashboard front page.","title":"Summary"},{"location":"plugin-system/api/#parameters_69","text":"Name Type Description stats System.Collections.Generic.IEnumerable{ChuckDeviceController.Plugin.IDashboardStatsItem} List of dashboard statistic items to add.","title":"Parameters"},{"location":"plugin-system/api/#adddashboardtileasynctile-method","text":"","title":"AddDashboardTileAsync(tile) method"},{"location":"plugin-system/api/#summary_179","text":"Adds a statistic tile to the front page dashboard.","title":"Summary"},{"location":"plugin-system/api/#parameters_70","text":"Name Type Description tile ChuckDeviceController.Plugin.IDashboardTile Dashboard statistics tile to add.","title":"Parameters"},{"location":"plugin-system/api/#adddashboardtilesasynctiles-method","text":"","title":"AddDashboardTilesAsync(tiles) method"},{"location":"plugin-system/api/#summary_180","text":"Adds a list of statistic tiles to the front page dashboard.","title":"Summary"},{"location":"plugin-system/api/#parameters_71","text":"Name Type Description tiles System.Collections.Generic.IEnumerable{ChuckDeviceController.Plugin.IDashboardTile} List of dashboard statistic tiles to add.","title":"Parameters"},{"location":"plugin-system/api/#addsettingspropertiesasynctabidproperties-method","text":"","title":"AddSettingsPropertiesAsync(tabId,properties) method"},{"location":"plugin-system/api/#summary_181","text":"Adds a list of settings properties to an existing settings tab.","title":"Summary"},{"location":"plugin-system/api/#parameters_72","text":"Name Type Description tabId System.String Unique identifier of the destination tab. properties System.Collections.Generic.IEnumerable{ChuckDeviceController.Plugin.SettingsProperty} List of settings properties to add to the destination.","title":"Parameters"},{"location":"plugin-system/api/#addsettingspropertyasynctabidproperty-method","text":"","title":"AddSettingsPropertyAsync(tabId,property) method"},{"location":"plugin-system/api/#summary_182","text":"Adds a settings property to an existing settings tab.","title":"Summary"},{"location":"plugin-system/api/#parameters_73","text":"Name Type Description tabId System.String Unique identifier of the destination tab. property ChuckDeviceController.Plugin.SettingsProperty Settings property to add to the destination tab.","title":"Parameters"},{"location":"plugin-system/api/#addsettingstabasynctab-method","text":"","title":"AddSettingsTabAsync(tab) method"},{"location":"plugin-system/api/#summary_183","text":"Adds a new settings tab.","title":"Summary"},{"location":"plugin-system/api/#parameters_74","text":"Name Type Description tab ChuckDeviceController.Plugin.SettingsTab Settings tab to add.","title":"Parameters"},{"location":"plugin-system/api/#addsidebaritemasyncheader-method","text":"","title":"AddSidebarItemAsync(header) method"},{"location":"plugin-system/api/#summary_184","text":"Adds a item to the main application's Mvc sidebar.","title":"Summary"},{"location":"plugin-system/api/#parameters_75","text":"Name Type Description header ChuckDeviceController.Plugin.SidebarItem Sidebar item to add.","title":"Parameters"},{"location":"plugin-system/api/#addsidebaritemsasyncheaders-method","text":"","title":"AddSidebarItemsAsync(headers) method"},{"location":"plugin-system/api/#summary_185","text":"Adds a list of items to the main application's Mvc sidebar.","title":"Summary"},{"location":"plugin-system/api/#parameters_76","text":"Name Type Description headers System.Collections.Generic.IEnumerable{ChuckDeviceController.Plugin.SidebarItem} List of sidebar items to add.","title":"Parameters"},{"location":"plugin-system/api/#getsettingspropertyvalue1name-method","text":"","title":"GetSettingsPropertyValue``1(name) method"},{"location":"plugin-system/api/#summary_186","text":"Gets the value of a settings property by name.","title":"Summary"},{"location":"plugin-system/api/#parameters_77","text":"Name Type Description name System.String Name of the property to get the value of.","title":"Parameters"},{"location":"plugin-system/api/#generic-types_16","text":"Name Description T Expected return type of the settings property.","title":"Generic Types"},{"location":"plugin-system/api/#updatedashboardstatisticasyncstat-method","text":"","title":"UpdateDashboardStatisticAsync(stat) method"},{"location":"plugin-system/api/#summary_187","text":"Update an existing item on the dashboard front page.","title":"Summary"},{"location":"plugin-system/api/#parameters_78","text":"Name Type Description stat ChuckDeviceController.Plugin.IDashboardStatsItem Dashboard statistics item to update.","title":"Parameters"},{"location":"plugin-system/api/#updatedashboardstatisticsasyncstats-method","text":"","title":"UpdateDashboardStatisticsAsync(stats) method"},{"location":"plugin-system/api/#summary_188","text":"Update a list of existing items on the dashboard front page.","title":"Summary"},{"location":"plugin-system/api/#parameters_79","text":"Name Type Description stats System.Collections.Generic.IEnumerable{ChuckDeviceController.Plugin.IDashboardStatsItem} List of dashboard statistic items to update.","title":"Parameters"},{"location":"plugin-system/api/#iwebplugin-type","text":"","title":"IWebPlugin type"},{"location":"plugin-system/api/#namespace_40","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_189","text":"Interface contract allowing Mvc services registration and configuration","title":"Summary"},{"location":"plugin-system/api/#configureappbuilder-method","text":"","title":"Configure(appBuilder) method"},{"location":"plugin-system/api/#summary_190","text":"Configures the application to set up middlewares, map routing rules, etc.","title":"Summary"},{"location":"plugin-system/api/#parameters_80","text":"Name Type Description appBuilder Microsoft.AspNetCore.Builder.WebApplication Provides the mechanisms to configure an application's request pipeline.","title":"Parameters"},{"location":"plugin-system/api/#configuremvcbuildermvcbuilder-method","text":"","title":"ConfigureMvcBuilder(mvcBuilder) method"},{"location":"plugin-system/api/#summary_191","text":"Provides an opportunity for plugins to configure Mvc Builder.","title":"Summary"},{"location":"plugin-system/api/#parameters_81","text":"Name Type Description mvcBuilder Microsoft.Extensions.DependencyInjection.IMvcBuilder IMvcBuilder instance that can be configured.","title":"Parameters"},{"location":"plugin-system/api/#configureservicesservices-method","text":"","title":"ConfigureServices(services) method"},{"location":"plugin-system/api/#summary_192","text":"Register services into the IServiceCollection to use with Dependency Injection.","title":"Summary"},{"location":"plugin-system/api/#parameters_82","text":"Name Type Description services Microsoft.Extensions.DependencyInjection.IServiceCollection Specifies the contract for a collection of service descriptors.","title":"Parameters"},{"location":"plugin-system/api/#pluginapikeyattribute-type","text":"","title":"PluginApiKeyAttribute type"},{"location":"plugin-system/api/#namespace_41","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_193","text":"Defines the API key used by a plugin.","title":"Summary"},{"location":"plugin-system/api/#ctorapikey-constructor","text":"","title":"#ctor(apiKey) constructor"},{"location":"plugin-system/api/#summary_194","text":"Instantiates a new instance of the PluginApiKeyAttribute attribute class.","title":"Summary"},{"location":"plugin-system/api/#parameters_83","text":"Name Type Description apiKey System.String","title":"Parameters"},{"location":"plugin-system/api/#apikey-property","text":"","title":"ApiKey property"},{"location":"plugin-system/api/#summary_195","text":"Gets the API key string used by the plugin.","title":"Summary"},{"location":"plugin-system/api/#pluginbootstrapperserviceattribute-type","text":"","title":"PluginBootstrapperServiceAttribute type"},{"location":"plugin-system/api/#namespace_42","text":"ChuckDeviceController.Plugin.Services","title":"Namespace"},{"location":"plugin-system/api/#summary_196","text":"Assigns fields and properties in a plugin assembly with registered service implementations.","title":"Summary"},{"location":"plugin-system/api/#ctorservicetype-constructor","text":"","title":"#ctor(serviceType) constructor"},{"location":"plugin-system/api/#summary_197","text":"","title":"Summary"},{"location":"plugin-system/api/#parameters_84","text":"Name Type Description serviceType System.Type","title":"Parameters"},{"location":"plugin-system/api/#ctorservicetypeproxytype-constructor","text":"","title":"#ctor(serviceType,proxyType) constructor"},{"location":"plugin-system/api/#summary_198","text":"","title":"Summary"},{"location":"plugin-system/api/#parameters_85","text":"Name Type Description serviceType System.Type proxyType System.Type","title":"Parameters"},{"location":"plugin-system/api/#proxytype-property_2","text":"","title":"ProxyType property"},{"location":"plugin-system/api/#summary_199","text":"Gets or sets the bootstrap service implementation type.","title":"Summary"},{"location":"plugin-system/api/#servicetype-property_2","text":"","title":"ServiceType property"},{"location":"plugin-system/api/#summary_200","text":"Gets or sets the bootstrap service contract type.","title":"Summary"},{"location":"plugin-system/api/#pluginevent-type","text":"","title":"PluginEvent type"},{"location":"plugin-system/api/#namespace_43","text":"ChuckDeviceController.Plugin.EventBus.Events","title":"Namespace"},{"location":"plugin-system/api/#summary_201","text":"Plugin event for event bus service.","title":"Summary"},{"location":"plugin-system/api/#ctorpayload-constructor","text":"","title":"#ctor(payload) constructor"},{"location":"plugin-system/api/#summary_202","text":"","title":"Summary"},{"location":"plugin-system/api/#parameters_86","text":"Name Type Description payload System.String Plugin event payload to send.","title":"Parameters"},{"location":"plugin-system/api/#payload-property_1","text":"","title":"Payload property"},{"location":"plugin-system/api/#summary_203","text":"Gets or sets the payload data included in the event.","title":"Summary"},{"location":"plugin-system/api/#pluginobserver-type","text":"","title":"PluginObserver type"},{"location":"plugin-system/api/#namespace_44","text":"ChuckDeviceController.Plugin.EventBus.Observer","title":"Namespace"},{"location":"plugin-system/api/#summary_204","text":"","title":"Summary"},{"location":"plugin-system/api/#oncompleted-method","text":"","title":"OnCompleted() method"},{"location":"plugin-system/api/#summary_205","text":"","title":"Summary"},{"location":"plugin-system/api/#parameters_87","text":"This method has no parameters.","title":"Parameters"},{"location":"plugin-system/api/#onerrorerror-method","text":"","title":"OnError(error) method"},{"location":"plugin-system/api/#summary_206","text":"","title":"Summary"},{"location":"plugin-system/api/#parameters_88","text":"Name Type Description error System.Exception","title":"Parameters"},{"location":"plugin-system/api/#onnextvalue-method","text":"","title":"OnNext(value) method"},{"location":"plugin-system/api/#summary_207","text":"","title":"Summary"},{"location":"plugin-system/api/#parameters_89","text":"Name Type Description value ChuckDeviceController.Plugin.EventBus.IEvent","title":"Parameters"},{"location":"plugin-system/api/#unsubscribe-method_1","text":"","title":"Unsubscribe() method"},{"location":"plugin-system/api/#summary_208","text":"","title":"Summary"},{"location":"plugin-system/api/#parameters_90","text":"This method has no parameters.","title":"Parameters"},{"location":"plugin-system/api/#pluginserviceattribute-type","text":"","title":"PluginServiceAttribute type"},{"location":"plugin-system/api/#namespace_45","text":"ChuckDeviceController.Plugin.Services","title":"Namespace"},{"location":"plugin-system/api/#summary_209","text":"Registers plugin service classes that are marked with the 'PluginService' attribute with the host application in order to be used with dependency injection.","title":"Summary"},{"location":"plugin-system/api/#ctor-constructor","text":"","title":"#ctor() constructor"},{"location":"plugin-system/api/#summary_210","text":"","title":"Summary"},{"location":"plugin-system/api/#parameters_91","text":"This constructor has no parameters.","title":"Parameters"},{"location":"plugin-system/api/#ctorservicetypeproxytypeproviderlifetime-constructor","text":"","title":"#ctor(serviceType,proxyType,provider,lifetime) constructor"},{"location":"plugin-system/api/#summary_211","text":"","title":"Summary"},{"location":"plugin-system/api/#parameters_92","text":"Name Type Description serviceType System.Type proxyType System.Type provider ChuckDeviceController.Plugin.Services.PluginServiceProvider lifetime Microsoft.Extensions.DependencyInjection.ServiceLifetime","title":"Parameters"},{"location":"plugin-system/api/#lifetime-property_1","text":"","title":"Lifetime property"},{"location":"plugin-system/api/#summary_212","text":"Gets or sets the service lifetime for the plugin service.","title":"Summary"},{"location":"plugin-system/api/#provider-property_1","text":"","title":"Provider property"},{"location":"plugin-system/api/#summary_213","text":"Gets or sets who provided the service.","title":"Summary"},{"location":"plugin-system/api/#proxytype-property_3","text":"","title":"ProxyType property"},{"location":"plugin-system/api/#summary_214","text":"Gets or sets the service implementation type.","title":"Summary"},{"location":"plugin-system/api/#servicetype-property_3","text":"","title":"ServiceType property"},{"location":"plugin-system/api/#summary_215","text":"Gets or sets the service contract type.","title":"Summary"},{"location":"plugin-system/api/#pluginserviceprovider-type","text":"","title":"PluginServiceProvider type"},{"location":"plugin-system/api/#namespace_46","text":"ChuckDeviceController.Plugin.Services","title":"Namespace"},{"location":"plugin-system/api/#summary_216","text":"Determines who provided the plugin service to register with dependency injection.","title":"Summary"},{"location":"plugin-system/api/#host-constants","text":"","title":"Host constants"},{"location":"plugin-system/api/#summary_217","text":"Service was provided by the host application.","title":"Summary"},{"location":"plugin-system/api/#plugin-constants","text":"","title":"Plugin constants"},{"location":"plugin-system/api/#summary_218","text":"Service was provided by the plugin.","title":"Summary"},{"location":"plugin-system/api/#routegenerationtype-type","text":"","title":"RouteGenerationType type"},{"location":"plugin-system/api/#namespace_47","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_219","text":"Routing generation type","title":"Summary"},{"location":"plugin-system/api/#bootstrap-constants","text":"","title":"Bootstrap constants"},{"location":"plugin-system/api/#summary_220","text":"Generates a bootstrap route based on the circle size.","title":"Summary"},{"location":"plugin-system/api/#optimized-constants","text":"","title":"Optimized constants"},{"location":"plugin-system/api/#summary_221","text":"Generates an optimized route","title":"Summary"},{"location":"plugin-system/api/#randomized-constants","text":"","title":"Randomized constants"},{"location":"plugin-system/api/#summary_222","text":"Generates a randomized route","title":"Summary"},{"location":"plugin-system/api/#routegeneratoroptions-type","text":"","title":"RouteGeneratorOptions type"},{"location":"plugin-system/api/#namespace_48","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_223","text":"Routing generation options","title":"Summary"},{"location":"plugin-system/api/#maximumpoints-property","text":"","title":"MaximumPoints property"},{"location":"plugin-system/api/#summary_224","text":"Gets or sets a value to limit the amount of coordinate points to return when generating the route.","title":"Summary"},{"location":"plugin-system/api/#multipolygons-property","text":"","title":"MultiPolygons property"},{"location":"plugin-system/api/#summary_225","text":"Gets or sets the list of (geofences) used to generate the route in.","title":"Summary"},{"location":"plugin-system/api/#radiusm-property","text":"","title":"RadiusM property"},{"location":"plugin-system/api/#summary_226","text":"Gets or sets a value used to determine the radius between each coordinate when generating the route.","title":"Summary"},{"location":"plugin-system/api/#routetype-property","text":"","title":"RouteType property"},{"location":"plugin-system/api/#summary_227","text":"Gets or sets the route generation type to use.","title":"Summary"},{"location":"plugin-system/api/#settingsproperty-type","text":"","title":"SettingsProperty type"},{"location":"plugin-system/api/#namespace_49","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_228","text":"ISettingsProperty class implementation used by plugins to create UI setting elements in the dashboard.","title":"Summary"},{"location":"plugin-system/api/#ctor-constructor_1","text":"","title":"#ctor() constructor"},{"location":"plugin-system/api/#summary_229","text":"Instantiates a new instance of the SettingsProperty class.","title":"Summary"},{"location":"plugin-system/api/#parameters_93","text":"This constructor has no parameters.","title":"Parameters"},{"location":"plugin-system/api/#ctortextnametypevaluedefaultvaluedisplayindexisrequiredvalidateclassnamestylegroup-constructor","text":"","title":"#ctor(text,name,type,value,defaultValue,displayIndex,isRequired,validate,className,style,group) constructor"},{"location":"plugin-system/api/#summary_230","text":"Instantiates a new instance of the SettingsProperty class.","title":"Summary"},{"location":"plugin-system/api/#parameters_94","text":"Name Type Description text System.String Text displayed for the property, possibly used in a label. name System.String The ID and name of the element. type ChuckDeviceController.Plugin.SettingsPropertyType The type of HTML element to create. value System.Object Sets the initial value of the HTML element. defaultValue System.Object Default value of the HTML element, if it supports it. displayIndex System.UInt32 Defines the sorting of the HTML element created for the properties. isRequired System.Boolean Determining whether or not the HTML element value is required. validate System.Boolean Determines whether or not to validate the value of the HTML element. className System.String CSS class name to use. style System.String Raw CSS styling to use. group ChuckDeviceController.Plugin.SettingsPropertyGroup Element group the settings property will be placed in.","title":"Parameters"},{"location":"plugin-system/api/#class-property_2","text":"","title":"Class property"},{"location":"plugin-system/api/#summary_231","text":"Gets or sets the CSS class name to use.","title":"Summary"},{"location":"plugin-system/api/#defaultvalue-property_1","text":"","title":"DefaultValue property"},{"location":"plugin-system/api/#summary_232","text":"Gets or sets the default value to use for the element, if it supports it.","title":"Summary"},{"location":"plugin-system/api/#displayindex-property_4","text":"","title":"DisplayIndex property"},{"location":"plugin-system/api/#summary_233","text":"Gets or sets a value used for sorting each HTML element created for the properties.","title":"Summary"},{"location":"plugin-system/api/#group-property_1","text":"","title":"Group property"},{"location":"plugin-system/api/#summary_234","text":"Gets or sets the group the settings property will be in.","title":"Summary"},{"location":"plugin-system/api/#isrequired-property_1","text":"","title":"IsRequired property"},{"location":"plugin-system/api/#summary_235","text":"Gets or sets a value determining whether the HTML element value is required.","title":"Summary"},{"location":"plugin-system/api/#name-property_4","text":"","title":"Name property"},{"location":"plugin-system/api/#summary_236","text":"Gets or sets the ID and name of the element.","title":"Summary"},{"location":"plugin-system/api/#style-property_2","text":"","title":"Style property"},{"location":"plugin-system/api/#summary_237","text":"Gets or sets the raw CSS styling to use.","title":"Summary"},{"location":"plugin-system/api/#text-property_6","text":"","title":"Text property"},{"location":"plugin-system/api/#summary_238","text":"Gets or sets the displayed text for the property, possibly used in a label.","title":"Summary"},{"location":"plugin-system/api/#type-property_2","text":"","title":"Type property"},{"location":"plugin-system/api/#summary_239","text":"Gets or sets the type of HTML element to create.","title":"Summary"},{"location":"plugin-system/api/#validate-property_1","text":"","title":"Validate property"},{"location":"plugin-system/api/#summary_240","text":"Gets or sets a value determining whether to validate the value of the HTML element.","title":"Summary"},{"location":"plugin-system/api/#value-property_5","text":"","title":"Value property"},{"location":"plugin-system/api/#summary_241","text":"Gets or sets the initial value to set for the element.","title":"Summary"},{"location":"plugin-system/api/#settingspropertygroup-type","text":"","title":"SettingsPropertyGroup type"},{"location":"plugin-system/api/#namespace_50","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_242","text":"ISettingsPropertyGroup class implementation for grouping .","title":"Summary"},{"location":"plugin-system/api/#ctor-constructor_2","text":"","title":"#ctor() constructor"},{"location":"plugin-system/api/#summary_243","text":"Instantiates a new instance of the SettingsPropertyGroup class.","title":"Summary"},{"location":"plugin-system/api/#parameters_95","text":"This constructor has no parameters.","title":"Parameters"},{"location":"plugin-system/api/#ctoridtextdisplayindex-constructor","text":"","title":"#ctor(id,text,displayIndex) constructor"},{"location":"plugin-system/api/#summary_244","text":"Instantiates a new instance of the SettingsPropertyGroup class.","title":"Summary"},{"location":"plugin-system/api/#parameters_96","text":"Name Type Description id System.String Unique identifier for the settings property group. text System.String Text displayed for the settings property group. displayIndex System.UInt32 Sorting index used with each HTML element created for the grouped properties.","title":"Parameters"},{"location":"plugin-system/api/#displayindex-property_5","text":"","title":"DisplayIndex property"},{"location":"plugin-system/api/#summary_245","text":"Gets or sets a value used for sorting each HTML element created for the properties.","title":"Summary"},{"location":"plugin-system/api/#id-property_2","text":"","title":"Id property"},{"location":"plugin-system/api/#summary_246","text":"Gets or sets the unique identifier for the settings property group.","title":"Summary"},{"location":"plugin-system/api/#text-property_7","text":"","title":"Text property"},{"location":"plugin-system/api/#summary_247","text":"Gets or sets the text to display for the settings property group.","title":"Summary"},{"location":"plugin-system/api/#equalsobj-method","text":"","title":"Equals(obj) method"},{"location":"plugin-system/api/#summary_248","text":"","title":"Summary"},{"location":"plugin-system/api/#returns_37","text":"","title":"Returns"},{"location":"plugin-system/api/#parameters_97","text":"Name Type Description obj System.Object","title":"Parameters"},{"location":"plugin-system/api/#equalsother-method","text":"","title":"Equals(other) method"},{"location":"plugin-system/api/#summary_249","text":"","title":"Summary"},{"location":"plugin-system/api/#returns_38","text":"","title":"Returns"},{"location":"plugin-system/api/#parameters_98","text":"Name Type Description other ChuckDeviceController.Plugin.SettingsPropertyGroup","title":"Parameters"},{"location":"plugin-system/api/#gethashcode-method","text":"","title":"GetHashCode() method"},{"location":"plugin-system/api/#summary_250","text":"","title":"Summary"},{"location":"plugin-system/api/#returns_39","text":"","title":"Returns"},{"location":"plugin-system/api/#parameters_99","text":"This method has no parameters.","title":"Parameters"},{"location":"plugin-system/api/#settingspropertytype-type","text":"","title":"SettingsPropertyType type"},{"location":"plugin-system/api/#namespace_51","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_251","text":"Defines the type of HTML element to create for the settings property.","title":"Summary"},{"location":"plugin-system/api/#checkbox-constants","text":"","title":"CheckBox constants"},{"location":"plugin-system/api/#summary_252","text":"Settings property type is a checkbox field.","title":"Summary"},{"location":"plugin-system/api/#number-constants","text":"","title":"Number constants"},{"location":"plugin-system/api/#summary_253","text":"Settings property type is a numeric selector.","title":"Summary"},{"location":"plugin-system/api/#select-constants","text":"","title":"Select constants"},{"location":"plugin-system/api/#summary_254","text":"Settings property type is a select item list element.","title":"Summary"},{"location":"plugin-system/api/#text-constants","text":"","title":"Text constants"},{"location":"plugin-system/api/#summary_255","text":"Settings property type is a text field.","title":"Summary"},{"location":"plugin-system/api/#textarea-constants","text":"","title":"TextArea constants"},{"location":"plugin-system/api/#summary_256","text":"Settings property type is a text area.","title":"Summary"},{"location":"plugin-system/api/#settingstab-type","text":"","title":"SettingsTab type"},{"location":"plugin-system/api/#namespace_52","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_257","text":"ISettingsTab class implementation for adding UI settings from plugins to separate tabs.","title":"Summary"},{"location":"plugin-system/api/#ctor-constructor_3","text":"","title":"#ctor() constructor"},{"location":"plugin-system/api/#summary_258","text":"Instantiates a new instance of the SettingsTab class.","title":"Summary"},{"location":"plugin-system/api/#parameters_100","text":"This constructor has no parameters.","title":"Parameters"},{"location":"plugin-system/api/#ctoridtextanchordisplayindexclassnamestyle-constructor","text":"","title":"#ctor(id,text,anchor,displayIndex,className,style) constructor"},{"location":"plugin-system/api/#summary_259","text":"Instantiates a new instance of the SettingsTab class.","title":"Summary"},{"location":"plugin-system/api/#parameters_101","text":"Name Type Description id System.String Unique identifier of the tab. text System.String Text displayed for the tab header. anchor System.String The HTML anchor tag name of the tab. displayIndex System.UInt32 Display index of the tab in the tab list. className System.String CSS class name to use. style System.String Raw CSS styling to use.","title":"Parameters"},{"location":"plugin-system/api/#anchor-property_1","text":"","title":"Anchor property"},{"location":"plugin-system/api/#summary_260","text":"Gets or sets the html anchor tag name of the tab. Note: No hash symbol needed.","title":"Summary"},{"location":"plugin-system/api/#class-property_3","text":"","title":"Class property"},{"location":"plugin-system/api/#summary_261","text":"Gets or sets the CSS class name to use.","title":"Summary"},{"location":"plugin-system/api/#displayindex-property_6","text":"","title":"DisplayIndex property"},{"location":"plugin-system/api/#summary_262","text":"Gets or sets the display index of the tab in the tab list.","title":"Summary"},{"location":"plugin-system/api/#id-property_3","text":"","title":"Id property"},{"location":"plugin-system/api/#summary_263","text":"Gets or sets the unique identifier of the tab.","title":"Summary"},{"location":"plugin-system/api/#style-property_3","text":"","title":"Style property"},{"location":"plugin-system/api/#summary_264","text":"Gets or sets the raw CSS styling to use.","title":"Summary"},{"location":"plugin-system/api/#text-property_8","text":"","title":"Text property"},{"location":"plugin-system/api/#summary_265","text":"Gets or sets the display text of the tab.","title":"Summary"},{"location":"plugin-system/api/#sidebaritem-type","text":"","title":"SidebarItem type"},{"location":"plugin-system/api/#namespace_53","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_266","text":"Navigation bar header plugin contract implementation.","title":"Summary"},{"location":"plugin-system/api/#ctor-constructor_4","text":"","title":"#ctor() constructor"},{"location":"plugin-system/api/#summary_267","text":"Instantiates a new navbar header instance using default property values.","title":"Summary"},{"location":"plugin-system/api/#parameters_102","text":"This constructor has no parameters.","title":"Parameters"},{"location":"plugin-system/api/#ctortextcontrollernameactionnameicondisplayindexisdropdowndropdownitemsisdisabledisseparator-constructor","text":"","title":"#ctor(text,controllerName,actionName,icon,displayIndex,isDropdown,dropdownItems,isDisabled,isSeparator) constructor"},{"location":"plugin-system/api/#summary_268","text":"Instantiates a new navbar header instance using the specified property values.","title":"Summary"},{"location":"plugin-system/api/#parameters_103","text":"Name Type Description text System.String controllerName System.String actionName System.String icon System.String displayIndex System.UInt32 isDropdown System.Boolean dropdownItems System.Collections.Generic.IEnumerable{ChuckDeviceController.Plugin.SidebarItem} isDisabled System.Boolean isSeparator System.Boolean","title":"Parameters"},{"location":"plugin-system/api/#actionname-property_3","text":"","title":"ActionName property"},{"location":"plugin-system/api/#summary_269","text":"Gets or sets the controller action name to execute when the navbar header is clicked.","title":"Summary"},{"location":"plugin-system/api/#controllername-property_3","text":"","title":"ControllerName property"},{"location":"plugin-system/api/#summary_270","text":"Gets or sets the controller name the action name should relate to.","title":"Summary"},{"location":"plugin-system/api/#displayindex-property_7","text":"","title":"DisplayIndex property"},{"location":"plugin-system/api/#summary_271","text":"Gets or sets the numeric display index order of the navbar header in the list of navbar headers.","title":"Summary"},{"location":"plugin-system/api/#dropdownitems-property","text":"","title":"DropdownItems property"},{"location":"plugin-system/api/#summary_272","text":"Gets or sets a list of navbar header dropdown items.","title":"Summary"},{"location":"plugin-system/api/#icon-property_3","text":"","title":"Icon property"},{"location":"plugin-system/api/#summary_273","text":"Gets or sets the FontAwesome v6 icon key to use for the navbar header. https://fontawesome.com/icons","title":"Summary"},{"location":"plugin-system/api/#isdisabled-property_1","text":"","title":"IsDisabled property"},{"location":"plugin-system/api/#summary_274","text":"Gets or sets a value determining whether the navbar header is disabled or not.","title":"Summary"},{"location":"plugin-system/api/#isdropdown-property","text":"","title":"IsDropdown property"},{"location":"plugin-system/api/#summary_275","text":"Gets or sets a value determining whether the navbar header should be treated as a dropdown.","title":"Summary"},{"location":"plugin-system/api/#isseparator-property_1","text":"","title":"IsSeparator property"},{"location":"plugin-system/api/#summary_276","text":"Gets or sets a value determining whether to insert a separator instead of a dropdown item.","title":"Summary"},{"location":"plugin-system/api/#text-property_9","text":"","title":"Text property"},{"location":"plugin-system/api/#summary_277","text":"Gets or sets the text to display for this navbar header.","title":"Summary"},{"location":"plugin-system/api/#staticfileslocation-type","text":"","title":"StaticFilesLocation type"},{"location":"plugin-system/api/#namespace_54","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_278","text":"Determines the location of any static files and folders. i.e. 'wwwroot'","title":"Summary"},{"location":"plugin-system/api/#external-constants","text":"","title":"External constants"},{"location":"plugin-system/api/#summary_279","text":"Static files are located externally on the file system.","title":"Summary"},{"location":"plugin-system/api/#none-constants","text":"","title":"None constants"},{"location":"plugin-system/api/#summary_280","text":"No static files or folders from the plugin.","title":"Summary"},{"location":"plugin-system/api/#resources-constants","text":"","title":"Resources constants"},{"location":"plugin-system/api/#summary_281","text":"Static files are embedded in a resource file within the plugin.","title":"Summary"},{"location":"plugin-system/api/#staticfileslocationattribute-type","text":"","title":"StaticFilesLocationAttribute type"},{"location":"plugin-system/api/#namespace_55","text":"ChuckDeviceController.Plugin","title":"Namespace"},{"location":"plugin-system/api/#summary_282","text":"Defines where the static files or folders (i.e. `wwwroot` and `Views`) will be located, relevant to the plugin's path.","title":"Summary"},{"location":"plugin-system/api/#ctorviewswebroot-constructor","text":"","title":"#ctor(views,webRoot) constructor"},{"location":"plugin-system/api/#summary_283","text":"Instantiates a new instance of the StaticFilesLocationAttribute attribute class.","title":"Summary"},{"location":"plugin-system/api/#parameters_104","text":"Name Type Description views ChuckDeviceController.Plugin.StaticFilesLocation Determines where the Mvc `Views` folder is located. webRoot ChuckDeviceController.Plugin.StaticFilesLocation Determines where the `wwwroot` folder is located.","title":"Parameters"},{"location":"plugin-system/api/#views-property","text":"","title":"Views property"},{"location":"plugin-system/api/#summary_284","text":"Gets an enum value defining where the plugin's Mvc Views folder is located. i.e. `Views` folder.","title":"Summary"},{"location":"plugin-system/api/#webroot-property","text":"","title":"WebRoot property"},{"location":"plugin-system/api/#summary_285","text":"Gets an enum value determining where any web resource files are located. i.e. `wwwroot` web root folder.","title":"Summary"},{"location":"plugin-system/create-a-plugin/","text":"Plugin System \uf0c1 ASP.NET Core Documentation Plugins Included Requirements \uf0c1 Visual Studio 2022 ChuckPlugin Templates (optional but recommended) Creating a Plugin \uf0c1 Microsoft's ASP.NET Core MVC Views and Razor Pages are very similar to Mustache, Handlebars.js, and other templating engines. Open Visual Studio 2022 Select Create a new project Click the search box showing Search for templates Enter the search keyword chuck Select the plugin type you want to use Start developing your plugin Library References \uf0c1 You may reference any of the existing ChuckDeviceController.*.dll project libaries in your plugins. When building and deploying plugins you've developed, do not copy any ChuckDeviceController.*.dll libraries to the src/ChuckDeviceConfigurator/bin/debug/plugins/%PluginFolderName%/ plugin folder. Any 3rd party libraries are fine to copy. The included plugin build scripts located in the ./scripts folder will exclude any ChuckDeviceController.*.dll libraries automatically.","title":"Create a Plugin"},{"location":"plugin-system/create-a-plugin/#plugin-system","text":"ASP.NET Core Documentation Plugins Included","title":"Plugin System"},{"location":"plugin-system/create-a-plugin/#requirements","text":"Visual Studio 2022 ChuckPlugin Templates (optional but recommended)","title":"Requirements"},{"location":"plugin-system/create-a-plugin/#creating-a-plugin","text":"Microsoft's ASP.NET Core MVC Views and Razor Pages are very similar to Mustache, Handlebars.js, and other templating engines. Open Visual Studio 2022 Select Create a new project Click the search box showing Search for templates Enter the search keyword chuck Select the plugin type you want to use Start developing your plugin","title":"Creating a Plugin"},{"location":"plugin-system/create-a-plugin/#library-references","text":"You may reference any of the existing ChuckDeviceController.*.dll project libaries in your plugins. When building and deploying plugins you've developed, do not copy any ChuckDeviceController.*.dll libraries to the src/ChuckDeviceConfigurator/bin/debug/plugins/%PluginFolderName%/ plugin folder. Any 3rd party libraries are fine to copy. The included plugin build scripts located in the ./scripts folder will exclude any ChuckDeviceController.*.dll libraries automatically.","title":"Library References"},{"location":"plugin-system/entity-interfaces/","text":"Plugin Entity Interface Contracts (IDatabaseHost) \uf0c1 All available database entity model interface contracts. Controller Entity Types \uf0c1 IAccount IAssignment IAssignmentGroup IDevice IDeviceGroup IGeofence IInstance IIvList IWebhook IAccount \uf0c1 Properties: string Username; string Password; ushort Level; ulong? FirstWarningTimestamp; ulong? FailedTimestamp; string? Failed; ulong? LastEncounterTime; double? LastEncounterLatitude; double? LastEncounterLongitude; uint Spins; ushort Tutorial; ulong? CreationTimestamp; bool? HasWarn; ulong? WarnExpireTimestamp; bool? WarnMessageAcknowledged; bool? SuspendedMessageAcknowledged; bool? WasSuspended; bool? IsBanned; ulong? LastUsedTimestamp; string? GroupName; IAssignment \uf0c1 Properties: uint Id string InstanceName string? SourceInstanceName string? DeviceUuid uint Time DateTime? Date string? DeviceGroupName bool Enabled IAssignmentGroup \uf0c1 Properties: string Name List<uint> AssignmentIds IDevice \uf0c1 Properties: string Uuid string? InstanceName string? AccountUsername string? LastHost double? LastLatitude double? LastLongitude ulong? LastSeen // Last job request requested bool IsPendingAccountSwitch // used internally IDeviceGroup \uf0c1 Properties: string Name List<string> DeviceUuids IGeofence \uf0c1 Properties: string Name GeofenceType Type GeofenceData? Data IInstance \uf0c1 Properties: string Name InstanceType Type ushort MinimumLevel ushort MaximumLevel List<string> Geofences InstanceData? Data IIvList \uf0c1 Properties: string Name List<string> PokemonIds IWebhook \uf0c1 Properties: string Name List<WebhookType> Types double Delay string Url bool Enabled List<string> Geofences WebhookData? Data Map Entity Types \uf0c1 ICell IGym IGymDefender IGymTrainer IIncident IPokemon IPokestop ISpawnpoint IWeather ICell \uf0c1 Properties: ulong Id ushort Level double Latitude double Longitude ulong Updated IGym \uf0c1 Properties: string Id string? Name string? Url double Latitude double Longitude ulong LastModifiedTimestamp ulong? RaidEndTimestamp ulong? RaidSpawnTimestamp ulong? RaidBattleTimestamp ulong Updated uint? RaidPokemonId uint GuardingPokemonId ushort AvailableSlots // TODO: Team Team ushort? RaidLevel bool IsEnabled bool IsExRaidEligible bool InBattle uint? RaidPokemonMove1 uint? RaidPokemonMove2 uint? RaidPokemonForm uint? RaidPokemonCostume uint? RaidPokemonCP uint? RaidPokemonEvolution ushort? RaidPokemonGender bool? RaidIsExclusive ulong CellId bool IsDeleted int TotalCP ulong FirstSeenTimestamp uint? SponsorId bool? IsArScanEligible uint? PowerUpPoints ushort? PowerUpLevel ulong? PowerUpEndTimestamp IGymDefender \uf0c1 Properties: ulong Id string Nickname ushort PokemonId ushort DisplayPokemonId ushort Form ushort Costume // TODO: Gender Gender uint CpWhenDeployed uint CpNow uint Cp uint BattlesWon uint BattlesLost double BerryValue uint TimesFed ulong DeploymentDuration string? TrainerName string? FortId ushort AttackIV ushort DefenseIV ushort StaminaIV ushort Move1 ushort Move2 ushort Move3 uint BattlesAttacked uint BattlesDefended double BuddyKmWalked uint BuddyCandyAwarded uint CoinsReturned bool FromFort bool HatchedFromEgg bool IsBad bool IsEgg bool IsLucky bool IsShiny uint PvpCombatWon uint PvpCombatTotal uint NpcCombatWon uint NpcCombatTotal double HeightM double WeightKg ulong Updated IGymTrainer \uf0c1 Properties: string Name ushort Level // TODO: Team TeamId uint BattlesWon double KmWalked ulong PokemonCaught ulong Experience ulong CombatRank ulong CombatRating bool HasSharedExPass ushort GymBadgeType ulong Updated IIncident \uf0c1 Properties: string Id string? PokestopId ulong Start ulong Expiration uint DisplayType uint Style ushort Character ulong Updated IPokemon \uf0c1 Properties: string Id uint PokemonId double Latitude double Longitude ulong? SpawnId ulong ExpireTimestamp ushort? AttackIV ushort? DefenseIV ushort? StaminaIV double? IV ushort? Move1 ushort? Move2 ushort? Gender ushort? Form ushort? Costume ushort? CP ushort? Level double? Weight double? Size ushort? Weather bool? IsShiny string? Username string? PokestopId ulong? FirstSeenTimestamp ulong Updated ulong Changed ulong CellId bool IsExpireTimestampVerified double? Capture1 double? Capture2 double? Capture3 bool IsDitto uint? DisplayPokemonId Dictionary<string, dynamic>? PvpRankings double BaseHeight double BaseWeight bool IsEvent SeenType SeenType IPokestop \uf0c1 Properties: string Id double Latitude double Longitude string? Name string? Url ushort LureId ulong? LureExpireTimestamp ulong LastModifiedTimestamp ulong Updated bool IsEnabled ulong CellId bool IsDeleted ulong FirstSeenTimestamp uint? SponsorId bool IsArScanEligible uint? PowerUpPoints ushort? PowerUpLevel ulong? PowerUpEndTimestamp #region Quests uint? QuestType string? QuestTemplate string? QuestTitle ushort? QuestTarget ulong? QuestTimestamp #region Virtual Columns (Automatically Generated) ushort? QuestRewardType ushort? QuestItemId ushort? QuestRewardAmount uint? QuestPokemonId #endregion List<Dictionary<string, dynamic>>? QuestConditions List<Dictionary<string, dynamic>>? QuestRewards uint? AlternativeQuestType string? AlternativeQuestTemplate string? AlternativeQuestTitle ushort? AlternativeQuestTarget ulong? AlternativeQuestTimestamp #region Virtual Columns (Automatically Generated) ushort? AlternativeQuestRewardType ushort? AlternativeQuestItemId ushort? AlternativeQuestRewardAmount uint? AlternativeQuestPokemonId #endregion List<Dictionary<string, dynamic>>? AlternativeQuestConditions List<Dictionary<string, dynamic>>? AlternativeQuestRewards #endregion ISpawnpoint \uf0c1 Properties: ulong Id double Latitude double Longitude uint? DespawnSecond ulong Updated ulong? LastSeen IWeather \uf0c1 Properties: long Id ushort Level double Latitude double Longitude // TODO: WeatherCondition GameplayCondition ushort WindDirection ushort CloudLevel ushort RainLevel ushort WindLevel ushort SnowLevel ushort FogLevel ushort SpecialEffectLevel ushort? Severity bool? WarnWeather ulong Updated","title":"Entity Interfaces"},{"location":"plugin-system/entity-interfaces/#plugin-entity-interface-contracts-idatabasehost","text":"All available database entity model interface contracts.","title":"Plugin Entity Interface Contracts (IDatabaseHost)"},{"location":"plugin-system/entity-interfaces/#controller-entity-types","text":"IAccount IAssignment IAssignmentGroup IDevice IDeviceGroup IGeofence IInstance IIvList IWebhook","title":"Controller Entity Types"},{"location":"plugin-system/entity-interfaces/#iaccount","text":"Properties: string Username; string Password; ushort Level; ulong? FirstWarningTimestamp; ulong? FailedTimestamp; string? Failed; ulong? LastEncounterTime; double? LastEncounterLatitude; double? LastEncounterLongitude; uint Spins; ushort Tutorial; ulong? CreationTimestamp; bool? HasWarn; ulong? WarnExpireTimestamp; bool? WarnMessageAcknowledged; bool? SuspendedMessageAcknowledged; bool? WasSuspended; bool? IsBanned; ulong? LastUsedTimestamp; string? GroupName;","title":"IAccount"},{"location":"plugin-system/entity-interfaces/#iassignment","text":"Properties: uint Id string InstanceName string? SourceInstanceName string? DeviceUuid uint Time DateTime? Date string? DeviceGroupName bool Enabled","title":"IAssignment"},{"location":"plugin-system/entity-interfaces/#iassignmentgroup","text":"Properties: string Name List<uint> AssignmentIds","title":"IAssignmentGroup"},{"location":"plugin-system/entity-interfaces/#idevice","text":"Properties: string Uuid string? InstanceName string? AccountUsername string? LastHost double? LastLatitude double? LastLongitude ulong? LastSeen // Last job request requested bool IsPendingAccountSwitch // used internally","title":"IDevice"},{"location":"plugin-system/entity-interfaces/#idevicegroup","text":"Properties: string Name List<string> DeviceUuids","title":"IDeviceGroup"},{"location":"plugin-system/entity-interfaces/#igeofence","text":"Properties: string Name GeofenceType Type GeofenceData? Data","title":"IGeofence"},{"location":"plugin-system/entity-interfaces/#iinstance","text":"Properties: string Name InstanceType Type ushort MinimumLevel ushort MaximumLevel List<string> Geofences InstanceData? Data","title":"IInstance"},{"location":"plugin-system/entity-interfaces/#iivlist","text":"Properties: string Name List<string> PokemonIds","title":"IIvList"},{"location":"plugin-system/entity-interfaces/#iwebhook","text":"Properties: string Name List<WebhookType> Types double Delay string Url bool Enabled List<string> Geofences WebhookData? Data","title":"IWebhook"},{"location":"plugin-system/entity-interfaces/#map-entity-types","text":"ICell IGym IGymDefender IGymTrainer IIncident IPokemon IPokestop ISpawnpoint IWeather","title":"Map Entity Types"},{"location":"plugin-system/entity-interfaces/#icell","text":"Properties: ulong Id ushort Level double Latitude double Longitude ulong Updated","title":"ICell"},{"location":"plugin-system/entity-interfaces/#igym","text":"Properties: string Id string? Name string? Url double Latitude double Longitude ulong LastModifiedTimestamp ulong? RaidEndTimestamp ulong? RaidSpawnTimestamp ulong? RaidBattleTimestamp ulong Updated uint? RaidPokemonId uint GuardingPokemonId ushort AvailableSlots // TODO: Team Team ushort? RaidLevel bool IsEnabled bool IsExRaidEligible bool InBattle uint? RaidPokemonMove1 uint? RaidPokemonMove2 uint? RaidPokemonForm uint? RaidPokemonCostume uint? RaidPokemonCP uint? RaidPokemonEvolution ushort? RaidPokemonGender bool? RaidIsExclusive ulong CellId bool IsDeleted int TotalCP ulong FirstSeenTimestamp uint? SponsorId bool? IsArScanEligible uint? PowerUpPoints ushort? PowerUpLevel ulong? PowerUpEndTimestamp","title":"IGym"},{"location":"plugin-system/entity-interfaces/#igymdefender","text":"Properties: ulong Id string Nickname ushort PokemonId ushort DisplayPokemonId ushort Form ushort Costume // TODO: Gender Gender uint CpWhenDeployed uint CpNow uint Cp uint BattlesWon uint BattlesLost double BerryValue uint TimesFed ulong DeploymentDuration string? TrainerName string? FortId ushort AttackIV ushort DefenseIV ushort StaminaIV ushort Move1 ushort Move2 ushort Move3 uint BattlesAttacked uint BattlesDefended double BuddyKmWalked uint BuddyCandyAwarded uint CoinsReturned bool FromFort bool HatchedFromEgg bool IsBad bool IsEgg bool IsLucky bool IsShiny uint PvpCombatWon uint PvpCombatTotal uint NpcCombatWon uint NpcCombatTotal double HeightM double WeightKg ulong Updated","title":"IGymDefender"},{"location":"plugin-system/entity-interfaces/#igymtrainer","text":"Properties: string Name ushort Level // TODO: Team TeamId uint BattlesWon double KmWalked ulong PokemonCaught ulong Experience ulong CombatRank ulong CombatRating bool HasSharedExPass ushort GymBadgeType ulong Updated","title":"IGymTrainer"},{"location":"plugin-system/entity-interfaces/#iincident","text":"Properties: string Id string? PokestopId ulong Start ulong Expiration uint DisplayType uint Style ushort Character ulong Updated","title":"IIncident"},{"location":"plugin-system/entity-interfaces/#ipokemon","text":"Properties: string Id uint PokemonId double Latitude double Longitude ulong? SpawnId ulong ExpireTimestamp ushort? AttackIV ushort? DefenseIV ushort? StaminaIV double? IV ushort? Move1 ushort? Move2 ushort? Gender ushort? Form ushort? Costume ushort? CP ushort? Level double? Weight double? Size ushort? Weather bool? IsShiny string? Username string? PokestopId ulong? FirstSeenTimestamp ulong Updated ulong Changed ulong CellId bool IsExpireTimestampVerified double? Capture1 double? Capture2 double? Capture3 bool IsDitto uint? DisplayPokemonId Dictionary<string, dynamic>? PvpRankings double BaseHeight double BaseWeight bool IsEvent SeenType SeenType","title":"IPokemon"},{"location":"plugin-system/entity-interfaces/#ipokestop","text":"Properties: string Id double Latitude double Longitude string? Name string? Url ushort LureId ulong? LureExpireTimestamp ulong LastModifiedTimestamp ulong Updated bool IsEnabled ulong CellId bool IsDeleted ulong FirstSeenTimestamp uint? SponsorId bool IsArScanEligible uint? PowerUpPoints ushort? PowerUpLevel ulong? PowerUpEndTimestamp #region Quests uint? QuestType string? QuestTemplate string? QuestTitle ushort? QuestTarget ulong? QuestTimestamp #region Virtual Columns (Automatically Generated) ushort? QuestRewardType ushort? QuestItemId ushort? QuestRewardAmount uint? QuestPokemonId #endregion List<Dictionary<string, dynamic>>? QuestConditions List<Dictionary<string, dynamic>>? QuestRewards uint? AlternativeQuestType string? AlternativeQuestTemplate string? AlternativeQuestTitle ushort? AlternativeQuestTarget ulong? AlternativeQuestTimestamp #region Virtual Columns (Automatically Generated) ushort? AlternativeQuestRewardType ushort? AlternativeQuestItemId ushort? AlternativeQuestRewardAmount uint? AlternativeQuestPokemonId #endregion List<Dictionary<string, dynamic>>? AlternativeQuestConditions List<Dictionary<string, dynamic>>? AlternativeQuestRewards #endregion","title":"IPokestop"},{"location":"plugin-system/entity-interfaces/#ispawnpoint","text":"Properties: ulong Id double Latitude double Longitude uint? DespawnSecond ulong Updated ulong? LastSeen","title":"ISpawnpoint"},{"location":"plugin-system/entity-interfaces/#iweather","text":"Properties: long Id ushort Level double Latitude double Longitude // TODO: WeatherCondition GameplayCondition ushort WindDirection ushort CloudLevel ushort RainLevel ushort WindLevel ushort SnowLevel ushort FogLevel ushort SpecialEffectLevel ushort? Severity bool? WarnWeather ulong Updated","title":"IWeather"},{"location":"plugin-system/examples/","text":"Plugin Examples \uf0c1 TestPlugin \uf0c1 namespace TestPlugin; using System.Collections.Generic; using Microsoft.AspNetCore.Builder; using Microsoft.AspNetCore.Hosting; using Microsoft.AspNetCore.Http; using Microsoft.AspNetCore.Mvc.Razor; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Logging; using ChuckDeviceController.Data.Abstractions; using ChuckDeviceController.Data.Common; using ChuckDeviceController.Extensions.Http; using ChuckDeviceController.Extensions.Json; using ChuckDeviceController.Geometry.Models; using ChuckDeviceController.Plugin; using ChuckDeviceController.Plugin.EventBus; using ChuckDeviceController.Plugin.EventBus.Events; using ChuckDeviceController.Plugin.Services; using JobControllers; //http://127.0.0.1:8881/plugin/v1 //http://127.0.0.1:8881/Test /// <summary> /// Example plugin demonstrating the capabilities /// of the plugin system and how it works. /// </summary> [ // Specifies where the 'wwwroot' folder will be if any are used or needed. // Possible options: embedded resources, local/external, or none. StaticFilesLocation(StaticFilesLocation.Resources, StaticFilesLocation.External), // Specify the plugin API key to authorize with the host application. PluginApiKey(\"CDC-328TVvD7o85TNbNhjLE0JysVMbOxjXKT\"), ] public class TestPlugin : IPlugin, IDatabaseEvents, IJobControllerServiceEvents, IUiEvents, ISettingsPropertyEvents { #region Plugin Host Variables // Plugin host variables are interface contracts that are used // to interact with services the host application has registered // and is running. They can be initialized by the constructor // using dependency injection or by decorating the field with // the 'PluginBootstrapperService' attribute. The host application // will look for any fields or properties decorated with the // 'PluginBootstrapperService' and initialize them with the // related service class. // Used for logging messages to the host application from the plugin private readonly ILoggingHost _loggingHost; // Interacts with the job controller instance service to add new job // controllers. private readonly IJobControllerServiceHost _jobControllerHost; // Retrieve data from the database, READONLY. // // When decorated with the 'PluginBootstrapperService' attribute, the // property will be initalized by the host's service implementation. [PluginBootstrapperService(typeof(IDatabaseHost))] private readonly IDatabaseHost _databaseHost = null!; // Translate text based on the set locale in the host application. private readonly ILocalizationHost _localeHost; // Expand your plugin implementation by adding user interface elements // and pages to the dashboard. // // When decorated with the 'PluginBootstrapperService' attribute, the // property will be initalized by the host's service implementation. [PluginBootstrapperService(typeof(IUiHost))] private readonly IUiHost _uiHost = null!; // Manage files local to your plugin's folder using saving and loading // implementations. // // When decorated with the 'PluginBootstrapperService' attribute, the // property will be initalized by the host's service implementation. [PluginBootstrapperService(typeof(IFileStorageHost))] private readonly IFileStorageHost _fileStorageHost = null!; [PluginBootstrapperService(typeof(IConfigurationHost))] private readonly IConfigurationHost _configurationHost = null!; private readonly IGeofenceServiceHost _geofenceServiceHost; private readonly IInstanceServiceHost _instanceServiceHost; private readonly IEventAggregatorHost _eventAggregatorHost; private readonly IAuthorizeHost _authHost; #endregion #region Plugin Metadata Properties /// <summary> /// Gets the name of the plugin to use. /// </summary> public string Name => \"TestPlugin\"; /// <summary> /// Gets a brief description about the plugin explaining how it /// works and what it does. /// </summary> public string Description => \"Demostrates the capabilities of the plugin system.\"; /// <summary> /// Gets the name of the author/creator of the plugin. /// </summary> public string Author => \"versx\"; /// <summary> /// Gets the current version of the plugin. /// </summary> public Version Version => new(1, 0, 0); #endregion #region Plugin Host Properties /// <summary> /// Gets or sets the UiHost host service implementation. This is /// initialized separately from the '_uiHost' field that is decorated. /// </summary> /// <remarks> /// When decorated with the 'PluginBootstrapperService' attribute, the /// property will be initalized by the host's service implementation. /// </remarks> [PluginBootstrapperService(typeof(IUiHost))] public IUiHost UiHost { get; set; } = null!; #endregion #region Constructor /// <summary> /// Instantiates a new instance of <see cref=\"IPlugin\"/> with the host /// application. It is important to only create one constructor for the /// class that inherits the <see cref=\"IPlugin\"/> interface contract. /// Failure to do so will prevent the plugin from loading. /// /// This is so the host application knows which constructor to use /// when it instantiates an instance with the host handlers for each /// parameter, essentially dependency injection. /// </summary> /// <param name=\"loggingHost\">Logging host handler.</param> /// <param name=\"localeHost\">Localization host handler.</param> /// <param name=\"jobControllerServiceHost\"></param> /// <param name=\"instanceServiceHost\"></param> /// <param name=\"geofenceServiceHost\"></param> /// <param name=\"eventAggregatorHost\"></param> /// <param name=\"authHost\"></param> public TestPlugin( ILoggingHost loggingHost, ILocalizationHost localeHost, IJobControllerServiceHost jobControllerServiceHost, IInstanceServiceHost instanceServiceHost, IGeofenceServiceHost geofenceServiceHost, IEventAggregatorHost eventAggregatorHost, IAuthorizeHost authHost) { _loggingHost = loggingHost; _localeHost = localeHost; _jobControllerHost = jobControllerServiceHost; _instanceServiceHost = instanceServiceHost; _geofenceServiceHost = geofenceServiceHost; _eventAggregatorHost = eventAggregatorHost; _authHost = authHost; //_appHost.Restart(); } #endregion #region ASP.NET WebApi Configure Callback Handlers /// <summary> /// Configures the application to set up middlewares, routing rules, etc. /// </summary> /// <param name=\"appBuilder\"> /// Provides the mechanisms to configure an application's request pipeline. /// </param> public void Configure(WebApplication appBuilder) { _loggingHost.LogInformation($\"Configure called\"); //var testService = appBuilder.Services.GetService<IPluginService>(); // We can configure routing here using 'Minimal APIs' or using Mvc Controller classes // Minimal API's Reference: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis?view=aspnetcore-6.0 appBuilder.Map(\"/plugin/v1\", app => { app.Run(async (httpContext) => { _loggingHost.LogInformation($\"Plugin route called\"); await httpContext.Response.WriteAsync($\"Hello from plugin {Name}\"); }); }); // Add additional endpoints to list on appBuilder.Urls.Add(\"http://*:1199\"); // listen on all interfaces appBuilder.Urls.Add(\"http://+:1199\"); // listen on all interfaces appBuilder.Urls.Add(\"http://0.0.0.0:1199\"); // listen on all interfaces appBuilder.Urls.Add(\"http://localhost:1199\"); appBuilder.Urls.Add(\"http://127.0.0.1:1199\"); appBuilder.Urls.Add(\"http://10.0.0.2:1199\"); // Example routing using minimal APIs appBuilder.Map(\"example/{name}\", async (httpContext) => { Console.WriteLine($\"Method: {httpContext.Request.Method}\"); var routeValues = httpContext.Request.RouteValues; var name = Convert.ToString(routeValues[\"name\"]); Console.WriteLine($\"Name: {name}\"); await httpContext.Response.WriteAsync(name!); }); appBuilder.MapGet(\"example\", () => \"Hi :)\"); appBuilder.MapPost(\"example\", async (httpContext) => { var body = await httpContext.Request.ReadBodyAsStringAsync(); _loggingHost.LogDebug($\"Body: {body}\"); var coords = body?.FromJson<List<Coordinate>>(); var response = string.Join(\", \", coords ?? new()); _loggingHost.LogDebug($\"Coords: {response}\"); await httpContext.Response.WriteAsync(response); }); //appBuilder.MapPut(\"example\", async (httpContext) => { }); //appBuilder.MapDelete(\"example\", async (httpContext) => { }); appBuilder.MapGet(\"example/hello/{name}\", async (httpContext) => { var method = httpContext.Request.Method; var path = httpContext.Request.Path; var queryValues = httpContext.Request.Query; // httpContext.Request.Form will throw an exception if 'Content-Type' is not 'application/application/www-x-form-urlencoded' //var formValues = httpContext.Request.Form; var routeValues = httpContext.Request.RouteValues; var body = httpContext.Request.Body; var userClaims = httpContext.User; await httpContext.Response.WriteAsync($\"Hello, {routeValues[\"name\"]}!\"); }); appBuilder.MapGet(\"example/buenosdias/{name}\", async (httpContext) => await httpContext.Response.WriteAsync($\"Buenos dias, {httpContext.Request.RouteValues[\"name\"]}!\")); appBuilder.MapGet(\"example/throw/{message?}\", (httpContext) => throw new Exception(Convert.ToString(httpContext.Request.RouteValues[\"message\"]) ?? \"Uh oh!\")); appBuilder.MapGet(\"example/{greeting}/{name}\", async (httpContext) => await httpContext.Response.WriteAsync($\"{httpContext.Request.RouteValues[\"greeting\"]}, {httpContext.Request.RouteValues[\"name\"]}!\")); // NOTE: Uncommenting the below routing map will overwrite the default '/' routing path to the dashboard //appBuilder.MapGet(\"\", async (httpContext) => await httpContext.Response.WriteAsync(\"Hello, World!\")); // Register custom middlewares // Built in ASP.NET Core Middlewares: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis?view=aspnetcore-6.0#aspnet-core-middleware //appBuilder.Use(async (httpContext, next) =>//(HttpContext httpContext, RequestDelegate req, Task next) => //{ // // Action before next delegate // await next.Invoke(); // // Action after called middleware //}); // Use built in logger from dependency injection appBuilder.Logger.LogInformation($\"Logging from the plugin '{Name}'\"); } /// <summary> /// Register services into the IServiceCollection to use with Dependency Injection. /// This method is called first before the 'Configure(IApplicationBuilder)' method. /// /// Register service(s) with Mvc using dependency injection. Services can be passed to /// other services via the constructor. Depending on the service, you can register the /// service lifetime as 'Singleton', 'Transient', or 'Scoped'. /// /// /// - Transient objects are always different.The transient OperationId value is different in the IndexModel and in the middleware. /// - Scoped objects are the same for a given request but differ across each new request. /// - Singleton objects are the same for every request. /// /// More details: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-6.0#constructor-injection-behavior /// </summary> /// <param name=\"services\"> /// Specifies the contract for a collection of service descriptors. /// </param> public void ConfigureServices(IServiceCollection services) { _loggingHost.LogInformation($\"ConfigureServices called\"); //services.AddDbContext<TodoDbContext>(options => options.UseInMemoryDatabase(\"todo\"), ServiceLifetime.Scoped); } /// <summary> /// Provides an opportunity for plugins to configure Mvc Builder. /// </summary> /// <param name=\"mvcBuilder\"> /// IMvcBuilder instance that can be configured. /// </param> public void ConfigureMvcBuilder(IMvcBuilder mvcBuilder) { _loggingHost.LogInformation($\"ConfigureMvcBuilder called\"); // Configure localization for Views mvcBuilder .AddViewLocalization( LanguageViewLocationExpanderFormat.Suffix, options => options.ResourcesPath = \"Resources\") .AddDataAnnotationsLocalization(); } #endregion #region Plugin Event Handlers /// <summary> /// Called when the plugin is loaded and registered with the host application. /// Loading UI elements here is the preferred location. /// </summary> public async void OnLoad() { _loggingHost.LogInformation($\"{Name} v{Version} by {Author} initialized!\"); // Execute IFileStorageHost method tests TestFileStorageHost(); // Execute IConfigurationHost method tests //TestConfigurationHost(); // Add dashboard stats var stats = new List<IDashboardStatsItem> { new DashboardStatsItem(\"Test\", \"100\", isHtml: false), new DashboardStatsItem(\"Test2\", \"<b><u>1,000</u></b>\", isHtml: true), //new DashboardStatsItem(\"Test3\", \"<b>2,000</b>\", isHtml: false), }; await _uiHost.AddDashboardStatisticsAsync(stats); // Register new sidebar headers var pluginSidebarItems = new List<SidebarItem> { new( // Dropdown header text that is displayed in the sidebar text: \"Test\", // Dropdown header display index in the sidebar displayIndex: 0, // Dropdown header Fontawesome icon icon: \"fa-solid fa-fw fa-microscope\", // Yes we want this to be used as a dropdown and not just // a single sidebar entry isDropdown: true, // List of children sidebar item dropdownItems: new List<SidebarItem> { // Sidebar item #1 new(\"Page\", \"Test\", \"Index\", displayIndex: 0, icon: \"fa-solid fa-fw fa-vial\"), // Sidebar item #2 new( // Text that is displayed in the sidebar \"Details\", // 'Test' is the MVC view controller 'TestController.cs' \"Test\", // 'Details' is the controller action (method name) that is executed when the navbar header is clicked \"Details\", // Display index in the sidebar displayIndex: 1, // Fontawesome icon to include (optional) icon: \"fa-solid fa-fw fa-hammer\", // Whether the sidebar item is disabled and not clickable isDisabled: true ), } ), new SidebarItem { Text = \"Sep\", DisplayIndex = 998, IsSeparator = true, }, }; await _uiHost.AddSidebarItemsAsync(pluginSidebarItems); // Add/register dashboard tiles var pluginTile = new DashboardTile ( text: \"Test\", value: \"5,000\", icon: \"fa-solid fa-fw fa-hammer\", controllerName: \"Test\", actionName: \"Index\" ); await _uiHost.AddDashboardTileAsync(pluginTile); var settingsTab = new SettingsTab { Id = \"test\", Text = \"TestPlugin\", Anchor = \"test\", DisplayIndex = 0, }; await _uiHost.AddSettingsTabAsync(settingsTab); var settingsProperties = new List<SettingsProperty> { new(\"Enabled\", \"test-enabled\", SettingsPropertyType.CheckBox, true), new(\"First Name\", \"FirstName\", SettingsPropertyType.Text, \"Jeremy\", displayIndex: 1), new(\"TextAreaTest\", \"TextAreaTest\", SettingsPropertyType.TextArea, \"Testing\", displayIndex: 2), new() { Text = \"Year\", Name = \"Year\", Value = 2022, Type = SettingsPropertyType.Number, DisplayIndex = 3, }, new() { Text = \"Geofences\", Name = \"Geofences\", Value = new List<string> { \"Paris\", \"London\", \"Sydney\" }, Type = SettingsPropertyType.Select, DisplayIndex = 0, }, }; await _uiHost.AddSettingsPropertiesAsync(settingsTab.Id, settingsProperties); TestLocaleHost(); TestJobControllerServiceHost(); TestDatabaseHost(); //_eventAggregatorHost.Subscribe(new PluginObserver()); _eventAggregatorHost.Publish(new PluginEvent(\"test message from plugin\")); await TestAuthorizeHost(); } /// <summary> /// Called when the plugin has been reloaded by the host application. /// </summary> public void OnReload() { _loggingHost.LogInformation($\"[{Name}] OnReload called\"); // TODO: Reload/re-register UI elements that might have been removed } /// <summary> /// Called when the plugin has been stopped by the host application. /// </summary> public void OnStop() => _loggingHost.LogInformation($\"[{Name}] OnStop called\"); /// <summary> /// Called when the plugin has been removed by the host application. /// </summary> public void OnRemove() => _loggingHost.LogInformation($\"[{Name}] Onremove called\"); /// <summary> /// Called when the plugin's state has been /// changed by the host application. /// </summary> /// <param name=\"state\">Plugin's current state</param> public void OnStateChanged(PluginState state) => _loggingHost.LogInformation($\"[{Name}] Plugin state has changed to '{state}'\"); #endregion #region IDatabase Event Handlers public void OnStateChanged(DatabaseConnectionState state) { _loggingHost.LogInformation($\"[{Name}] Plugin database connection state has changed: {state}\"); } public void OnEntityAdded<T>(T entity) { _loggingHost.LogInformation($\"[{Name}] Plugin database entity has been added: {entity}\"); } public void OnEntityModified<T>(T oldEntity, T newEntity) { _loggingHost.LogInformation($\"[{Name}] Plugin database entity has been modified: {oldEntity}->{newEntity}\"); } public void OnEntityDeleted<T>(T entity) { _loggingHost.LogInformation($\"[{Name}] Plugin database entity has been deleted: {entity}\"); } #endregion #region ISettingsProperty Event Handlers public void OnSave(IReadOnlyDictionary<string, List<ISettingsProperty>> properties) { _loggingHost.LogInformation($\"[{Name}] Plugin settings saved: {properties.Count:N0}\"); } #endregion #region Private Methods private void TestFileStorageHost() { var fileName = Name + \".deps.json\"; // Load dependencies config for plugin var fileData = _fileStorageHost.Load<DependenciesConfig>(\"\", fileName); _loggingHost.LogInformation($\"Loaded file data from '{fileName}': {fileData}\"); // Save dependencies config to new folder 'configs' in this plugins folder var fileSaveResult = _fileStorageHost.Save(fileData, \"configs\", fileName); _loggingHost.LogInformation($\"Saved file data for '{fileName}': {fileSaveResult}\"); } private void TestConfigurationHost() { //var config = _configurationProviderHost.GetConfiguration<Dictionary<string, string>>(sectionName: \"ConnectionStrings\"); var config = _configurationHost.GetConfiguration(); var value = _configurationHost.GetValue<bool>(\"Enabled\", sectionName: \"Authentication:GitHub\"); _loggingHost.LogInformation($\"Configuration: {config}, Value: {value}\"); var locale = _configurationHost.GetValue<string>(\"Locale\"); _loggingHost.LogInformation($\"Configuration Locale: {locale}\"); } private async void TestDatabaseHost() { try { // Retrieve database entities var device = await _databaseHost.FindAsync<IDevice, string>(\"SGV7SE\"); _loggingHost.LogInformation($\"Device: {device?.Uuid}\"); var instance = await _databaseHost.FindAsync<IInstance, string>(\"TestInstance\"); var circleRouteType = instance?.Data?.CircleRouteType; _loggingHost.LogInformation($\"Instance: {instance?.Name}\"); var geofence = await _databaseHost.FindAsync<IGeofence, string>(\"Upland\"); _loggingHost.LogInformation($\"Geofence: {geofence?.Name}\"); _loggingHost.LogInformation($\"Area: {geofence?.Data?.Area}\"); //var devices = await _databaseHost.GetListAsync<IDevice>(); //_loggingHost.LogMessage($\"Devices: {devices.Count}\"); //var device = await _databaseHost.Devices.GetByIdAsync(\"SGV7SE\"); //_loggingHost.LogMessage($\"Device: {device}\"); //var accounts = await _databaseHost.Accounts.GetListAsync(); //var accounts = await _databaseHost.GetListAsync<IAccount>(); //_loggingHost.LogMessage($\"Accounts: {accounts.Count}\"); //var pokestop = await _databaseHost.GetByIdAsync<IPokestop, string>(\"0192086043834f1c9c577a54a7890b32.16\"); //_loggingHost.LogMessage($\"Pokestop: {pokestop.Name}\"); //var spawnpoints = await _databaseHost.GetAllAsync<ISpawnpoint>(); //_loggingHost.LogDebug($\"Spawnpoints: {spawnpoints.Count:N0}\"); //spawnpoints = await _databaseHost.FindAsync<ISpawnpoint, ulong>( // spawnpoint => spawnpoint.DespawnSecond == null, // spawnpoint => spawnpoint.Id, // SortOrderDirection.Asc, // 50 //); //_loggingHost.LogDebug($\"Spawnpoints Exp: {spawnpoints?.Count:N0}\"); //var bannedAccounts = await _databaseHost.FindAsync<IAccount, string>( // account => account.Failed == \"suspended\", // account => account.Username, // SortOrderDirection.Desc, // 10000 //); //_loggingHost.LogInformation($\"Banned Accounts: {bannedAccounts?.Count:N0}\"); } catch (Exception ex) { _loggingHost.LogError(ex); } } private void TestLocaleHost() { // Translate 1 to Bulbasaur var translated = _localeHost.GetPokemonName(1); _loggingHost.LogInformation($\"Pokemon: {translated}\"); } private async void TestJobControllerServiceHost() { try { var customInstanceType = \"test_controller\"; // Register custom job controller type TestInstanceController await _jobControllerHost.RegisterJobControllerAsync<TestInstanceController>(customInstanceType); // Create geofence entity //var geofence = CreateGeofence(); //await _geofenceServiceHost.CreateGeofenceAsync(geofence); //var instance = CreateInstance(customInstanceType, new() { geofence.Name }); //await _instanceServiceHost.CreateInstanceAsync(instance); //TestAssignDevice(instance.Name); } catch (Exception ex) { _loggingHost.LogError(ex); } } private async void TestAssignDevice(string instanceName) { // Assign device to new instance using custom job controller var uuid = \"RH2SE\"; //\"SGV7SE\"; var device = await _databaseHost.FindAsync<IDevice, string>(uuid); if (device == null) { _loggingHost.LogError($\"Failed to get device from database with UUID '{uuid}'\"); return; } if (device.InstanceName != instanceName) { await _jobControllerHost.AssignDeviceToJobControllerAsync(device, instanceName); } } private async Task TestAuthorizeHost() { var roleName = \"TestRole\"; var result = await _authHost.RegisterRole(roleName, 3); _loggingHost.LogInformation($\"Role Result: {result}\"); } private static Geofence CreateGeofence() { var geofence = new Geofence { Name = \"TestGeofence\", Type = GeofenceType.Circle, Data = new GeofenceData { Area = new List<Coordinate> { new Coordinate(34.01, -117.01), new Coordinate(34.02, -117.02), new Coordinate(34.03, -117.03), new Coordinate(34.04, -117.04), }, [\"test\"] = \"123\", // <- Add custom properties }, }; return geofence; } private static Instance CreateInstance(string customInstanceType, List<string> geofences) { // Create instance var instance = new Instance { Name = \"TestInstance\", MinimumLevel = 30, MaximumLevel = 39, Geofences = geofences, Data = new InstanceData { CustomInstanceType = customInstanceType, [\"test\"] = \"123\", // <- Add custom properties }, }; return instance; } #endregion } // Mock {file}.deps.json configuration file model classes. // // Since we are passing generic <T> type from host application to // plugin (and vice versx) we do not need to register classes // with host using 'PluginServiceAttribute' attribute decoration. public class DependenciesConfig { public RuntimeTarget RuntimeTarget { get; set; } = new(); public Dictionary<string, object> CompilationOptions { get; set; } = new(); public Dictionary<string, Dictionary<string, Dictionary<string, TargetDependencies>>> Targets { get; set; } = new(); public Dictionary<string, Dictionary<string, object>> Libraries { get; set; } = new(); } public class RuntimeTarget { public string? Name { get; set; } public string? Signature { get; set; } } public class TargetDependencies { public Dictionary<string, object> Dependencies { get; set; } = new(); } public class Instance : IInstance { public string Name { get; set; } = null!; public InstanceType Type => InstanceType.Custom; public ushort MinimumLevel { get; set; } public ushort MaximumLevel { get; set; } public List<string> Geofences { get; set; } = new(); public InstanceData? Data { get; set; } = new(); } public class Geofence : IGeofence { public string Name { get; set; } = null!; public GeofenceType Type { get; set; } public GeofenceData? Data { get; set; } = new(); }","title":"Examples"},{"location":"plugin-system/examples/#plugin-examples","text":"","title":"Plugin Examples"},{"location":"plugin-system/examples/#testplugin","text":"namespace TestPlugin; using System.Collections.Generic; using Microsoft.AspNetCore.Builder; using Microsoft.AspNetCore.Hosting; using Microsoft.AspNetCore.Http; using Microsoft.AspNetCore.Mvc.Razor; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Logging; using ChuckDeviceController.Data.Abstractions; using ChuckDeviceController.Data.Common; using ChuckDeviceController.Extensions.Http; using ChuckDeviceController.Extensions.Json; using ChuckDeviceController.Geometry.Models; using ChuckDeviceController.Plugin; using ChuckDeviceController.Plugin.EventBus; using ChuckDeviceController.Plugin.EventBus.Events; using ChuckDeviceController.Plugin.Services; using JobControllers; //http://127.0.0.1:8881/plugin/v1 //http://127.0.0.1:8881/Test /// <summary> /// Example plugin demonstrating the capabilities /// of the plugin system and how it works. /// </summary> [ // Specifies where the 'wwwroot' folder will be if any are used or needed. // Possible options: embedded resources, local/external, or none. StaticFilesLocation(StaticFilesLocation.Resources, StaticFilesLocation.External), // Specify the plugin API key to authorize with the host application. PluginApiKey(\"CDC-328TVvD7o85TNbNhjLE0JysVMbOxjXKT\"), ] public class TestPlugin : IPlugin, IDatabaseEvents, IJobControllerServiceEvents, IUiEvents, ISettingsPropertyEvents { #region Plugin Host Variables // Plugin host variables are interface contracts that are used // to interact with services the host application has registered // and is running. They can be initialized by the constructor // using dependency injection or by decorating the field with // the 'PluginBootstrapperService' attribute. The host application // will look for any fields or properties decorated with the // 'PluginBootstrapperService' and initialize them with the // related service class. // Used for logging messages to the host application from the plugin private readonly ILoggingHost _loggingHost; // Interacts with the job controller instance service to add new job // controllers. private readonly IJobControllerServiceHost _jobControllerHost; // Retrieve data from the database, READONLY. // // When decorated with the 'PluginBootstrapperService' attribute, the // property will be initalized by the host's service implementation. [PluginBootstrapperService(typeof(IDatabaseHost))] private readonly IDatabaseHost _databaseHost = null!; // Translate text based on the set locale in the host application. private readonly ILocalizationHost _localeHost; // Expand your plugin implementation by adding user interface elements // and pages to the dashboard. // // When decorated with the 'PluginBootstrapperService' attribute, the // property will be initalized by the host's service implementation. [PluginBootstrapperService(typeof(IUiHost))] private readonly IUiHost _uiHost = null!; // Manage files local to your plugin's folder using saving and loading // implementations. // // When decorated with the 'PluginBootstrapperService' attribute, the // property will be initalized by the host's service implementation. [PluginBootstrapperService(typeof(IFileStorageHost))] private readonly IFileStorageHost _fileStorageHost = null!; [PluginBootstrapperService(typeof(IConfigurationHost))] private readonly IConfigurationHost _configurationHost = null!; private readonly IGeofenceServiceHost _geofenceServiceHost; private readonly IInstanceServiceHost _instanceServiceHost; private readonly IEventAggregatorHost _eventAggregatorHost; private readonly IAuthorizeHost _authHost; #endregion #region Plugin Metadata Properties /// <summary> /// Gets the name of the plugin to use. /// </summary> public string Name => \"TestPlugin\"; /// <summary> /// Gets a brief description about the plugin explaining how it /// works and what it does. /// </summary> public string Description => \"Demostrates the capabilities of the plugin system.\"; /// <summary> /// Gets the name of the author/creator of the plugin. /// </summary> public string Author => \"versx\"; /// <summary> /// Gets the current version of the plugin. /// </summary> public Version Version => new(1, 0, 0); #endregion #region Plugin Host Properties /// <summary> /// Gets or sets the UiHost host service implementation. This is /// initialized separately from the '_uiHost' field that is decorated. /// </summary> /// <remarks> /// When decorated with the 'PluginBootstrapperService' attribute, the /// property will be initalized by the host's service implementation. /// </remarks> [PluginBootstrapperService(typeof(IUiHost))] public IUiHost UiHost { get; set; } = null!; #endregion #region Constructor /// <summary> /// Instantiates a new instance of <see cref=\"IPlugin\"/> with the host /// application. It is important to only create one constructor for the /// class that inherits the <see cref=\"IPlugin\"/> interface contract. /// Failure to do so will prevent the plugin from loading. /// /// This is so the host application knows which constructor to use /// when it instantiates an instance with the host handlers for each /// parameter, essentially dependency injection. /// </summary> /// <param name=\"loggingHost\">Logging host handler.</param> /// <param name=\"localeHost\">Localization host handler.</param> /// <param name=\"jobControllerServiceHost\"></param> /// <param name=\"instanceServiceHost\"></param> /// <param name=\"geofenceServiceHost\"></param> /// <param name=\"eventAggregatorHost\"></param> /// <param name=\"authHost\"></param> public TestPlugin( ILoggingHost loggingHost, ILocalizationHost localeHost, IJobControllerServiceHost jobControllerServiceHost, IInstanceServiceHost instanceServiceHost, IGeofenceServiceHost geofenceServiceHost, IEventAggregatorHost eventAggregatorHost, IAuthorizeHost authHost) { _loggingHost = loggingHost; _localeHost = localeHost; _jobControllerHost = jobControllerServiceHost; _instanceServiceHost = instanceServiceHost; _geofenceServiceHost = geofenceServiceHost; _eventAggregatorHost = eventAggregatorHost; _authHost = authHost; //_appHost.Restart(); } #endregion #region ASP.NET WebApi Configure Callback Handlers /// <summary> /// Configures the application to set up middlewares, routing rules, etc. /// </summary> /// <param name=\"appBuilder\"> /// Provides the mechanisms to configure an application's request pipeline. /// </param> public void Configure(WebApplication appBuilder) { _loggingHost.LogInformation($\"Configure called\"); //var testService = appBuilder.Services.GetService<IPluginService>(); // We can configure routing here using 'Minimal APIs' or using Mvc Controller classes // Minimal API's Reference: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis?view=aspnetcore-6.0 appBuilder.Map(\"/plugin/v1\", app => { app.Run(async (httpContext) => { _loggingHost.LogInformation($\"Plugin route called\"); await httpContext.Response.WriteAsync($\"Hello from plugin {Name}\"); }); }); // Add additional endpoints to list on appBuilder.Urls.Add(\"http://*:1199\"); // listen on all interfaces appBuilder.Urls.Add(\"http://+:1199\"); // listen on all interfaces appBuilder.Urls.Add(\"http://0.0.0.0:1199\"); // listen on all interfaces appBuilder.Urls.Add(\"http://localhost:1199\"); appBuilder.Urls.Add(\"http://127.0.0.1:1199\"); appBuilder.Urls.Add(\"http://10.0.0.2:1199\"); // Example routing using minimal APIs appBuilder.Map(\"example/{name}\", async (httpContext) => { Console.WriteLine($\"Method: {httpContext.Request.Method}\"); var routeValues = httpContext.Request.RouteValues; var name = Convert.ToString(routeValues[\"name\"]); Console.WriteLine($\"Name: {name}\"); await httpContext.Response.WriteAsync(name!); }); appBuilder.MapGet(\"example\", () => \"Hi :)\"); appBuilder.MapPost(\"example\", async (httpContext) => { var body = await httpContext.Request.ReadBodyAsStringAsync(); _loggingHost.LogDebug($\"Body: {body}\"); var coords = body?.FromJson<List<Coordinate>>(); var response = string.Join(\", \", coords ?? new()); _loggingHost.LogDebug($\"Coords: {response}\"); await httpContext.Response.WriteAsync(response); }); //appBuilder.MapPut(\"example\", async (httpContext) => { }); //appBuilder.MapDelete(\"example\", async (httpContext) => { }); appBuilder.MapGet(\"example/hello/{name}\", async (httpContext) => { var method = httpContext.Request.Method; var path = httpContext.Request.Path; var queryValues = httpContext.Request.Query; // httpContext.Request.Form will throw an exception if 'Content-Type' is not 'application/application/www-x-form-urlencoded' //var formValues = httpContext.Request.Form; var routeValues = httpContext.Request.RouteValues; var body = httpContext.Request.Body; var userClaims = httpContext.User; await httpContext.Response.WriteAsync($\"Hello, {routeValues[\"name\"]}!\"); }); appBuilder.MapGet(\"example/buenosdias/{name}\", async (httpContext) => await httpContext.Response.WriteAsync($\"Buenos dias, {httpContext.Request.RouteValues[\"name\"]}!\")); appBuilder.MapGet(\"example/throw/{message?}\", (httpContext) => throw new Exception(Convert.ToString(httpContext.Request.RouteValues[\"message\"]) ?? \"Uh oh!\")); appBuilder.MapGet(\"example/{greeting}/{name}\", async (httpContext) => await httpContext.Response.WriteAsync($\"{httpContext.Request.RouteValues[\"greeting\"]}, {httpContext.Request.RouteValues[\"name\"]}!\")); // NOTE: Uncommenting the below routing map will overwrite the default '/' routing path to the dashboard //appBuilder.MapGet(\"\", async (httpContext) => await httpContext.Response.WriteAsync(\"Hello, World!\")); // Register custom middlewares // Built in ASP.NET Core Middlewares: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis?view=aspnetcore-6.0#aspnet-core-middleware //appBuilder.Use(async (httpContext, next) =>//(HttpContext httpContext, RequestDelegate req, Task next) => //{ // // Action before next delegate // await next.Invoke(); // // Action after called middleware //}); // Use built in logger from dependency injection appBuilder.Logger.LogInformation($\"Logging from the plugin '{Name}'\"); } /// <summary> /// Register services into the IServiceCollection to use with Dependency Injection. /// This method is called first before the 'Configure(IApplicationBuilder)' method. /// /// Register service(s) with Mvc using dependency injection. Services can be passed to /// other services via the constructor. Depending on the service, you can register the /// service lifetime as 'Singleton', 'Transient', or 'Scoped'. /// /// /// - Transient objects are always different.The transient OperationId value is different in the IndexModel and in the middleware. /// - Scoped objects are the same for a given request but differ across each new request. /// - Singleton objects are the same for every request. /// /// More details: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-6.0#constructor-injection-behavior /// </summary> /// <param name=\"services\"> /// Specifies the contract for a collection of service descriptors. /// </param> public void ConfigureServices(IServiceCollection services) { _loggingHost.LogInformation($\"ConfigureServices called\"); //services.AddDbContext<TodoDbContext>(options => options.UseInMemoryDatabase(\"todo\"), ServiceLifetime.Scoped); } /// <summary> /// Provides an opportunity for plugins to configure Mvc Builder. /// </summary> /// <param name=\"mvcBuilder\"> /// IMvcBuilder instance that can be configured. /// </param> public void ConfigureMvcBuilder(IMvcBuilder mvcBuilder) { _loggingHost.LogInformation($\"ConfigureMvcBuilder called\"); // Configure localization for Views mvcBuilder .AddViewLocalization( LanguageViewLocationExpanderFormat.Suffix, options => options.ResourcesPath = \"Resources\") .AddDataAnnotationsLocalization(); } #endregion #region Plugin Event Handlers /// <summary> /// Called when the plugin is loaded and registered with the host application. /// Loading UI elements here is the preferred location. /// </summary> public async void OnLoad() { _loggingHost.LogInformation($\"{Name} v{Version} by {Author} initialized!\"); // Execute IFileStorageHost method tests TestFileStorageHost(); // Execute IConfigurationHost method tests //TestConfigurationHost(); // Add dashboard stats var stats = new List<IDashboardStatsItem> { new DashboardStatsItem(\"Test\", \"100\", isHtml: false), new DashboardStatsItem(\"Test2\", \"<b><u>1,000</u></b>\", isHtml: true), //new DashboardStatsItem(\"Test3\", \"<b>2,000</b>\", isHtml: false), }; await _uiHost.AddDashboardStatisticsAsync(stats); // Register new sidebar headers var pluginSidebarItems = new List<SidebarItem> { new( // Dropdown header text that is displayed in the sidebar text: \"Test\", // Dropdown header display index in the sidebar displayIndex: 0, // Dropdown header Fontawesome icon icon: \"fa-solid fa-fw fa-microscope\", // Yes we want this to be used as a dropdown and not just // a single sidebar entry isDropdown: true, // List of children sidebar item dropdownItems: new List<SidebarItem> { // Sidebar item #1 new(\"Page\", \"Test\", \"Index\", displayIndex: 0, icon: \"fa-solid fa-fw fa-vial\"), // Sidebar item #2 new( // Text that is displayed in the sidebar \"Details\", // 'Test' is the MVC view controller 'TestController.cs' \"Test\", // 'Details' is the controller action (method name) that is executed when the navbar header is clicked \"Details\", // Display index in the sidebar displayIndex: 1, // Fontawesome icon to include (optional) icon: \"fa-solid fa-fw fa-hammer\", // Whether the sidebar item is disabled and not clickable isDisabled: true ), } ), new SidebarItem { Text = \"Sep\", DisplayIndex = 998, IsSeparator = true, }, }; await _uiHost.AddSidebarItemsAsync(pluginSidebarItems); // Add/register dashboard tiles var pluginTile = new DashboardTile ( text: \"Test\", value: \"5,000\", icon: \"fa-solid fa-fw fa-hammer\", controllerName: \"Test\", actionName: \"Index\" ); await _uiHost.AddDashboardTileAsync(pluginTile); var settingsTab = new SettingsTab { Id = \"test\", Text = \"TestPlugin\", Anchor = \"test\", DisplayIndex = 0, }; await _uiHost.AddSettingsTabAsync(settingsTab); var settingsProperties = new List<SettingsProperty> { new(\"Enabled\", \"test-enabled\", SettingsPropertyType.CheckBox, true), new(\"First Name\", \"FirstName\", SettingsPropertyType.Text, \"Jeremy\", displayIndex: 1), new(\"TextAreaTest\", \"TextAreaTest\", SettingsPropertyType.TextArea, \"Testing\", displayIndex: 2), new() { Text = \"Year\", Name = \"Year\", Value = 2022, Type = SettingsPropertyType.Number, DisplayIndex = 3, }, new() { Text = \"Geofences\", Name = \"Geofences\", Value = new List<string> { \"Paris\", \"London\", \"Sydney\" }, Type = SettingsPropertyType.Select, DisplayIndex = 0, }, }; await _uiHost.AddSettingsPropertiesAsync(settingsTab.Id, settingsProperties); TestLocaleHost(); TestJobControllerServiceHost(); TestDatabaseHost(); //_eventAggregatorHost.Subscribe(new PluginObserver()); _eventAggregatorHost.Publish(new PluginEvent(\"test message from plugin\")); await TestAuthorizeHost(); } /// <summary> /// Called when the plugin has been reloaded by the host application. /// </summary> public void OnReload() { _loggingHost.LogInformation($\"[{Name}] OnReload called\"); // TODO: Reload/re-register UI elements that might have been removed } /// <summary> /// Called when the plugin has been stopped by the host application. /// </summary> public void OnStop() => _loggingHost.LogInformation($\"[{Name}] OnStop called\"); /// <summary> /// Called when the plugin has been removed by the host application. /// </summary> public void OnRemove() => _loggingHost.LogInformation($\"[{Name}] Onremove called\"); /// <summary> /// Called when the plugin's state has been /// changed by the host application. /// </summary> /// <param name=\"state\">Plugin's current state</param> public void OnStateChanged(PluginState state) => _loggingHost.LogInformation($\"[{Name}] Plugin state has changed to '{state}'\"); #endregion #region IDatabase Event Handlers public void OnStateChanged(DatabaseConnectionState state) { _loggingHost.LogInformation($\"[{Name}] Plugin database connection state has changed: {state}\"); } public void OnEntityAdded<T>(T entity) { _loggingHost.LogInformation($\"[{Name}] Plugin database entity has been added: {entity}\"); } public void OnEntityModified<T>(T oldEntity, T newEntity) { _loggingHost.LogInformation($\"[{Name}] Plugin database entity has been modified: {oldEntity}->{newEntity}\"); } public void OnEntityDeleted<T>(T entity) { _loggingHost.LogInformation($\"[{Name}] Plugin database entity has been deleted: {entity}\"); } #endregion #region ISettingsProperty Event Handlers public void OnSave(IReadOnlyDictionary<string, List<ISettingsProperty>> properties) { _loggingHost.LogInformation($\"[{Name}] Plugin settings saved: {properties.Count:N0}\"); } #endregion #region Private Methods private void TestFileStorageHost() { var fileName = Name + \".deps.json\"; // Load dependencies config for plugin var fileData = _fileStorageHost.Load<DependenciesConfig>(\"\", fileName); _loggingHost.LogInformation($\"Loaded file data from '{fileName}': {fileData}\"); // Save dependencies config to new folder 'configs' in this plugins folder var fileSaveResult = _fileStorageHost.Save(fileData, \"configs\", fileName); _loggingHost.LogInformation($\"Saved file data for '{fileName}': {fileSaveResult}\"); } private void TestConfigurationHost() { //var config = _configurationProviderHost.GetConfiguration<Dictionary<string, string>>(sectionName: \"ConnectionStrings\"); var config = _configurationHost.GetConfiguration(); var value = _configurationHost.GetValue<bool>(\"Enabled\", sectionName: \"Authentication:GitHub\"); _loggingHost.LogInformation($\"Configuration: {config}, Value: {value}\"); var locale = _configurationHost.GetValue<string>(\"Locale\"); _loggingHost.LogInformation($\"Configuration Locale: {locale}\"); } private async void TestDatabaseHost() { try { // Retrieve database entities var device = await _databaseHost.FindAsync<IDevice, string>(\"SGV7SE\"); _loggingHost.LogInformation($\"Device: {device?.Uuid}\"); var instance = await _databaseHost.FindAsync<IInstance, string>(\"TestInstance\"); var circleRouteType = instance?.Data?.CircleRouteType; _loggingHost.LogInformation($\"Instance: {instance?.Name}\"); var geofence = await _databaseHost.FindAsync<IGeofence, string>(\"Upland\"); _loggingHost.LogInformation($\"Geofence: {geofence?.Name}\"); _loggingHost.LogInformation($\"Area: {geofence?.Data?.Area}\"); //var devices = await _databaseHost.GetListAsync<IDevice>(); //_loggingHost.LogMessage($\"Devices: {devices.Count}\"); //var device = await _databaseHost.Devices.GetByIdAsync(\"SGV7SE\"); //_loggingHost.LogMessage($\"Device: {device}\"); //var accounts = await _databaseHost.Accounts.GetListAsync(); //var accounts = await _databaseHost.GetListAsync<IAccount>(); //_loggingHost.LogMessage($\"Accounts: {accounts.Count}\"); //var pokestop = await _databaseHost.GetByIdAsync<IPokestop, string>(\"0192086043834f1c9c577a54a7890b32.16\"); //_loggingHost.LogMessage($\"Pokestop: {pokestop.Name}\"); //var spawnpoints = await _databaseHost.GetAllAsync<ISpawnpoint>(); //_loggingHost.LogDebug($\"Spawnpoints: {spawnpoints.Count:N0}\"); //spawnpoints = await _databaseHost.FindAsync<ISpawnpoint, ulong>( // spawnpoint => spawnpoint.DespawnSecond == null, // spawnpoint => spawnpoint.Id, // SortOrderDirection.Asc, // 50 //); //_loggingHost.LogDebug($\"Spawnpoints Exp: {spawnpoints?.Count:N0}\"); //var bannedAccounts = await _databaseHost.FindAsync<IAccount, string>( // account => account.Failed == \"suspended\", // account => account.Username, // SortOrderDirection.Desc, // 10000 //); //_loggingHost.LogInformation($\"Banned Accounts: {bannedAccounts?.Count:N0}\"); } catch (Exception ex) { _loggingHost.LogError(ex); } } private void TestLocaleHost() { // Translate 1 to Bulbasaur var translated = _localeHost.GetPokemonName(1); _loggingHost.LogInformation($\"Pokemon: {translated}\"); } private async void TestJobControllerServiceHost() { try { var customInstanceType = \"test_controller\"; // Register custom job controller type TestInstanceController await _jobControllerHost.RegisterJobControllerAsync<TestInstanceController>(customInstanceType); // Create geofence entity //var geofence = CreateGeofence(); //await _geofenceServiceHost.CreateGeofenceAsync(geofence); //var instance = CreateInstance(customInstanceType, new() { geofence.Name }); //await _instanceServiceHost.CreateInstanceAsync(instance); //TestAssignDevice(instance.Name); } catch (Exception ex) { _loggingHost.LogError(ex); } } private async void TestAssignDevice(string instanceName) { // Assign device to new instance using custom job controller var uuid = \"RH2SE\"; //\"SGV7SE\"; var device = await _databaseHost.FindAsync<IDevice, string>(uuid); if (device == null) { _loggingHost.LogError($\"Failed to get device from database with UUID '{uuid}'\"); return; } if (device.InstanceName != instanceName) { await _jobControllerHost.AssignDeviceToJobControllerAsync(device, instanceName); } } private async Task TestAuthorizeHost() { var roleName = \"TestRole\"; var result = await _authHost.RegisterRole(roleName, 3); _loggingHost.LogInformation($\"Role Result: {result}\"); } private static Geofence CreateGeofence() { var geofence = new Geofence { Name = \"TestGeofence\", Type = GeofenceType.Circle, Data = new GeofenceData { Area = new List<Coordinate> { new Coordinate(34.01, -117.01), new Coordinate(34.02, -117.02), new Coordinate(34.03, -117.03), new Coordinate(34.04, -117.04), }, [\"test\"] = \"123\", // <- Add custom properties }, }; return geofence; } private static Instance CreateInstance(string customInstanceType, List<string> geofences) { // Create instance var instance = new Instance { Name = \"TestInstance\", MinimumLevel = 30, MaximumLevel = 39, Geofences = geofences, Data = new InstanceData { CustomInstanceType = customInstanceType, [\"test\"] = \"123\", // <- Add custom properties }, }; return instance; } #endregion } // Mock {file}.deps.json configuration file model classes. // // Since we are passing generic <T> type from host application to // plugin (and vice versx) we do not need to register classes // with host using 'PluginServiceAttribute' attribute decoration. public class DependenciesConfig { public RuntimeTarget RuntimeTarget { get; set; } = new(); public Dictionary<string, object> CompilationOptions { get; set; } = new(); public Dictionary<string, Dictionary<string, Dictionary<string, TargetDependencies>>> Targets { get; set; } = new(); public Dictionary<string, Dictionary<string, object>> Libraries { get; set; } = new(); } public class RuntimeTarget { public string? Name { get; set; } public string? Signature { get; set; } } public class TargetDependencies { public Dictionary<string, object> Dependencies { get; set; } = new(); } public class Instance : IInstance { public string Name { get; set; } = null!; public InstanceType Type => InstanceType.Custom; public ushort MinimumLevel { get; set; } public ushort MaximumLevel { get; set; } public List<string> Geofences { get; set; } = new(); public InstanceData? Data { get; set; } = new(); } public class Geofence : IGeofence { public string Name { get; set; } = null!; public GeofenceType Type { get; set; } public GeofenceData? Data { get; set; } = new(); }","title":"TestPlugin"},{"location":"plugin-system/host-interfaces/","text":"Plugin Host Interface Contracts \uf0c1 IAuthorizeHost \uf0c1 Description \uf0c1 Create new user identity roles to restrict routing endpoints in plugins Class View \uf0c1 namespace ChuckDeviceController.Plugin; /// <summary> /// User identity authorization host handler. /// </summary> public interface IAuthorizeHost { /// <summary> /// Registers a custom user role with the host application. /// </summary> /// <param name=\"name\"> /// The name of the role to register. /// </param> /// <param name=\"displayIndex\"> /// Display index value when listing roles. /// </param> /// <returns> /// Returns a value determining whether the role was registered /// or not. /// </returns> Task<bool> RegisterRole(string name, int displayIndex); } IConfigurationHost \uf0c1 Description \uf0c1 Load configuration files from file system Get property values from loaded configuration files Class View \uf0c1 namespace ChuckDeviceController.Plugin; using Microsoft.Extensions.Configuration; /// <summary> /// This interface contract can be used by all plugin modules to load setting and configuration data. /// /// The default implementation which is loaded if no other plugin registers an instance uses /// appsettings.json to store configuration data to be used by Plugins. /// /// An instance of this interface is available via the DI container, any custom implementations /// must be configured to be used in the DI contaner when being initialized. /// </summary> /// <remarks> /// This class can be customized by the host application, if no implementation is provided then /// a default implementation is provided. /// </remarks> public interface IConfigurationHost { /// <summary> /// Retrieves a configuration instance. /// </summary> /// <param name=\"jsonFileName\"> /// Name of the JSON file name to be used. If a JSON cofiguration file is not provided, the default /// 'appsettings.json' will be loaded from the calling plugin's root folder. /// </param> /// <param name=\"sectionName\"> /// The name of the configuration section that might be required. /// </param> /// <returns> /// Configuration file instance initialized with the required settings. /// </returns> IConfiguration GetConfiguration(string? jsonFileName = null, string? sectionName = null); /// <summary> /// Retrieves a value from a JSON configuration file. /// </summary> /// <typeparam name=\"T\">The class related to the settings being requested.</typeparam> /// <param name=\"name\">Name of the property to retrieve the value for.</param> /// <param name=\"defaultValue\">Default value to return.</param> /// <param name=\"sectionName\">The name of the configuration section that might be required.</param> /// <returns>Returns the value related to the named configuration property.</returns> T? GetValue<T>(string name, T? defaultValue = default, string? sectionName = null); } IDatabaseHost \uf0c1 Description \uf0c1 Retrieve all of a specified data entity (read only access) Retrieve a specific data entity by primary key (read only access) Retrieve a specific data entity by predicate/expression (read only access) Class View \uf0c1 namespace ChuckDeviceController.Plugin; using System.Linq.Expressions; using ChuckDeviceController.Data.Common; /// <summary> /// Plugin host handler contract used to interact with the database entities. /// </summary> public interface IDatabaseHost { //IRepository<IAccount, string> Accounts { get; } //IRepository<IPokestop, string> Pokestops { get; } //IRepository<IDevice, string> Devices { get; } /// <summary> /// Gets a list of database entities. /// </summary> /// <typeparam name=\"TEntity\">Database entity contract type.</typeparam> /// <returns>Returns a list of database entities.</returns> Task<IReadOnlyList<TEntity>> FindAllAsync<TEntity>(); /// <summary> /// Gets a database entity by primary key. /// </summary> /// <typeparam name=\"TEntity\">Database entity contract type.</typeparam> /// <typeparam name=\"TKey\">Database entity primary key type.</typeparam> /// <param name=\"id\">Primary key of the database entity.</param> /// <returns>Returns a database entity.</returns> Task<TEntity?> FindAsync<TEntity, TKey>(TKey id); /// <summary> /// Gets a list of database entities matching the specified criteria. /// </summary> /// <typeparam name=\"TKey\">Entity property type when sorting.</typeparam> /// <typeparam name=\"TEntity\">Database entity contract type.</typeparam> /// <param name=\"predicate\">Predicate used to determine if a database entity matches.</param> /// <param name=\"order\">Sort order expression. (Optional)</param> /// <param name=\"sortDirection\">Sort ordering direction.</param> /// <param name=\"limit\">Limit the returned number of results.</param> /// <returns>Returns a list of database entities.</returns> Task<IReadOnlyList<TEntity>> FindAsync<TEntity, TKey>( Expression<Func<TEntity, bool>> predicate, Expression<Func<TEntity, TKey>>? order = null, SortOrderDirection sortDirection = SortOrderDirection.Asc, int limit = 1000) where TEntity : class where TKey : notnull; } IEventAggregatorHost \uf0c1 Description \uf0c1 Publish events to the host application Publish events to other loaded plugins Subscribe to events via event service bus Class View \uf0c1 namespace ChuckDeviceController.Plugin.EventBus; /// <summary> /// /// </summary> public interface IEventAggregatorHost : IObservable<IEvent> { /// <summary> /// /// </summary> /// <param name=\"message\"></param> void Publish(IEvent message); /// <summary> /// /// </summary> /// <param name=\"observer\"></param> /// <returns></returns> IDisposable Subscribe(ICustomObserver<IEvent> observer); /// <summary> /// /// </summary> /// <typeparam name=\"T\"></typeparam> /// <param name=\"observer\"></param> /// <returns></returns> IDisposable Subscribe<T>(ICustomObserver<T> observer) where T : IEvent; } IFileStorageHost \uf0c1 Description \uf0c1 Load files from file system Save files to file system Class View \uf0c1 namespace ChuckDeviceController.Plugin; /// <summary> /// Interface contract used for reading data from as well as /// persisting data to storage. The type of storage used will /// depend on the implementation. /// </summary> public interface IFileStorageHost : ISaveData, ILoadData { } /// <summary> /// /// </summary> public interface ILoadData { /// <summary> /// Loads file data of type T from the plugin's folder. /// </summary> /// <typeparam name=\"T\"> /// Type of file data to be loaded. /// </typeparam> /// <param name=\"folderName\"> /// Sub folder within plugin's folder, optional. If not set, /// searches root of plugin's folder. /// </param> /// <param name=\"fileName\"> /// File name of storage file to load, including extension /// otherwise generic '.dat' extension will be appended. /// </param> /// <returns> /// Type of data to be loaded or default type if exception occurs. /// </returns> T Load<T>(string folderName, string fileName); } /// <summary> /// /// </summary> public interface ISaveData { /// <summary> /// Saves file data of type T to the plugin's folder. /// </summary> /// <typeparam name=\"T\"> /// Type of data to be saved. /// </typeparam> /// <param name=\"data\"> /// File data to be saved. /// </param> /// <param name=\"folderName\"> /// Sub folder within plugin's folder, optional. If not set, /// uses root of plugin's folder. /// </param> /// <param name=\"name\"> /// File name of storage file to save, including extension /// otherwise generic '.dat' extension will be appended. /// </param> /// <param name=\"prettyPrint\"> /// </param> /// <returns> /// Returns <c>true</c> if successful, otherwise <c>false</c>. /// </returns> bool Save<T>(T data, string folderName, string name, bool prettyPrint = false); } IGeofenceServiceHost \uf0c1 Description \uf0c1 Fetch geofences Create geofences Check if coordinate is in geofence(s) Class View \uf0c1 namespace ChuckDeviceController.Plugin; using ChuckDeviceController.Data.Abstractions; using ChuckDeviceController.Geometry.Models.Abstractions; /// <summary> /// /// </summary> public interface IGeofenceServiceHost { /// <summary> /// Create a new or update an existing geofence. /// </summary> /// <param name=\"options\">Geofence options used to create or update.</param> Task CreateGeofenceAsync(IGeofence options); /// <summary> /// Retrieves a geofence from the database by name. /// </summary> /// <param name=\"name\">Name of geofence to retrieve.</param> /// <returns>Returns a geofence interface contract.</returns> Task<IGeofence> GetGeofenceAsync(string name); /// <summary> /// Gets the geofence boundaries in multipolygon format as well as a two-dimensional list of coordinates. /// </summary> /// <param name=\"geofence\">Geofence to get coordinates from.</param> /// <returns>Returns a tuple with a list of MultiPolygons and a two-dimensional list of coordinates.</returns> (IReadOnlyList<IMultiPolygon>, IReadOnlyList<IReadOnlyList<ICoordinate>>) GetMultiPolygons(IGeofence geofence); /// <summary> /// Gets the geofence location plots as a list of coordinates. /// </summary> /// <param name=\"geofence\">Geofence to get coordinates from.</param> /// <returns>Returns a list of coordinates.</returns> IReadOnlyList<ICoordinate>? GetCoordinates(IGeofence geofence); /// <summary> /// /// </summary> /// <param name=\"coord\"></param> /// <param name=\"multiPolygons\"></param> /// <returns></returns> bool IsPointInMultiPolygons(ICoordinate coord, IEnumerable<IMultiPolygon> multiPolygons); /// <summary> /// /// </summary> /// <param name=\"coord\"></param> /// <param name=\"multiPolygon\"></param> /// <returns></returns> bool IsPointInMultiPolygon(ICoordinate coord, IMultiPolygon multiPolygon); /// <summary> /// /// </summary> /// <param name=\"coord\"></param> /// <param name=\"coordinates\"></param> /// <returns></returns> bool IsPointInPolygon(ICoordinate coord, IEnumerable<ICoordinate> coordinates); } IInstanceServiceHost \uf0c1 Description \uf0c1 Create new instances Update instances Class View \uf0c1 namespace ChuckDeviceController.Plugin; using ChuckDeviceController.Data.Abstractions; /// <summary> /// /// </summary> public interface IInstanceServiceHost { /// <summary> /// /// </summary> /// <param name=\"options\"></param> /// <returns></returns> Task CreateInstanceAsync(IInstance options); } IJobControllerServiceHost \uf0c1 Description \uf0c1 Register new custom job controller instance types Create new custom job controllers Assign devices to instances Class View \uf0c1 namespace ChuckDeviceController.Plugin; using ChuckDeviceController.Common.Jobs; using ChuckDeviceController.Data.Abstractions; /// <summary> /// Plugin host handler contract used to interact with and manage the /// job controller service. /// </summary> public interface IJobControllerServiceHost : IInstanceServiceHost { /// <summary> /// Gets a dictionary of active and configured devices. /// </summary> IReadOnlyDictionary<string, IDevice> Devices { get; } /// <summary> /// Gets a dictionary of all loaded job controller instances. /// </summary> IReadOnlyDictionary<string, IJobController> Instances { get; } /// <summary> /// Gets a list of all registered custom job controller instance types. /// </summary> IReadOnlyList<string> CustomInstanceTypes { get; } /// <summary> /// /// </summary> /// <typeparam name=\"T\"></typeparam> /// <param name=\"customInstanceType\"></param> /// <returns></returns> Task RegisterJobControllerAsync<T>(string customInstanceType) where T : IJobController; /// <summary> /// Assigns the specified device to a specific job controller /// instance by name. /// </summary> /// <param name=\"device\">Device entity.</param> /// <param name=\"instanceName\">Job controller instance name.</param> Task AssignDeviceToJobControllerAsync(IDevice device, string instanceName); } ILocalizationHost \uf0c1 Description \uf0c1 Set currently loaded locale Retrieve translated localized text Class View \uf0c1 namespace ChuckDeviceController.Plugin; using System.Globalization; /// <summary> /// Plugin host handler contract used to translate strings. /// </summary> public interface ILocalizationHost { #region Properties /// <summary> /// Gets or sets the current culture localization to use. /// </summary> CultureInfo CurrentCulture { get; } /// <summary> /// Gets the two letter ISO country code for the currently set localization. /// </summary> /// <value>The two letter ISO country code.</value> string CountryCode { get; } #endregion /// <summary> /// Sets the country locale code to use for translations. /// </summary> /// <param name=\"locale\">Two letter ISO language name code.</param> void SetLocale(string locale); /// <summary> /// /// </summary> /// <param name=\"key\"></param> /// <returns></returns> string Translate(string key); /// <summary> /// /// </summary> /// <param name=\"keyWithArgs\"></param> /// <param name=\"args\"></param> /// <returns></returns> string Translate(string keyWithArgs, params object[] args); /// <summary> /// Translate a Pokemon id to name. /// </summary> /// <param name=\"pokemonId\">Pokemon ID to translate to name.</param> /// <returns></returns> string GetPokemonName(uint pokemonId); /// <summary> /// Translate a Pokemon form id to name. /// </summary> /// <param name=\"formId\">Form ID to translate to name.</param> /// <param name=\"includeNormal\">Include 'Normal' form name or not.</param> /// <returns></returns> string GetFormName(uint formId, bool includeNormal = false); /// <summary> /// Translate a Pokemon costume id to name. /// </summary> /// <param name=\"costumeId\">Costume ID to translate to name.</param> /// <returns></returns> string GetCostumeName(uint costumeId); /// <summary> /// Translate a Pokemon evolution id to name. /// </summary> /// <param name=\"evolutionId\">Evolution ID to translate to name.</param> /// <returns></returns> string GetEvolutionName(uint evolutionId); /// <summary> /// /// </summary> /// <param name=\"moveId\"></param> /// <returns></returns> string GetMoveName(uint moveId); /// <summary> /// /// </summary> /// <param name=\"throwTypeId\"></param> /// <returns></returns> string GetThrowName(uint throwTypeId); /// <summary> /// /// </summary> /// <param name=\"itemId\"></param> /// <returns></returns> string GetItem(uint itemId); /// <summary> /// /// </summary> /// <param name=\"weatherConditionId\"></param> /// <returns></returns> string GetWeather(uint weatherConditionId); /// <summary> /// /// </summary> /// <param name=\"alignmentTypeId\"></param> /// <returns></returns> string GetAlignmentName(uint alignmentTypeId); /// <summary> /// /// </summary> /// <param name=\"characterCategoryId\"></param> /// <returns></returns> string GetCharacterCategoryName(uint characterCategoryId); /// <summary> /// /// </summary> /// <param name=\"invasionCharacterId\"></param> /// <returns></returns> string GetGruntType(uint invasionCharacterId); } ILoggingHost \uf0c1 Description \uf0c1 Log trace messages Log info messages Log debug messages Log warning messages Log error messages Log critical messages Class View \uf0c1 namespace ChuckDeviceController.Plugin; /// <summary> /// Plugin host handler for logging messages from plugins. /// </summary> public interface ILoggingHost { /// <summary> /// /// </summary> /// <param name=\"message\"></param> /// <param name=\"args\"></param> void LogTrace(string message, params object?[] args); /// <summary> /// /// </summary> /// <param name=\"message\"></param> /// <param name=\"args\"></param> void LogInformation(string message, params object?[] args); /// <summary> /// /// </summary> /// <param name=\"message\"></param> /// <param name=\"args\"></param> void LogDebug(string message, params object?[] args); /// <summary> /// /// </summary> /// <param name=\"message\"></param> /// <param name=\"args\"></param> void LogWarning(string message, params object?[] args); /// <summary> /// /// </summary> /// <param name=\"message\"></param> /// <param name=\"args\"></param> void LogError(string message, params object?[] args); /// <summary> /// /// </summary> /// <param name=\"error\"></param> /// <param name=\"message\"></param> /// <param name=\"args\"></param> void LogError(Exception error, string? message = null, params object?[] args); /// <summary> /// /// </summary> /// <param name=\"message\"></param> /// <param name=\"args\"></param> void LogCritical(string message, params object?[] args); /// <summary> /// /// </summary> /// <param name=\"error\"></param> /// <param name=\"message\"></param> /// <param name=\"args\"></param> void LogCritical(Exception error, string? message = null, params object?[] args); } IMemoryCacheHost \uf0c1 Description \uf0c1 Cache data in-memory Class View \uf0c1 namespace ChuckDeviceController.Plugin; /// <summary> /// In memory cache host handler. /// </summary> public interface IMemoryCacheHost { /// <summary> /// Checks whether a key exists in the cache. /// </summary> /// <param name=\"key\">Key to check if exists.</param> /// <returns>Returns <c>true</c> if the key exists, otherwise <c>false</c>.</returns> bool IsSet(string key); /// <summary> /// Trys to retrieve a value by key from the cache. /// </summary> /// <typeparam name=\"T\">Type of value.</typeparam> /// <param name=\"key\">Key to check.</param> /// <param name=\"value\">Value returned from the cache.</param> /// <returns>Returns <c>true</c> if the key exists, otherwise <c>false</c>.</returns> bool TryGetValue<T>(string key, out T? value); /// <summary> /// Retrieve a value by key from the cache. /// </summary> /// <typeparam name=\"T\">Type of value.</typeparam> /// <param name=\"key\">Key to check.</param> /// <returns>Returns a value from the cache, otherwise <c>null</c>.</returns> T? GetValue<T>(string key); /// <summary> /// Caches a value by key with a set expiration time. /// </summary> /// <typeparam name=\"T\">Type of value.</typeparam> /// <param name=\"key\">Key to set.</param> /// <param name=\"value\">Value to cache.</param> /// <param name=\"expiryS\">Expiration time in seconds.</param> void SetValue<T>(string key, T value, ushort expiryS); /// <summary> /// Remove a entry from the cache by key. /// </summary> /// <param name=\"key\">Key to remove from the cache.</param> void Remove(string key); /// <summary> /// Clears all cached entries. /// </summary> void Clear(); } IRoutingHost \uf0c1 Description \uf0c1 Generate routes (random, dynamic, bootstrap style, and POI focused) Optimize routes Class View \uf0c1 namespace ChuckDeviceController.Plugin; using ChuckDeviceController.Geometry.Models.Abstractions; /// <summary> /// Route generator plugin host. /// </summary> public interface IRoutingHost { /// <summary> /// Generates a route using the specified route generator options. /// </summary> /// <param name=\"options\">Routing generation options to use.</param> /// <returns>Returns a list of coordinates of the generated route.</returns> List<ICoordinate> GenerateRoute(RouteGeneratorOptions options); // TODO: OptimizeRoute // TODO: Clusters } IUIconsHost \uf0c1 Description \uf0c1 Retrieve/generate Pokemon icon urls Class View \uf0c1 namespace ChuckDeviceController.Plugin; /// <summary> /// UIcons standard host handler to retrieve icon url endpoints for plugins. /// </summary> public interface IUIconsHost { /// <summary> /// Gets an icon image url based on the provided Pokemon details. /// </summary> /// <param name=\"pokemonId\">Pokemon pokedex id.</param> /// <param name=\"formId\">Pokemon form id.</param> /// <param name=\"evolutionId\">Pokemon mega evolution id.</param> /// <param name=\"gender\">Pokemon gender id.</param> /// <param name=\"costumeId\">Pokemon costume id.</param> /// <param name=\"shiny\">Whether the Pokemon is shiny or not.</param> /// <returns>Returns a url of the Pokemon image.</returns> string GetPokemonIcon(uint pokemonId, uint formId = 0, uint evolutionId = 0, uint gender = 0, uint costumeId = 0, bool shiny = false); } IUiHost \uf0c1 Description \uf0c1 Add Dashboard statistics Add Dashboard tiles Add Sidebar menu items and pages (including endless dropdowns) Add new global settings as well as tabs to settings page Class View \uf0c1 namespace ChuckDeviceController.Plugin; /// <summary> /// Plugin host handler for executing user interface operations. /// </summary> public interface IUiHost { #region Properties /// <summary> /// Gets a list of sidebar items registered by plugins. /// </summary> IReadOnlyList<SidebarItem> SidebarItems { get; } /// <summary> /// Gets a list of dashboard statistics registered by plugins. /// </summary> IReadOnlyList<IDashboardStatsItem> DashboardStatsItems { get; } /// <summary> /// Gets a list of dashboard tiles registered by plugins. /// </summary> IReadOnlyList<IDashboardTile> DashboardTiles { get; } /// <summary> /// Gets a list of settings tabs registered by plugins. /// </summary> IReadOnlyList<ISettingsTab> SettingsTabs { get; } /// <summary> /// Gets a dictionary of settings properties for tabs registered by plugins. /// </summary> IReadOnlyDictionary<string, List<ISettingsProperty>> SettingsProperties { get; } #endregion #region Sidebar /// <summary> /// Adds a <seealso cref=\"SidebarItem\"/> item to the main /// application's Mvc sidebar. /// </summary> /// <param name=\"header\">Sidebar item to add.</param> Task AddSidebarItemAsync(SidebarItem header); /// <summary> /// Adds a list of <seealso cref=\"SidebarItem\"/> items to the /// main application's Mvc sidebar. /// </summary> /// <param name=\"headers\">List of sidebar items to add.</param> Task AddSidebarItemsAsync(IEnumerable<SidebarItem> headers); #endregion #region Dashboard Statistics /// <summary> /// Adds a custom <seealso cref=\"IDashboardStatsItem\"/> to the /// dashboard front page. /// </summary> /// <param name=\"stat\">Dashboard statistics item to add.</param> Task AddDashboardStatisticAsync(IDashboardStatsItem stat); /// <summary> /// Adds a list of <seealso cref=\"IDashboardStatsItem\"/> items to /// the dashboard front page. /// </summary> /// <param name=\"stats\">List of dashboard statistic items to add.</param> Task AddDashboardStatisticsAsync(IEnumerable<IDashboardStatsItem> stats); /// <summary> /// Update an existing <seealso cref=\"IDashboardStatsItem\"/> item /// on the dashboard front page. /// </summary> /// <param name=\"stat\">Dashboard statistics item to update.</param> Task UpdateDashboardStatisticAsync(IDashboardStatsItem stat); /// <summary> /// Update a list of existing <seealso cref=\"IDashboardStatsItem\"/> items /// on the dashboard front page. /// </summary> /// <param name=\"stats\">List of dashboard statistic items to update.</param> Task UpdateDashboardStatisticsAsync(IEnumerable<IDashboardStatsItem> stats); #endregion #region Dashboard Tiles /// <summary> /// Adds a statistic tile to the front page dashboard. /// </summary> /// <param name=\"tile\">Dashboard statistics tile to add.</param> Task AddDashboardTileAsync(IDashboardTile tile); /// <summary> /// Adds a list of statistic tiles to the front page dashboard. /// </summary> /// <param name=\"tiles\">List of dashboard statistic tiles to add.</param> Task AddDashboardTilesAsync(IEnumerable<IDashboardTile> tiles); #endregion #region Settings /// <summary> /// /// </summary> /// <param name=\"tab\"></param> Task AddSettingsTabAsync(SettingsTab tab); /// <summary> /// /// </summary> /// <param name=\"tabId\"></param> /// <param name=\"property\"></param> Task AddSettingsPropertyAsync(string tabId, SettingsProperty property); /// <summary> /// /// </summary> /// <param name=\"tabId\"></param> /// <param name=\"properties\"></param> Task AddSettingsPropertiesAsync(string tabId, IEnumerable<SettingsProperty> properties); /// <summary> /// /// </summary> /// <typeparam name=\"T\"></typeparam> /// <param name=\"name\"></param> T? GetSettingsPropertyValue<T>(string name); #endregion }","title":"Host Interfaces"},{"location":"plugin-system/host-interfaces/#plugin-host-interface-contracts","text":"","title":"Plugin Host Interface Contracts"},{"location":"plugin-system/host-interfaces/#iauthorizehost","text":"","title":"IAuthorizeHost"},{"location":"plugin-system/host-interfaces/#description","text":"Create new user identity roles to restrict routing endpoints in plugins","title":"Description"},{"location":"plugin-system/host-interfaces/#class-view","text":"namespace ChuckDeviceController.Plugin; /// <summary> /// User identity authorization host handler. /// </summary> public interface IAuthorizeHost { /// <summary> /// Registers a custom user role with the host application. /// </summary> /// <param name=\"name\"> /// The name of the role to register. /// </param> /// <param name=\"displayIndex\"> /// Display index value when listing roles. /// </param> /// <returns> /// Returns a value determining whether the role was registered /// or not. /// </returns> Task<bool> RegisterRole(string name, int displayIndex); }","title":"Class View"},{"location":"plugin-system/host-interfaces/#iconfigurationhost","text":"","title":"IConfigurationHost"},{"location":"plugin-system/host-interfaces/#description_1","text":"Load configuration files from file system Get property values from loaded configuration files","title":"Description"},{"location":"plugin-system/host-interfaces/#class-view_1","text":"namespace ChuckDeviceController.Plugin; using Microsoft.Extensions.Configuration; /// <summary> /// This interface contract can be used by all plugin modules to load setting and configuration data. /// /// The default implementation which is loaded if no other plugin registers an instance uses /// appsettings.json to store configuration data to be used by Plugins. /// /// An instance of this interface is available via the DI container, any custom implementations /// must be configured to be used in the DI contaner when being initialized. /// </summary> /// <remarks> /// This class can be customized by the host application, if no implementation is provided then /// a default implementation is provided. /// </remarks> public interface IConfigurationHost { /// <summary> /// Retrieves a configuration instance. /// </summary> /// <param name=\"jsonFileName\"> /// Name of the JSON file name to be used. If a JSON cofiguration file is not provided, the default /// 'appsettings.json' will be loaded from the calling plugin's root folder. /// </param> /// <param name=\"sectionName\"> /// The name of the configuration section that might be required. /// </param> /// <returns> /// Configuration file instance initialized with the required settings. /// </returns> IConfiguration GetConfiguration(string? jsonFileName = null, string? sectionName = null); /// <summary> /// Retrieves a value from a JSON configuration file. /// </summary> /// <typeparam name=\"T\">The class related to the settings being requested.</typeparam> /// <param name=\"name\">Name of the property to retrieve the value for.</param> /// <param name=\"defaultValue\">Default value to return.</param> /// <param name=\"sectionName\">The name of the configuration section that might be required.</param> /// <returns>Returns the value related to the named configuration property.</returns> T? GetValue<T>(string name, T? defaultValue = default, string? sectionName = null); }","title":"Class View"},{"location":"plugin-system/host-interfaces/#idatabasehost","text":"","title":"IDatabaseHost"},{"location":"plugin-system/host-interfaces/#description_2","text":"Retrieve all of a specified data entity (read only access) Retrieve a specific data entity by primary key (read only access) Retrieve a specific data entity by predicate/expression (read only access)","title":"Description"},{"location":"plugin-system/host-interfaces/#class-view_2","text":"namespace ChuckDeviceController.Plugin; using System.Linq.Expressions; using ChuckDeviceController.Data.Common; /// <summary> /// Plugin host handler contract used to interact with the database entities. /// </summary> public interface IDatabaseHost { //IRepository<IAccount, string> Accounts { get; } //IRepository<IPokestop, string> Pokestops { get; } //IRepository<IDevice, string> Devices { get; } /// <summary> /// Gets a list of database entities. /// </summary> /// <typeparam name=\"TEntity\">Database entity contract type.</typeparam> /// <returns>Returns a list of database entities.</returns> Task<IReadOnlyList<TEntity>> FindAllAsync<TEntity>(); /// <summary> /// Gets a database entity by primary key. /// </summary> /// <typeparam name=\"TEntity\">Database entity contract type.</typeparam> /// <typeparam name=\"TKey\">Database entity primary key type.</typeparam> /// <param name=\"id\">Primary key of the database entity.</param> /// <returns>Returns a database entity.</returns> Task<TEntity?> FindAsync<TEntity, TKey>(TKey id); /// <summary> /// Gets a list of database entities matching the specified criteria. /// </summary> /// <typeparam name=\"TKey\">Entity property type when sorting.</typeparam> /// <typeparam name=\"TEntity\">Database entity contract type.</typeparam> /// <param name=\"predicate\">Predicate used to determine if a database entity matches.</param> /// <param name=\"order\">Sort order expression. (Optional)</param> /// <param name=\"sortDirection\">Sort ordering direction.</param> /// <param name=\"limit\">Limit the returned number of results.</param> /// <returns>Returns a list of database entities.</returns> Task<IReadOnlyList<TEntity>> FindAsync<TEntity, TKey>( Expression<Func<TEntity, bool>> predicate, Expression<Func<TEntity, TKey>>? order = null, SortOrderDirection sortDirection = SortOrderDirection.Asc, int limit = 1000) where TEntity : class where TKey : notnull; }","title":"Class View"},{"location":"plugin-system/host-interfaces/#ieventaggregatorhost","text":"","title":"IEventAggregatorHost"},{"location":"plugin-system/host-interfaces/#description_3","text":"Publish events to the host application Publish events to other loaded plugins Subscribe to events via event service bus","title":"Description"},{"location":"plugin-system/host-interfaces/#class-view_3","text":"namespace ChuckDeviceController.Plugin.EventBus; /// <summary> /// /// </summary> public interface IEventAggregatorHost : IObservable<IEvent> { /// <summary> /// /// </summary> /// <param name=\"message\"></param> void Publish(IEvent message); /// <summary> /// /// </summary> /// <param name=\"observer\"></param> /// <returns></returns> IDisposable Subscribe(ICustomObserver<IEvent> observer); /// <summary> /// /// </summary> /// <typeparam name=\"T\"></typeparam> /// <param name=\"observer\"></param> /// <returns></returns> IDisposable Subscribe<T>(ICustomObserver<T> observer) where T : IEvent; }","title":"Class View"},{"location":"plugin-system/host-interfaces/#ifilestoragehost","text":"","title":"IFileStorageHost"},{"location":"plugin-system/host-interfaces/#description_4","text":"Load files from file system Save files to file system","title":"Description"},{"location":"plugin-system/host-interfaces/#class-view_4","text":"namespace ChuckDeviceController.Plugin; /// <summary> /// Interface contract used for reading data from as well as /// persisting data to storage. The type of storage used will /// depend on the implementation. /// </summary> public interface IFileStorageHost : ISaveData, ILoadData { } /// <summary> /// /// </summary> public interface ILoadData { /// <summary> /// Loads file data of type T from the plugin's folder. /// </summary> /// <typeparam name=\"T\"> /// Type of file data to be loaded. /// </typeparam> /// <param name=\"folderName\"> /// Sub folder within plugin's folder, optional. If not set, /// searches root of plugin's folder. /// </param> /// <param name=\"fileName\"> /// File name of storage file to load, including extension /// otherwise generic '.dat' extension will be appended. /// </param> /// <returns> /// Type of data to be loaded or default type if exception occurs. /// </returns> T Load<T>(string folderName, string fileName); } /// <summary> /// /// </summary> public interface ISaveData { /// <summary> /// Saves file data of type T to the plugin's folder. /// </summary> /// <typeparam name=\"T\"> /// Type of data to be saved. /// </typeparam> /// <param name=\"data\"> /// File data to be saved. /// </param> /// <param name=\"folderName\"> /// Sub folder within plugin's folder, optional. If not set, /// uses root of plugin's folder. /// </param> /// <param name=\"name\"> /// File name of storage file to save, including extension /// otherwise generic '.dat' extension will be appended. /// </param> /// <param name=\"prettyPrint\"> /// </param> /// <returns> /// Returns <c>true</c> if successful, otherwise <c>false</c>. /// </returns> bool Save<T>(T data, string folderName, string name, bool prettyPrint = false); }","title":"Class View"},{"location":"plugin-system/host-interfaces/#igeofenceservicehost","text":"","title":"IGeofenceServiceHost"},{"location":"plugin-system/host-interfaces/#description_5","text":"Fetch geofences Create geofences Check if coordinate is in geofence(s)","title":"Description"},{"location":"plugin-system/host-interfaces/#class-view_5","text":"namespace ChuckDeviceController.Plugin; using ChuckDeviceController.Data.Abstractions; using ChuckDeviceController.Geometry.Models.Abstractions; /// <summary> /// /// </summary> public interface IGeofenceServiceHost { /// <summary> /// Create a new or update an existing geofence. /// </summary> /// <param name=\"options\">Geofence options used to create or update.</param> Task CreateGeofenceAsync(IGeofence options); /// <summary> /// Retrieves a geofence from the database by name. /// </summary> /// <param name=\"name\">Name of geofence to retrieve.</param> /// <returns>Returns a geofence interface contract.</returns> Task<IGeofence> GetGeofenceAsync(string name); /// <summary> /// Gets the geofence boundaries in multipolygon format as well as a two-dimensional list of coordinates. /// </summary> /// <param name=\"geofence\">Geofence to get coordinates from.</param> /// <returns>Returns a tuple with a list of MultiPolygons and a two-dimensional list of coordinates.</returns> (IReadOnlyList<IMultiPolygon>, IReadOnlyList<IReadOnlyList<ICoordinate>>) GetMultiPolygons(IGeofence geofence); /// <summary> /// Gets the geofence location plots as a list of coordinates. /// </summary> /// <param name=\"geofence\">Geofence to get coordinates from.</param> /// <returns>Returns a list of coordinates.</returns> IReadOnlyList<ICoordinate>? GetCoordinates(IGeofence geofence); /// <summary> /// /// </summary> /// <param name=\"coord\"></param> /// <param name=\"multiPolygons\"></param> /// <returns></returns> bool IsPointInMultiPolygons(ICoordinate coord, IEnumerable<IMultiPolygon> multiPolygons); /// <summary> /// /// </summary> /// <param name=\"coord\"></param> /// <param name=\"multiPolygon\"></param> /// <returns></returns> bool IsPointInMultiPolygon(ICoordinate coord, IMultiPolygon multiPolygon); /// <summary> /// /// </summary> /// <param name=\"coord\"></param> /// <param name=\"coordinates\"></param> /// <returns></returns> bool IsPointInPolygon(ICoordinate coord, IEnumerable<ICoordinate> coordinates); }","title":"Class View"},{"location":"plugin-system/host-interfaces/#iinstanceservicehost","text":"","title":"IInstanceServiceHost"},{"location":"plugin-system/host-interfaces/#description_6","text":"Create new instances Update instances","title":"Description"},{"location":"plugin-system/host-interfaces/#class-view_6","text":"namespace ChuckDeviceController.Plugin; using ChuckDeviceController.Data.Abstractions; /// <summary> /// /// </summary> public interface IInstanceServiceHost { /// <summary> /// /// </summary> /// <param name=\"options\"></param> /// <returns></returns> Task CreateInstanceAsync(IInstance options); }","title":"Class View"},{"location":"plugin-system/host-interfaces/#ijobcontrollerservicehost","text":"","title":"IJobControllerServiceHost"},{"location":"plugin-system/host-interfaces/#description_7","text":"Register new custom job controller instance types Create new custom job controllers Assign devices to instances","title":"Description"},{"location":"plugin-system/host-interfaces/#class-view_7","text":"namespace ChuckDeviceController.Plugin; using ChuckDeviceController.Common.Jobs; using ChuckDeviceController.Data.Abstractions; /// <summary> /// Plugin host handler contract used to interact with and manage the /// job controller service. /// </summary> public interface IJobControllerServiceHost : IInstanceServiceHost { /// <summary> /// Gets a dictionary of active and configured devices. /// </summary> IReadOnlyDictionary<string, IDevice> Devices { get; } /// <summary> /// Gets a dictionary of all loaded job controller instances. /// </summary> IReadOnlyDictionary<string, IJobController> Instances { get; } /// <summary> /// Gets a list of all registered custom job controller instance types. /// </summary> IReadOnlyList<string> CustomInstanceTypes { get; } /// <summary> /// /// </summary> /// <typeparam name=\"T\"></typeparam> /// <param name=\"customInstanceType\"></param> /// <returns></returns> Task RegisterJobControllerAsync<T>(string customInstanceType) where T : IJobController; /// <summary> /// Assigns the specified device to a specific job controller /// instance by name. /// </summary> /// <param name=\"device\">Device entity.</param> /// <param name=\"instanceName\">Job controller instance name.</param> Task AssignDeviceToJobControllerAsync(IDevice device, string instanceName); }","title":"Class View"},{"location":"plugin-system/host-interfaces/#ilocalizationhost","text":"","title":"ILocalizationHost"},{"location":"plugin-system/host-interfaces/#description_8","text":"Set currently loaded locale Retrieve translated localized text","title":"Description"},{"location":"plugin-system/host-interfaces/#class-view_8","text":"namespace ChuckDeviceController.Plugin; using System.Globalization; /// <summary> /// Plugin host handler contract used to translate strings. /// </summary> public interface ILocalizationHost { #region Properties /// <summary> /// Gets or sets the current culture localization to use. /// </summary> CultureInfo CurrentCulture { get; } /// <summary> /// Gets the two letter ISO country code for the currently set localization. /// </summary> /// <value>The two letter ISO country code.</value> string CountryCode { get; } #endregion /// <summary> /// Sets the country locale code to use for translations. /// </summary> /// <param name=\"locale\">Two letter ISO language name code.</param> void SetLocale(string locale); /// <summary> /// /// </summary> /// <param name=\"key\"></param> /// <returns></returns> string Translate(string key); /// <summary> /// /// </summary> /// <param name=\"keyWithArgs\"></param> /// <param name=\"args\"></param> /// <returns></returns> string Translate(string keyWithArgs, params object[] args); /// <summary> /// Translate a Pokemon id to name. /// </summary> /// <param name=\"pokemonId\">Pokemon ID to translate to name.</param> /// <returns></returns> string GetPokemonName(uint pokemonId); /// <summary> /// Translate a Pokemon form id to name. /// </summary> /// <param name=\"formId\">Form ID to translate to name.</param> /// <param name=\"includeNormal\">Include 'Normal' form name or not.</param> /// <returns></returns> string GetFormName(uint formId, bool includeNormal = false); /// <summary> /// Translate a Pokemon costume id to name. /// </summary> /// <param name=\"costumeId\">Costume ID to translate to name.</param> /// <returns></returns> string GetCostumeName(uint costumeId); /// <summary> /// Translate a Pokemon evolution id to name. /// </summary> /// <param name=\"evolutionId\">Evolution ID to translate to name.</param> /// <returns></returns> string GetEvolutionName(uint evolutionId); /// <summary> /// /// </summary> /// <param name=\"moveId\"></param> /// <returns></returns> string GetMoveName(uint moveId); /// <summary> /// /// </summary> /// <param name=\"throwTypeId\"></param> /// <returns></returns> string GetThrowName(uint throwTypeId); /// <summary> /// /// </summary> /// <param name=\"itemId\"></param> /// <returns></returns> string GetItem(uint itemId); /// <summary> /// /// </summary> /// <param name=\"weatherConditionId\"></param> /// <returns></returns> string GetWeather(uint weatherConditionId); /// <summary> /// /// </summary> /// <param name=\"alignmentTypeId\"></param> /// <returns></returns> string GetAlignmentName(uint alignmentTypeId); /// <summary> /// /// </summary> /// <param name=\"characterCategoryId\"></param> /// <returns></returns> string GetCharacterCategoryName(uint characterCategoryId); /// <summary> /// /// </summary> /// <param name=\"invasionCharacterId\"></param> /// <returns></returns> string GetGruntType(uint invasionCharacterId); }","title":"Class View"},{"location":"plugin-system/host-interfaces/#ilogginghost","text":"","title":"ILoggingHost"},{"location":"plugin-system/host-interfaces/#description_9","text":"Log trace messages Log info messages Log debug messages Log warning messages Log error messages Log critical messages","title":"Description"},{"location":"plugin-system/host-interfaces/#class-view_9","text":"namespace ChuckDeviceController.Plugin; /// <summary> /// Plugin host handler for logging messages from plugins. /// </summary> public interface ILoggingHost { /// <summary> /// /// </summary> /// <param name=\"message\"></param> /// <param name=\"args\"></param> void LogTrace(string message, params object?[] args); /// <summary> /// /// </summary> /// <param name=\"message\"></param> /// <param name=\"args\"></param> void LogInformation(string message, params object?[] args); /// <summary> /// /// </summary> /// <param name=\"message\"></param> /// <param name=\"args\"></param> void LogDebug(string message, params object?[] args); /// <summary> /// /// </summary> /// <param name=\"message\"></param> /// <param name=\"args\"></param> void LogWarning(string message, params object?[] args); /// <summary> /// /// </summary> /// <param name=\"message\"></param> /// <param name=\"args\"></param> void LogError(string message, params object?[] args); /// <summary> /// /// </summary> /// <param name=\"error\"></param> /// <param name=\"message\"></param> /// <param name=\"args\"></param> void LogError(Exception error, string? message = null, params object?[] args); /// <summary> /// /// </summary> /// <param name=\"message\"></param> /// <param name=\"args\"></param> void LogCritical(string message, params object?[] args); /// <summary> /// /// </summary> /// <param name=\"error\"></param> /// <param name=\"message\"></param> /// <param name=\"args\"></param> void LogCritical(Exception error, string? message = null, params object?[] args); }","title":"Class View"},{"location":"plugin-system/host-interfaces/#imemorycachehost","text":"","title":"IMemoryCacheHost"},{"location":"plugin-system/host-interfaces/#description_10","text":"Cache data in-memory","title":"Description"},{"location":"plugin-system/host-interfaces/#class-view_10","text":"namespace ChuckDeviceController.Plugin; /// <summary> /// In memory cache host handler. /// </summary> public interface IMemoryCacheHost { /// <summary> /// Checks whether a key exists in the cache. /// </summary> /// <param name=\"key\">Key to check if exists.</param> /// <returns>Returns <c>true</c> if the key exists, otherwise <c>false</c>.</returns> bool IsSet(string key); /// <summary> /// Trys to retrieve a value by key from the cache. /// </summary> /// <typeparam name=\"T\">Type of value.</typeparam> /// <param name=\"key\">Key to check.</param> /// <param name=\"value\">Value returned from the cache.</param> /// <returns>Returns <c>true</c> if the key exists, otherwise <c>false</c>.</returns> bool TryGetValue<T>(string key, out T? value); /// <summary> /// Retrieve a value by key from the cache. /// </summary> /// <typeparam name=\"T\">Type of value.</typeparam> /// <param name=\"key\">Key to check.</param> /// <returns>Returns a value from the cache, otherwise <c>null</c>.</returns> T? GetValue<T>(string key); /// <summary> /// Caches a value by key with a set expiration time. /// </summary> /// <typeparam name=\"T\">Type of value.</typeparam> /// <param name=\"key\">Key to set.</param> /// <param name=\"value\">Value to cache.</param> /// <param name=\"expiryS\">Expiration time in seconds.</param> void SetValue<T>(string key, T value, ushort expiryS); /// <summary> /// Remove a entry from the cache by key. /// </summary> /// <param name=\"key\">Key to remove from the cache.</param> void Remove(string key); /// <summary> /// Clears all cached entries. /// </summary> void Clear(); }","title":"Class View"},{"location":"plugin-system/host-interfaces/#iroutinghost","text":"","title":"IRoutingHost"},{"location":"plugin-system/host-interfaces/#description_11","text":"Generate routes (random, dynamic, bootstrap style, and POI focused) Optimize routes","title":"Description"},{"location":"plugin-system/host-interfaces/#class-view_11","text":"namespace ChuckDeviceController.Plugin; using ChuckDeviceController.Geometry.Models.Abstractions; /// <summary> /// Route generator plugin host. /// </summary> public interface IRoutingHost { /// <summary> /// Generates a route using the specified route generator options. /// </summary> /// <param name=\"options\">Routing generation options to use.</param> /// <returns>Returns a list of coordinates of the generated route.</returns> List<ICoordinate> GenerateRoute(RouteGeneratorOptions options); // TODO: OptimizeRoute // TODO: Clusters }","title":"Class View"},{"location":"plugin-system/host-interfaces/#iuiconshost","text":"","title":"IUIconsHost"},{"location":"plugin-system/host-interfaces/#description_12","text":"Retrieve/generate Pokemon icon urls","title":"Description"},{"location":"plugin-system/host-interfaces/#class-view_12","text":"namespace ChuckDeviceController.Plugin; /// <summary> /// UIcons standard host handler to retrieve icon url endpoints for plugins. /// </summary> public interface IUIconsHost { /// <summary> /// Gets an icon image url based on the provided Pokemon details. /// </summary> /// <param name=\"pokemonId\">Pokemon pokedex id.</param> /// <param name=\"formId\">Pokemon form id.</param> /// <param name=\"evolutionId\">Pokemon mega evolution id.</param> /// <param name=\"gender\">Pokemon gender id.</param> /// <param name=\"costumeId\">Pokemon costume id.</param> /// <param name=\"shiny\">Whether the Pokemon is shiny or not.</param> /// <returns>Returns a url of the Pokemon image.</returns> string GetPokemonIcon(uint pokemonId, uint formId = 0, uint evolutionId = 0, uint gender = 0, uint costumeId = 0, bool shiny = false); }","title":"Class View"},{"location":"plugin-system/host-interfaces/#iuihost","text":"","title":"IUiHost"},{"location":"plugin-system/host-interfaces/#description_13","text":"Add Dashboard statistics Add Dashboard tiles Add Sidebar menu items and pages (including endless dropdowns) Add new global settings as well as tabs to settings page","title":"Description"},{"location":"plugin-system/host-interfaces/#class-view_13","text":"namespace ChuckDeviceController.Plugin; /// <summary> /// Plugin host handler for executing user interface operations. /// </summary> public interface IUiHost { #region Properties /// <summary> /// Gets a list of sidebar items registered by plugins. /// </summary> IReadOnlyList<SidebarItem> SidebarItems { get; } /// <summary> /// Gets a list of dashboard statistics registered by plugins. /// </summary> IReadOnlyList<IDashboardStatsItem> DashboardStatsItems { get; } /// <summary> /// Gets a list of dashboard tiles registered by plugins. /// </summary> IReadOnlyList<IDashboardTile> DashboardTiles { get; } /// <summary> /// Gets a list of settings tabs registered by plugins. /// </summary> IReadOnlyList<ISettingsTab> SettingsTabs { get; } /// <summary> /// Gets a dictionary of settings properties for tabs registered by plugins. /// </summary> IReadOnlyDictionary<string, List<ISettingsProperty>> SettingsProperties { get; } #endregion #region Sidebar /// <summary> /// Adds a <seealso cref=\"SidebarItem\"/> item to the main /// application's Mvc sidebar. /// </summary> /// <param name=\"header\">Sidebar item to add.</param> Task AddSidebarItemAsync(SidebarItem header); /// <summary> /// Adds a list of <seealso cref=\"SidebarItem\"/> items to the /// main application's Mvc sidebar. /// </summary> /// <param name=\"headers\">List of sidebar items to add.</param> Task AddSidebarItemsAsync(IEnumerable<SidebarItem> headers); #endregion #region Dashboard Statistics /// <summary> /// Adds a custom <seealso cref=\"IDashboardStatsItem\"/> to the /// dashboard front page. /// </summary> /// <param name=\"stat\">Dashboard statistics item to add.</param> Task AddDashboardStatisticAsync(IDashboardStatsItem stat); /// <summary> /// Adds a list of <seealso cref=\"IDashboardStatsItem\"/> items to /// the dashboard front page. /// </summary> /// <param name=\"stats\">List of dashboard statistic items to add.</param> Task AddDashboardStatisticsAsync(IEnumerable<IDashboardStatsItem> stats); /// <summary> /// Update an existing <seealso cref=\"IDashboardStatsItem\"/> item /// on the dashboard front page. /// </summary> /// <param name=\"stat\">Dashboard statistics item to update.</param> Task UpdateDashboardStatisticAsync(IDashboardStatsItem stat); /// <summary> /// Update a list of existing <seealso cref=\"IDashboardStatsItem\"/> items /// on the dashboard front page. /// </summary> /// <param name=\"stats\">List of dashboard statistic items to update.</param> Task UpdateDashboardStatisticsAsync(IEnumerable<IDashboardStatsItem> stats); #endregion #region Dashboard Tiles /// <summary> /// Adds a statistic tile to the front page dashboard. /// </summary> /// <param name=\"tile\">Dashboard statistics tile to add.</param> Task AddDashboardTileAsync(IDashboardTile tile); /// <summary> /// Adds a list of statistic tiles to the front page dashboard. /// </summary> /// <param name=\"tiles\">List of dashboard statistic tiles to add.</param> Task AddDashboardTilesAsync(IEnumerable<IDashboardTile> tiles); #endregion #region Settings /// <summary> /// /// </summary> /// <param name=\"tab\"></param> Task AddSettingsTabAsync(SettingsTab tab); /// <summary> /// /// </summary> /// <param name=\"tabId\"></param> /// <param name=\"property\"></param> Task AddSettingsPropertyAsync(string tabId, SettingsProperty property); /// <summary> /// /// </summary> /// <param name=\"tabId\"></param> /// <param name=\"properties\"></param> Task AddSettingsPropertiesAsync(string tabId, IEnumerable<SettingsProperty> properties); /// <summary> /// /// </summary> /// <typeparam name=\"T\"></typeparam> /// <param name=\"name\"></param> T? GetSettingsPropertyValue<T>(string name); #endregion }","title":"Class View"},{"location":"plugin-system/project-templates/","text":"Visual Studio Templates \uf0c1 Installation \uf0c1 Download the project template .zip file(s) in the src/Templates folder via GitHub. Alternatively, you can clone the repository: git clone https://github.com/versx/ChuckDeviceController Copy the project template package(s) ( .zip ) from src/Templates/%ProjectTemplateName%.zip to %USERPROFILE%/Documents/Visual Studio 2022/Templates/ProjectTemplates/Visual C#/%ProjectTemplateName%.zip Now you can search for chuck when creating a new plugin via Visual Studio from the new project creation screen to select from the different pre-configured ChuckDeviceController plugin project templates. Once you select the type of plugin project to create, you can refer to the Plugin API SDK Documentation for more in-depth details. Plugin Templates \uf0c1 ChuckPlugin \uf0c1 .NET Core Apps Documentation: Create a library ChuckPluginMvc \uf0c1 ASP.NET Core MVC (Model-View-Controller) Web Apps Documentation: Overview Controllers Views Partial Views Routing Tutorial ASP.NET Core Web API Apps Documentation: Overview Tutorials Create a web API with controllers Create a minimal web API Create a web API ChuckPluginRazor \uf0c1 ASP.NET Core Razor Pages Documentation: Overview Tutorials Overview Get started Add a model Scaffolding Work with a database Update the pages Add search Add a new field Add validation Filters Route and app conventions ChuckPluginBlazor (Untested) \uf0c1 ASP.NET Core Blazor Apps Documentation: Overview","title":"Visual Studio Templates"},{"location":"plugin-system/project-templates/#visual-studio-templates","text":"","title":"Visual Studio Templates"},{"location":"plugin-system/project-templates/#installation","text":"Download the project template .zip file(s) in the src/Templates folder via GitHub. Alternatively, you can clone the repository: git clone https://github.com/versx/ChuckDeviceController Copy the project template package(s) ( .zip ) from src/Templates/%ProjectTemplateName%.zip to %USERPROFILE%/Documents/Visual Studio 2022/Templates/ProjectTemplates/Visual C#/%ProjectTemplateName%.zip Now you can search for chuck when creating a new plugin via Visual Studio from the new project creation screen to select from the different pre-configured ChuckDeviceController plugin project templates. Once you select the type of plugin project to create, you can refer to the Plugin API SDK Documentation for more in-depth details.","title":"Installation"},{"location":"plugin-system/project-templates/#plugin-templates","text":"","title":"Plugin Templates"},{"location":"plugin-system/project-templates/#chuckplugin","text":".NET Core Apps Documentation: Create a library","title":"ChuckPlugin"},{"location":"plugin-system/project-templates/#chuckpluginmvc","text":"ASP.NET Core MVC (Model-View-Controller) Web Apps Documentation: Overview Controllers Views Partial Views Routing Tutorial ASP.NET Core Web API Apps Documentation: Overview Tutorials Create a web API with controllers Create a minimal web API Create a web API","title":"ChuckPluginMvc"},{"location":"plugin-system/project-templates/#chuckpluginrazor","text":"ASP.NET Core Razor Pages Documentation: Overview Tutorials Overview Get started Add a model Scaffolding Work with a database Update the pages Add search Add a new field Add validation Filters Route and app conventions","title":"ChuckPluginRazor"},{"location":"plugin-system/project-templates/#chuckpluginblazor-untested","text":"ASP.NET Core Blazor Apps Documentation: Overview","title":"ChuckPluginBlazor (Untested)"},{"location":"plugins/BitbucketAuthProviderPlugin/","text":"BitbucketAuthProviderPlugin \uf0c1 Configuration Setup \uf0c1 https://bitbucket.org/{your-workplace}/workspace/settings/oauth-consumers Callback \uf0c1 http(s)://127.0.0.1:8881/signin-bitbucket Example appsettings.json \uf0c1 { \"BitBucket\": { \"Enabled\": true, \"ClientId\": \"\", \"ClientSecret\": \"\" }, \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft.AspNetCore\": \"Warning\" } }, \"AllowedHosts\": \"*\" }","title":"BitbucketAuthProviderPlugin"},{"location":"plugins/BitbucketAuthProviderPlugin/#bitbucketauthproviderplugin","text":"","title":"BitbucketAuthProviderPlugin"},{"location":"plugins/BitbucketAuthProviderPlugin/#configuration-setup","text":"https://bitbucket.org/{your-workplace}/workspace/settings/oauth-consumers","title":"Configuration Setup"},{"location":"plugins/BitbucketAuthProviderPlugin/#callback","text":"http(s)://127.0.0.1:8881/signin-bitbucket","title":"Callback"},{"location":"plugins/BitbucketAuthProviderPlugin/#example-appsettingsjson","text":"{ \"BitBucket\": { \"Enabled\": true, \"ClientId\": \"\", \"ClientSecret\": \"\" }, \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft.AspNetCore\": \"Warning\" } }, \"AllowedHosts\": \"*\" }","title":"Example appsettings.json"},{"location":"plugins/DeviceAuthPlugin/","text":"DeviceAuthPlugin \uf0c1 Example appsettings.json \uf0c1 { \"IpAuth\": { \"Enabled\": false, \"IpAddresses\": [ \"10.0.0.1/24\", \"10.0.0.1-10.3.0.254\", \"10.0.0.2\" ] }, \"TokenAuth\": { \"Enabled\": false, \"Tokens\": [] }, \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft.AspNetCore\": \"Warning\" } }, \"AllowedHosts\": \"*\" }","title":"DeviceAuthPlugin"},{"location":"plugins/DeviceAuthPlugin/#deviceauthplugin","text":"","title":"DeviceAuthPlugin"},{"location":"plugins/DeviceAuthPlugin/#example-appsettingsjson","text":"{ \"IpAuth\": { \"Enabled\": false, \"IpAddresses\": [ \"10.0.0.1/24\", \"10.0.0.1-10.3.0.254\", \"10.0.0.2\" ] }, \"TokenAuth\": { \"Enabled\": false, \"Tokens\": [] }, \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft.AspNetCore\": \"Warning\" } }, \"AllowedHosts\": \"*\" }","title":"Example appsettings.json"},{"location":"plugins/Example.DotNetCorePlugin/","text":"Example.DotNetCorePlugin \uf0c1","title":"Example.DotNetCorePlugin"},{"location":"plugins/Example.DotNetCorePlugin/#exampledotnetcoreplugin","text":"","title":"Example.DotNetCorePlugin"},{"location":"plugins/FindyJumpyPlugin/","text":"FindyJumpyPlugin \uf0c1","title":"FindyJumpyPlugin"},{"location":"plugins/FindyJumpyPlugin/#findyjumpyplugin","text":"","title":"FindyJumpyPlugin"},{"location":"plugins/GitLabAuthProviderPlugin/","text":"GitLabAuthProviderPlugin \uf0c1 Configuration Setup \uf0c1 https://gitlab.com/-/profile/applications Callback \uf0c1 http(s)://127.0.0.1:8881/signin-gitlab Example appsettings.json \uf0c1 { \"GitLab\": { \"Enabled\": false, \"ClientId\": \"\", \"ClientSecret\": \"\" }, \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft.AspNetCore\": \"Warning\" } }, \"AllowedHosts\": \"*\" }","title":"GitLabAuthProviderPlugin"},{"location":"plugins/GitLabAuthProviderPlugin/#gitlabauthproviderplugin","text":"","title":"GitLabAuthProviderPlugin"},{"location":"plugins/GitLabAuthProviderPlugin/#configuration-setup","text":"https://gitlab.com/-/profile/applications","title":"Configuration Setup"},{"location":"plugins/GitLabAuthProviderPlugin/#callback","text":"http(s)://127.0.0.1:8881/signin-gitlab","title":"Callback"},{"location":"plugins/GitLabAuthProviderPlugin/#example-appsettingsjson","text":"{ \"GitLab\": { \"Enabled\": false, \"ClientId\": \"\", \"ClientSecret\": \"\" }, \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft.AspNetCore\": \"Warning\" } }, \"AllowedHosts\": \"*\" }","title":"Example appsettings.json"},{"location":"plugins/HealthChecksPlugin/","text":"HealthChecksPlugin \uf0c1","title":"HealthChecksPlugin"},{"location":"plugins/HealthChecksPlugin/#healthchecksplugin","text":"","title":"HealthChecksPlugin"},{"location":"plugins/MemoryBenchmarkPlugin/","text":"MemoryBenchmarkPlugin \uf0c1","title":"MemoryBenchmarkPlugin"},{"location":"plugins/MemoryBenchmarkPlugin/#memorybenchmarkplugin","text":"","title":"MemoryBenchmarkPlugin"},{"location":"plugins/MicrosoftAuthProviderPlugin/","text":"MicrosoftAuthProviderPlugin \uf0c1 Configuration Setup \uf0c1 https://learn.microsoft.com/en-us/aspnet/core/security/authentication/social/microsoft-logins Callback \uf0c1 http(s)://127.0.0.1:8881/signin-microsoft Example appsettings.json \uf0c1 { \"Microsoft\": { \"Enabled\": false, \"ClientId\": \"\", \"ClientSecret\": \"\" }, \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft.AspNetCore\": \"Warning\" } }, \"AllowedHosts\": \"*\" }","title":"MicrosoftAuthProviderPlugin"},{"location":"plugins/MicrosoftAuthProviderPlugin/#microsoftauthproviderplugin","text":"","title":"MicrosoftAuthProviderPlugin"},{"location":"plugins/MicrosoftAuthProviderPlugin/#configuration-setup","text":"https://learn.microsoft.com/en-us/aspnet/core/security/authentication/social/microsoft-logins","title":"Configuration Setup"},{"location":"plugins/MicrosoftAuthProviderPlugin/#callback","text":"http(s)://127.0.0.1:8881/signin-microsoft","title":"Callback"},{"location":"plugins/MicrosoftAuthProviderPlugin/#example-appsettingsjson","text":"{ \"Microsoft\": { \"Enabled\": false, \"ClientId\": \"\", \"ClientSecret\": \"\" }, \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft.AspNetCore\": \"Warning\" } }, \"AllowedHosts\": \"*\" }","title":"Example appsettings.json"},{"location":"plugins/MiniProviderPlugin/","text":"MiniProviderPlugin \uf0c1","title":"MiniProviderPlugin"},{"location":"plugins/MiniProviderPlugin/#miniproviderplugin","text":"","title":"MiniProviderPlugin"},{"location":"plugins/PogoEventsPlugin/","text":"PogoEventsPlugin \uf0c1 Example appsettings.json \uf0c1 { \"Discord\": { // Whether or not to enable Discord posting of new events \"Enabled\": false, // Discord bot token \"Token\": \"\", \"LogLevel\": \"Information\", // Dictionary of Discord Guilds \"Guilds\": { // Discord Guild ID \"0000000\": { // User, Role, and Channel mention strings to include in new event posts \"Mention\": \"\", // Events channel ID to post new events \"EventsChannelId\": \"000000\", // Events category channel ID to create active event channels \"EventsCategoryChannelId\": \"000000\", // Whether to delete previous events that have expired \"DeletePreviousEvents\": false, // Active event channel naming format // Default order: // - {0}: Month // - {1}: Day // - {2}: Event Name \"ChannelNameFormat\": \"{0}-{1} {2}\", // Discord User IDs to send new event posts \"UserIds\": [] } } }, \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft.AspNetCore\": \"Warning\" } }, \"AllowedHosts\": \"*\" }","title":"PogoEventsPlugin"},{"location":"plugins/PogoEventsPlugin/#pogoeventsplugin","text":"","title":"PogoEventsPlugin"},{"location":"plugins/PogoEventsPlugin/#example-appsettingsjson","text":"{ \"Discord\": { // Whether or not to enable Discord posting of new events \"Enabled\": false, // Discord bot token \"Token\": \"\", \"LogLevel\": \"Information\", // Dictionary of Discord Guilds \"Guilds\": { // Discord Guild ID \"0000000\": { // User, Role, and Channel mention strings to include in new event posts \"Mention\": \"\", // Events channel ID to post new events \"EventsChannelId\": \"000000\", // Events category channel ID to create active event channels \"EventsCategoryChannelId\": \"000000\", // Whether to delete previous events that have expired \"DeletePreviousEvents\": false, // Active event channel naming format // Default order: // - {0}: Month // - {1}: Day // - {2}: Event Name \"ChannelNameFormat\": \"{0}-{1} {2}\", // Discord User IDs to send new event posts \"UserIds\": [] } } }, \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft.AspNetCore\": \"Warning\" } }, \"AllowedHosts\": \"*\" }","title":"Example appsettings.json"},{"location":"plugins/RazorTestPlugin/","text":"RazorTestPlugin \uf0c1","title":"RazorTestPlugin"},{"location":"plugins/RazorTestPlugin/#razortestplugin","text":"","title":"RazorTestPlugin"},{"location":"plugins/RedditAuthProviderPlugin/","text":"RedditAuthProviderPlugin \uf0c1 Configuration Setup \uf0c1 https://www.reddit.com/prefs/apps Callback \uf0c1 http(s)://127.0.0.1:8881/signin-reddit Example appsettings.json \uf0c1 { \"Reddit\": { \"Enabled\": false, \"ClientId\": \"\", \"ClientSecret\": \"\" }, \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft.AspNetCore\": \"Warning\" } }, \"AllowedHosts\": \"*\" }","title":"RedditAuthProviderPlugin"},{"location":"plugins/RedditAuthProviderPlugin/#redditauthproviderplugin","text":"","title":"RedditAuthProviderPlugin"},{"location":"plugins/RedditAuthProviderPlugin/#configuration-setup","text":"https://www.reddit.com/prefs/apps","title":"Configuration Setup"},{"location":"plugins/RedditAuthProviderPlugin/#callback","text":"http(s)://127.0.0.1:8881/signin-reddit","title":"Callback"},{"location":"plugins/RedditAuthProviderPlugin/#example-appsettingsjson","text":"{ \"Reddit\": { \"Enabled\": false, \"ClientId\": \"\", \"ClientSecret\": \"\" }, \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft.AspNetCore\": \"Warning\" } }, \"AllowedHosts\": \"*\" }","title":"Example appsettings.json"},{"location":"plugins/RequestBenchmarkPlugin/","text":"RequestBenchmarkPlugin \uf0c1 Example appsettings.json \uf0c1 { // Determines whether or not to include gRPC requests in benchmarks \"IgnoreGrpcRequests\": false, \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft.AspNetCore\": \"Warning\" } }, \"AllowedHosts\": \"*\" }","title":"RequestBenchmarkPlugin"},{"location":"plugins/RequestBenchmarkPlugin/#requestbenchmarkplugin","text":"","title":"RequestBenchmarkPlugin"},{"location":"plugins/RequestBenchmarkPlugin/#example-appsettingsjson","text":"{ // Determines whether or not to include gRPC requests in benchmarks \"IgnoreGrpcRequests\": false, \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft.AspNetCore\": \"Warning\" } }, \"AllowedHosts\": \"*\" }","title":"Example appsettings.json"},{"location":"plugins/RobotsPlugin/","text":"RobotsPlugin \uf0c1 Example appsettings.json \uf0c1 { \"WebCrawler\": { // Determines whether or not to use the honey pot trap service. \"UseHoneyPotService\": false, // Defines the honey pot route to trap any web crawler bots that discover it. // Web crawler details (UserAgent and IP Address) will be log to `honeypot.txt` in the plugins root folder. \"HoneyPotRoute\": \"/identity/reveal\", // Determines whether or not to process static files. (i.e. .js, .css, images, etc) \"ProcessStaticFiles\": false, // Defines the static file extensions to ignore or include, depending on `ProcessStaticFiles` value. \"StaticFileExtensions\": [ \".less\", \".ico\", \".css\", \".js\", \".svg\", \".jpg\", \".jpeg\", \".gif\", \".png\", \".eot\", \".map;\" ] }, \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft.AspNetCore\": \"Warning\" } }, \"AllowedHosts\": \"*\" }","title":"RobotsPlugin"},{"location":"plugins/RobotsPlugin/#robotsplugin","text":"","title":"RobotsPlugin"},{"location":"plugins/RobotsPlugin/#example-appsettingsjson","text":"{ \"WebCrawler\": { // Determines whether or not to use the honey pot trap service. \"UseHoneyPotService\": false, // Defines the honey pot route to trap any web crawler bots that discover it. // Web crawler details (UserAgent and IP Address) will be log to `honeypot.txt` in the plugins root folder. \"HoneyPotRoute\": \"/identity/reveal\", // Determines whether or not to process static files. (i.e. .js, .css, images, etc) \"ProcessStaticFiles\": false, // Defines the static file extensions to ignore or include, depending on `ProcessStaticFiles` value. \"StaticFileExtensions\": [ \".less\", \".ico\", \".css\", \".js\", \".svg\", \".jpg\", \".jpeg\", \".gif\", \".png\", \".eot\", \".map;\" ] }, \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft.AspNetCore\": \"Warning\" } }, \"AllowedHosts\": \"*\" }","title":"Example appsettings.json"},{"location":"plugins/TestPlugin/","text":"TestPlugin \uf0c1","title":"TestPlugin"},{"location":"plugins/TestPlugin/#testplugin","text":"","title":"TestPlugin"},{"location":"plugins/TodoPlugin/","text":"TodoPlugin \uf0c1","title":"TodoPlugin"},{"location":"plugins/TodoPlugin/#todoplugin","text":"","title":"TodoPlugin"},{"location":"plugins/VisualStudioAuthProviderPlugin/","text":"VisualStudioAuthProviderPlugin \uf0c1 Configuration Setup \uf0c1 https://app.vssps.visualstudio.com Callback \uf0c1 http(s)://127.0.0.1:8881/signin-visualstudio Example appsettings.json \uf0c1 { \"VisualStudio\": { \"Enabled\": false, \"ClientId\": \"\", \"ClientSecret\": \"\" }, \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft.AspNetCore\": \"Warning\" } }, \"AllowedHosts\": \"*\" }","title":"VisualStudioAuthProviderPlugin"},{"location":"plugins/VisualStudioAuthProviderPlugin/#visualstudioauthproviderplugin","text":"","title":"VisualStudioAuthProviderPlugin"},{"location":"plugins/VisualStudioAuthProviderPlugin/#configuration-setup","text":"https://app.vssps.visualstudio.com","title":"Configuration Setup"},{"location":"plugins/VisualStudioAuthProviderPlugin/#callback","text":"http(s)://127.0.0.1:8881/signin-visualstudio","title":"Callback"},{"location":"plugins/VisualStudioAuthProviderPlugin/#example-appsettingsjson","text":"{ \"VisualStudio\": { \"Enabled\": false, \"ClientId\": \"\", \"ClientSecret\": \"\" }, \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft.AspNetCore\": \"Warning\" } }, \"AllowedHosts\": \"*\" }","title":"Example appsettings.json"},{"location":"plugins/overview/","text":"Plugins Included \uf0c1 Roughly 17 plugins are included and provided by default. BitbucketAuthProviderPlugin \uf0c1 Adds Bitbucket.org user authentication support. DeviceAuthPlugin \uf0c1 Adds device token and IP based device authentication support. Example.DotNetCorePlugin \uf0c1 Very basic 'Clock' plugin example. FindyJumpyPlugin \uf0c1 Adds new Pokemon spawnpoint job controllers. GitLabAuthProviderPlugin \uf0c1 Adds GitLab.com user authentication support. HealthChecksPlugin \uf0c1 Adds health checks endpoint and UI. MemoryBenchmarkPlugin \uf0c1 Displays basic memory usage information and chart. MicrosoftAuthProviderPlugin \uf0c1 Adds Microsoft.com account authentication support. MiniProfilerPlugin \uf0c1 Adds basic profiling options and data. PogoEventsPlugin \uf0c1 Provides current and upcoming Pokemon Go events. RazorTestPlugin \uf0c1 Very basic Razor Mvc pages plugin example. RedditAuthProviderPlugin \uf0c1 Adds Reddit.com user authentication support. RequestBenchmarkPlugin \uf0c1 Displays web request benchmark times for routes used. RobotsPlugin \uf0c1 Adds web crawler robots management based on specified UserAgent strings and routes which creates a dynamic robots.txt file. TestPlugin \uf0c1 In-depth example plugin demonstrating all, if not most, possible functionality of the plugin system. TodoPlugin \uf0c1 Basic TODO list plugin that adds support for keeping track of things to do. Tasks are saved in-memory and do not persist. VisualStudioAuthProviderPlugin \uf0c1 Adds VisualStudioOnline.com user authentication support.","title":"Overview"},{"location":"plugins/overview/#plugins-included","text":"Roughly 17 plugins are included and provided by default.","title":"Plugins Included"},{"location":"plugins/overview/#bitbucketauthproviderplugin","text":"Adds Bitbucket.org user authentication support.","title":"BitbucketAuthProviderPlugin"},{"location":"plugins/overview/#deviceauthplugin","text":"Adds device token and IP based device authentication support.","title":"DeviceAuthPlugin"},{"location":"plugins/overview/#exampledotnetcoreplugin","text":"Very basic 'Clock' plugin example.","title":"Example.DotNetCorePlugin"},{"location":"plugins/overview/#findyjumpyplugin","text":"Adds new Pokemon spawnpoint job controllers.","title":"FindyJumpyPlugin"},{"location":"plugins/overview/#gitlabauthproviderplugin","text":"Adds GitLab.com user authentication support.","title":"GitLabAuthProviderPlugin"},{"location":"plugins/overview/#healthchecksplugin","text":"Adds health checks endpoint and UI.","title":"HealthChecksPlugin"},{"location":"plugins/overview/#memorybenchmarkplugin","text":"Displays basic memory usage information and chart.","title":"MemoryBenchmarkPlugin"},{"location":"plugins/overview/#microsoftauthproviderplugin","text":"Adds Microsoft.com account authentication support.","title":"MicrosoftAuthProviderPlugin"},{"location":"plugins/overview/#miniprofilerplugin","text":"Adds basic profiling options and data.","title":"MiniProfilerPlugin"},{"location":"plugins/overview/#pogoeventsplugin","text":"Provides current and upcoming Pokemon Go events.","title":"PogoEventsPlugin"},{"location":"plugins/overview/#razortestplugin","text":"Very basic Razor Mvc pages plugin example.","title":"RazorTestPlugin"},{"location":"plugins/overview/#redditauthproviderplugin","text":"Adds Reddit.com user authentication support.","title":"RedditAuthProviderPlugin"},{"location":"plugins/overview/#requestbenchmarkplugin","text":"Displays web request benchmark times for routes used.","title":"RequestBenchmarkPlugin"},{"location":"plugins/overview/#robotsplugin","text":"Adds web crawler robots management based on specified UserAgent strings and routes which creates a dynamic robots.txt file.","title":"RobotsPlugin"},{"location":"plugins/overview/#testplugin","text":"In-depth example plugin demonstrating all, if not most, possible functionality of the plugin system.","title":"TestPlugin"},{"location":"plugins/overview/#todoplugin","text":"Basic TODO list plugin that adds support for keeping track of things to do. Tasks are saved in-memory and do not persist.","title":"TodoPlugin"},{"location":"plugins/overview/#visualstudioauthproviderplugin","text":"Adds VisualStudioOnline.com user authentication support.","title":"VisualStudioAuthProviderPlugin"}]}