// <auto-generated />
using System;
using ChuckDeviceController.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChuckDeviceController.Migrations.MapData
{
    [DbContext(typeof(MapContext))]
    [Migration("20220727211934_FixPvpColumnDefault")]
    partial class FixPvpColumnDefault
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ChuckDeviceController.Data.Entities.Cell", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<double>("Latitude")
                        .HasColumnType("double")
                        .HasColumnName("center_lat");

                    b.Property<ushort>("Level")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("level");

                    b.Property<double>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("center_lon");

                    b.Property<ulong>("Updated")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.ToTable("s2cell");
                });

            modelBuilder.Entity("ChuckDeviceController.Data.Entities.Gym", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<ushort>("AvailableSlots")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("available_slots");

                    b.Property<ulong>("CellId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("cell_id");

                    b.Property<ulong>("FirstSeenTimestamp")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("first_seen_timestamp");

                    b.Property<uint>("GuardingPokemonId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("guarding_pokemon_id");

                    b.Property<bool>("InBattle")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("in_battle");

                    b.Property<bool?>("IsArScanEligible")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ar_scan_eligible");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("deleted");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enabled");

                    b.Property<bool>("IsExRaidEligible")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ex_raid_eligible");

                    b.Property<ulong>("LastModifiedTimestamp")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("last_modified_timestamp");

                    b.Property<double>("Latitude")
                        .HasColumnType("double")
                        .HasColumnName("lat");

                    b.Property<double>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("lon");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<ulong?>("PowerUpEndTimestamp")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("power_up_end_timestamp");

                    b.Property<ushort?>("PowerUpLevel")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("power_up_level");

                    b.Property<uint?>("PowerUpPoints")
                        .HasColumnType("int unsigned")
                        .HasColumnName("power_up_points");

                    b.Property<ulong?>("RaidBattleTimestamp")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("raid_battle_timestamp");

                    b.Property<ulong?>("RaidEndTimestamp")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("raid_end_timestamp");

                    b.Property<bool?>("RaidIsExclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("raid_is_exclusive");

                    b.Property<ushort?>("RaidLevel")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("raid_level");

                    b.Property<uint?>("RaidPokemonCP")
                        .HasColumnType("int unsigned")
                        .HasColumnName("raid_pokemon_cp");

                    b.Property<uint?>("RaidPokemonCostume")
                        .HasColumnType("int unsigned")
                        .HasColumnName("raid_pokemon_costume");

                    b.Property<uint?>("RaidPokemonEvolution")
                        .HasColumnType("int unsigned")
                        .HasColumnName("raid_pokemon_evolution");

                    b.Property<uint?>("RaidPokemonForm")
                        .HasColumnType("int unsigned")
                        .HasColumnName("raid_pokemon_form");

                    b.Property<ushort?>("RaidPokemonGender")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("raid_pokemon_gender");

                    b.Property<uint?>("RaidPokemonId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("raid_pokemon_id");

                    b.Property<uint?>("RaidPokemonMove1")
                        .HasColumnType("int unsigned")
                        .HasColumnName("raid_pokemon_move_1");

                    b.Property<uint?>("RaidPokemonMove2")
                        .HasColumnType("int unsigned")
                        .HasColumnName("raid_pokemon_move_2");

                    b.Property<ulong?>("RaidSpawnTimestamp")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("raid_spawn_timestamp");

                    b.Property<uint?>("SponsorId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("sponsor_id");

                    b.Property<int>("Team")
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    b.Property<int>("TotalCP")
                        .HasColumnType("int")
                        .HasColumnName("total_cp");

                    b.Property<ulong>("Updated")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("updated");

                    b.Property<string>("Url")
                        .HasColumnType("longtext")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.ToTable("gym");
                });

            modelBuilder.Entity("ChuckDeviceController.Data.Entities.GymDefender", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<ushort>("AttackIV")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("atk_iv");

                    b.Property<uint>("BattlesAttacked")
                        .HasColumnType("int unsigned")
                        .HasColumnName("battles_attacked");

                    b.Property<uint>("BattlesDefended")
                        .HasColumnType("int unsigned")
                        .HasColumnName("battles_defended");

                    b.Property<uint>("BattlesLost")
                        .HasColumnType("int unsigned")
                        .HasColumnName("battles_lost");

                    b.Property<uint>("BattlesWon")
                        .HasColumnType("int unsigned")
                        .HasColumnName("battles_won");

                    b.Property<double>("BerryValue")
                        .HasColumnType("double")
                        .HasColumnName("berry_value");

                    b.Property<uint>("BuddyCandyAwarded")
                        .HasColumnType("int unsigned")
                        .HasColumnName("buddy_candy_awarded");

                    b.Property<double>("BuddyKmWalked")
                        .HasColumnType("double")
                        .HasColumnName("buddy_km_walked");

                    b.Property<uint>("CoinsReturned")
                        .HasColumnType("int unsigned")
                        .HasColumnName("coins_returned");

                    b.Property<ushort>("Costume")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("costume");

                    b.Property<uint>("Cp")
                        .HasColumnType("int unsigned")
                        .HasColumnName("cp");

                    b.Property<uint>("CpNow")
                        .HasColumnType("int unsigned")
                        .HasColumnName("cp_now");

                    b.Property<uint>("CpWhenDeployed")
                        .HasColumnType("int unsigned")
                        .HasColumnName("cp_when_deployed");

                    b.Property<ushort>("DefenseIV")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("def_iv");

                    b.Property<ulong>("DeploymentDuration")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("deployment_duration");

                    b.Property<ushort>("DisplayPokemonId")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("display_pokemon_id");

                    b.Property<ushort>("Form")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("form");

                    b.Property<string>("FortId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("fort_id");

                    b.Property<bool>("FromFort")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("from_fort");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("gender");

                    b.Property<bool>("HatchedFromEgg")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("hatched_from_egg");

                    b.Property<double>("HeightM")
                        .HasColumnType("double")
                        .HasColumnName("height_m");

                    b.Property<bool>("IsBad")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_bad");

                    b.Property<bool>("IsEgg")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_egg");

                    b.Property<bool>("IsLucky")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_lucky");

                    b.Property<bool>("IsShiny")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("shiny");

                    b.Property<ushort>("Move1")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("move_1");

                    b.Property<ushort>("Move2")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("move_2");

                    b.Property<ushort>("Move3")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("move_3");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nickname");

                    b.Property<uint>("NpcCombatTotal")
                        .HasColumnType("int unsigned")
                        .HasColumnName("npc_combat_total");

                    b.Property<uint>("NpcCombatWon")
                        .HasColumnType("int unsigned")
                        .HasColumnName("npc_combat_won");

                    b.Property<ushort>("PokemonId")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("pokemon_id");

                    b.Property<uint>("PvpCombatTotal")
                        .HasColumnType("int unsigned")
                        .HasColumnName("pvp_combat_total");

                    b.Property<uint>("PvpCombatWon")
                        .HasColumnType("int unsigned")
                        .HasColumnName("pvp_combat_won");

                    b.Property<ushort>("StaminaIV")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("sta_iv");

                    b.Property<uint>("TimesFed")
                        .HasColumnType("int unsigned")
                        .HasColumnName("times_fed");

                    b.Property<string>("TrainerName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("trainer_name");

                    b.Property<ulong>("Updated")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("updated");

                    b.Property<double>("WeightKg")
                        .HasColumnType("double")
                        .HasColumnName("weight_kg");

                    b.HasKey("Id");

                    b.ToTable("gym_defender");
                });

            modelBuilder.Entity("ChuckDeviceController.Data.Entities.GymTrainer", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<uint>("BattlesWon")
                        .HasColumnType("int unsigned")
                        .HasColumnName("battles_won");

                    b.Property<ulong>("CombatRank")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("combat_rank");

                    b.Property<ulong>("CombatRating")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("combat_rating");

                    b.Property<ulong>("Experience")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("experience");

                    b.Property<ushort>("GymBadgeType")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("gym_badge_type");

                    b.Property<bool>("HasSharedExPass")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_shared_ex_pass");

                    b.Property<double>("KmWalked")
                        .HasColumnType("double")
                        .HasColumnName("km_walked");

                    b.Property<ushort>("Level")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("level");

                    b.Property<ulong>("PokemonCaught")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("pokemon_caught");

                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    b.Property<ulong>("Updated")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("updated");

                    b.HasKey("Name");

                    b.ToTable("gym_trainer");
                });

            modelBuilder.Entity("ChuckDeviceController.Data.Entities.Incident", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<uint>("Character")
                        .HasColumnType("int unsigned")
                        .HasColumnName("character");

                    b.Property<uint>("DisplayType")
                        .HasColumnType("int unsigned")
                        .HasColumnName("display_type");

                    b.Property<ulong>("Expiration")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("expiration");

                    b.Property<string>("PokestopId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("pokestop_id");

                    b.Property<ulong>("Start")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("start");

                    b.Property<uint>("Style")
                        .HasColumnType("int unsigned")
                        .HasColumnName("style");

                    b.Property<ulong>("Updated")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.HasIndex("PokestopId");

                    b.ToTable("incident");
                });

            modelBuilder.Entity("ChuckDeviceController.Data.Entities.Pokemon", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<ushort?>("AttackIV")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("atk_iv");

                    b.Property<double>("BaseHeight")
                        .HasColumnType("double")
                        .HasColumnName("base_height");

                    b.Property<double>("BaseWeight")
                        .HasColumnType("double")
                        .HasColumnName("base_weight");

                    b.Property<ushort?>("CP")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("cp");

                    b.Property<double?>("Capture1")
                        .HasColumnType("double")
                        .HasColumnName("capture_1");

                    b.Property<double?>("Capture2")
                        .HasColumnType("double")
                        .HasColumnName("capture_2");

                    b.Property<double?>("Capture3")
                        .HasColumnType("double")
                        .HasColumnName("capture_3");

                    b.Property<ulong>("CellId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("cell_id");

                    b.Property<ulong>("Changed")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("changed");

                    b.Property<ushort?>("Costume")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("costume");

                    b.Property<ushort?>("DefenseIV")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("def_iv");

                    b.Property<uint?>("DisplayPokemonId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("display_pokemon_id");

                    b.Property<ulong>("ExpireTimestamp")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("expire_timestamp");

                    b.Property<ulong?>("FirstSeenTimestamp")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("first_seen_timestamp");

                    b.Property<ushort?>("Form")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("form");

                    b.Property<ushort?>("Gender")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("gender");

                    b.Property<double?>("IV")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("double")
                        .HasColumnName("iv")
                        .HasComputedColumnSql("(`atk_iv` + `def_iv` + `sta_iv`) * 100 / 45");

                    b.Property<bool>("IsDitto")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_ditto");

                    b.Property<bool>("IsEvent")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_event");

                    b.Property<bool>("IsExpireTimestampVerified")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("expire_timestamp_verified");

                    b.Property<bool?>("IsShiny")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("shiny");

                    b.Property<double>("Latitude")
                        .HasColumnType("double")
                        .HasColumnName("lat");

                    b.Property<ushort?>("Level")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("level");

                    b.Property<double>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("lon");

                    b.Property<ushort?>("Move1")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("move_1");

                    b.Property<ushort?>("Move2")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("move_2");

                    b.Property<uint>("PokemonId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("pokemon_id");

                    b.Property<string>("PokestopId")
                        .HasColumnType("longtext")
                        .HasColumnName("pokestop_id");

                    b.Property<string>("PvpRankings")
                        .HasColumnType("longtext")
                        .HasColumnName("pvp");

                    b.Property<string>("SeenType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("seen_type");

                    b.Property<double?>("Size")
                        .HasColumnType("double")
                        .HasColumnName("size");

                    b.Property<ulong?>("SpawnId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("spawn_id");

                    b.Property<ushort?>("StaminaIV")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("sta_iv");

                    b.Property<ulong>("Updated")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("updated");

                    b.Property<string>("Username")
                        .HasColumnType("longtext")
                        .HasColumnName("username");

                    b.Property<ushort?>("Weather")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("weather");

                    b.Property<double?>("Weight")
                        .HasColumnType("double")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.ToTable("pokemon");
                });

            modelBuilder.Entity("ChuckDeviceController.Data.Entities.Pokestop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("AlternativeQuestConditions")
                        .HasColumnType("longtext")
                        .HasColumnName("alternative_quest_conditions");

                    b.Property<ushort?>("AlternativeQuestItemId")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("alternative_quest_item_id")
                        .HasComputedColumnSql("json_extract(json_extract(`alternative_quest_rewards`,'$[*].info.item_id'),'$[0]')");

                    b.Property<uint?>("AlternativeQuestPokemonId")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int unsigned")
                        .HasColumnName("alternative_quest_pokemon_id")
                        .HasComputedColumnSql("json_extract(json_extract(`alternative_quest_rewards`,'$[*].info.pokemon_id'),'$[0]')");

                    b.Property<ushort?>("AlternativeQuestRewardAmount")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("alternative_quest_reward_amount")
                        .HasComputedColumnSql("json_extract(json_extract(`alternative_quest_rewards`,'$[*].info.amount'),'$[0]')");

                    b.Property<ushort?>("AlternativeQuestRewardType")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("alternative_quest_reward_type")
                        .HasComputedColumnSql("json_extract(json_extract(`alternative_quest_rewards`,'$[*].type'),'$[0]')");

                    b.Property<string>("AlternativeQuestRewards")
                        .HasColumnType("longtext")
                        .HasColumnName("alternative_quest_rewards");

                    b.Property<ushort?>("AlternativeQuestTarget")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("alternative_quest_target");

                    b.Property<string>("AlternativeQuestTemplate")
                        .HasColumnType("longtext")
                        .HasColumnName("alternative_quest_template");

                    b.Property<ulong?>("AlternativeQuestTimestamp")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("alternative_quest_timestamp");

                    b.Property<string>("AlternativeQuestTitle")
                        .HasColumnType("longtext")
                        .HasColumnName("alternative_quest_title");

                    b.Property<uint?>("AlternativeQuestType")
                        .HasColumnType("int unsigned")
                        .HasColumnName("alternative_quest_type");

                    b.Property<ulong>("CellId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("cell_id");

                    b.Property<ulong>("FirstSeenTimestamp")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("first_seen_timestamp");

                    b.Property<bool>("IsArScanEligible")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ar_scan_eligible");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("deleted");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enabled");

                    b.Property<ulong>("LastModifiedTimestamp")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("last_modified_timestamp");

                    b.Property<double>("Latitude")
                        .HasColumnType("double")
                        .HasColumnName("lat");

                    b.Property<double>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("lon");

                    b.Property<ulong?>("LureExpireTimestamp")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("lure_expire_timestamp");

                    b.Property<uint>("LureId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("lure_id");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<ulong?>("PowerUpEndTimestamp")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("power_up_end_timestamp");

                    b.Property<ushort?>("PowerUpLevel")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("power_up_level");

                    b.Property<uint?>("PowerUpPoints")
                        .HasColumnType("int unsigned")
                        .HasColumnName("power_up_points");

                    b.Property<string>("QuestConditions")
                        .HasColumnType("longtext")
                        .HasColumnName("quest_conditions");

                    b.Property<ushort?>("QuestItemId")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("quest_item_id")
                        .HasComputedColumnSql("json_extract(json_extract(`quest_rewards`,'$[*].info.item_id'),'$[0]')");

                    b.Property<uint?>("QuestPokemonId")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int unsigned")
                        .HasColumnName("quest_pokemon_id")
                        .HasComputedColumnSql("json_extract(json_extract(`quest_rewards`,'$[*].info.pokemon_id'),'$[0]')");

                    b.Property<ushort?>("QuestRewardAmount")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("quest_reward_amount")
                        .HasComputedColumnSql("json_extract(json_extract(`quest_rewards`,'$[*].info.amount'),'$[0]')");

                    b.Property<ushort?>("QuestRewardType")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("quest_reward_type")
                        .HasComputedColumnSql("json_extract(json_extract(`quest_rewards`,'$[*].type'),'$[0]')");

                    b.Property<string>("QuestRewards")
                        .HasColumnType("longtext")
                        .HasColumnName("quest_rewards");

                    b.Property<ushort?>("QuestTarget")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("quest_target");

                    b.Property<string>("QuestTemplate")
                        .HasColumnType("longtext")
                        .HasColumnName("quest_template");

                    b.Property<ulong?>("QuestTimestamp")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("quest_timestamp");

                    b.Property<string>("QuestTitle")
                        .HasColumnType("longtext")
                        .HasColumnName("quest_title");

                    b.Property<uint?>("QuestType")
                        .HasColumnType("int unsigned")
                        .HasColumnName("quest_type");

                    b.Property<uint?>("SponsorId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("sponsor_id");

                    b.Property<ulong>("Updated")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("updated");

                    b.Property<string>("Url")
                        .HasColumnType("longtext")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.ToTable("pokestop");
                });

            modelBuilder.Entity("ChuckDeviceController.Data.Entities.Spawnpoint", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<uint?>("DespawnSecond")
                        .HasColumnType("int unsigned")
                        .HasColumnName("despawn_sec");

                    b.Property<ulong?>("LastSeen")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("last_seen");

                    b.Property<double>("Latitude")
                        .HasColumnType("double")
                        .HasColumnName("lat");

                    b.Property<double>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("lon");

                    b.Property<ulong>("Updated")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.ToTable("spawnpoint");
                });

            modelBuilder.Entity("ChuckDeviceController.Data.Entities.Weather", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<ushort>("CloudLevel")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("cloud_level");

                    b.Property<ushort>("FogLevel")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("fog_level");

                    b.Property<int>("GameplayCondition")
                        .HasColumnType("int")
                        .HasColumnName("gameplay_condition");

                    b.Property<double>("Latitude")
                        .HasColumnType("double")
                        .HasColumnName("latitude");

                    b.Property<ushort>("Level")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("level");

                    b.Property<double>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("longitude");

                    b.Property<ushort>("RainLevel")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("rain_level");

                    b.Property<ushort?>("Severity")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("severity");

                    b.Property<ushort>("SnowLevel")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("snow_level");

                    b.Property<ushort>("SpecialEffectLevel")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("special_effect_level");

                    b.Property<ulong>("Updated")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("updated");

                    b.Property<bool?>("WarnWeather")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("warn_weather");

                    b.Property<ushort>("WindDirection")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("wind_direction");

                    b.Property<ushort>("WindLevel")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("wind_level");

                    b.HasKey("Id");

                    b.ToTable("weather");
                });

            modelBuilder.Entity("ChuckDeviceController.Data.Entities.Incident", b =>
                {
                    b.HasOne("ChuckDeviceController.Data.Entities.Pokestop", null)
                        .WithMany("Incidents")
                        .HasForeignKey("PokestopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChuckDeviceController.Data.Entities.Pokestop", b =>
                {
                    b.Navigation("Incidents");
                });
#pragma warning restore 612, 618
        }
    }
}
