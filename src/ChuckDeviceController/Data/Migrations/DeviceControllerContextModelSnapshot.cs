// <auto-generated />
using System;
using Chuck.Infrastructure.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ChuckDeviceController.Migrations
{
    [DbContext(typeof(DeviceControllerContext))]
    partial class DeviceControllerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("ChuckDeviceController.Data.Entities.Account", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasColumnName("username");

                    b.Property<string>("Failed")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("failed");

                    b.Property<ulong?>("FailedTimestamp")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("failed_timestamp");

                    b.Property<ulong?>("FirstWarningTimestamp")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("first_warning_timestamp");

                    b.Property<double?>("LastEncounterLatitude")
                        .HasColumnType("double")
                        .HasColumnName("last_encounter_lat");

                    b.Property<double?>("LastEncounterLongitude")
                        .HasColumnType("double")
                        .HasColumnName("last_encounter_lon");

                    b.Property<ulong?>("LastEncounterTime")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("last_encounter_time");

                    b.Property<ushort>("Level")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("level");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("password");

                    b.Property<uint>("Spins")
                        .HasColumnType("int unsigned")
                        .HasColumnName("spins");

                    b.Property<ushort>("Tutorial")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("tutorial");

                    b.HasKey("Username");

                    b.ToTable("account");
                });

            modelBuilder.Entity("ChuckDeviceController.Data.Entities.Assignment", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<string>("DeviceUuid")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("device_uuid");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enabled");

                    b.Property<string>("InstanceName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("instance_name");

                    b.Property<string>("SourceInstanceName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("source_instance_name");

                    b.Property<uint>("Time")
                        .HasColumnType("int unsigned")
                        .HasColumnName("time");

                    b.HasKey("Id");

                    b.ToTable("assignment");
                });

            modelBuilder.Entity("ChuckDeviceController.Data.Entities.Cell", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<double>("Latitude")
                        .HasColumnType("double")
                        .HasColumnName("center_lat");

                    b.Property<ushort>("Level")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("level");

                    b.Property<double>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("center_lon");

                    b.Property<ulong>("Updated")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.ToTable("s2cell");
                });

            modelBuilder.Entity("ChuckDeviceController.Data.Entities.Device", b =>
                {
                    b.Property<string>("Uuid")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasColumnName("uuid");

                    b.Property<string>("AccountUsername")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("account_username");

                    b.Property<string>("InstanceName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("instance_name");

                    b.Property<string>("LastHost")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("last_host");

                    b.Property<double?>("LastLatitude")
                        .HasColumnType("double")
                        .HasColumnName("last_lat");

                    b.Property<double?>("LastLongitude")
                        .HasColumnType("double")
                        .HasColumnName("last_lon");

                    b.Property<ulong?>("LastSeen")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("last_seen");

                    b.HasKey("Uuid");

                    b.ToTable("device");
                });

            modelBuilder.Entity("ChuckDeviceController.Data.Entities.Gym", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasColumnName("id");

                    b.Property<ushort>("AvailableSlots")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("availble_slots");

                    b.Property<ulong>("CellId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("cell_id");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("deleted");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enabled");

                    b.Property<bool>("ExRaidEligible")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ex_raid_eligible");

                    b.Property<ulong>("FirstSeenTimestamp")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("first_seen_timestamp");

                    b.Property<uint>("GuardingPokemonId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("guarding_pokemon_id");

                    b.Property<bool>("InBattle")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("in_battle");

                    b.Property<ulong>("LastModifiedTimestamp")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("last_modified_timestamp");

                    b.Property<double>("Latitude")
                        .HasColumnType("double")
                        .HasColumnName("lat");

                    b.Property<double>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("lon");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("name");

                    b.Property<ulong?>("RaidBattleTimestamp")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("raid_battle_timestamp");

                    b.Property<ulong?>("RaidEndTimestamp")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("raid_end_timestamp");

                    b.Property<bool>("RaidIsExclusive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("raid_is_exclusive");

                    b.Property<ushort>("RaidLevel")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("raid_level");

                    b.Property<uint?>("RaidPokemonCP")
                        .HasColumnType("int unsigned")
                        .HasColumnName("raid_pokemon_cp");

                    b.Property<uint>("RaidPokemonCostume")
                        .HasColumnType("int unsigned")
                        .HasColumnName("raid_pokemon_costume");

                    b.Property<uint>("RaidPokemonEvolution")
                        .HasColumnType("int unsigned")
                        .HasColumnName("raid_pokemon_evolution");

                    b.Property<uint?>("RaidPokemonForm")
                        .HasColumnType("int unsigned")
                        .HasColumnName("raid_pokemon_form");

                    b.Property<ushort?>("RaidPokemonGender")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("raid_pokemon_gender");

                    b.Property<uint?>("RaidPokemonId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("raid_pokemon_id");

                    b.Property<uint?>("RaidPokemonMove1")
                        .HasColumnType("int unsigned")
                        .HasColumnName("raid_pokemon_move_1");

                    b.Property<uint?>("RaidPokemonMove2")
                        .HasColumnType("int unsigned")
                        .HasColumnName("raid_pokemon_move_2");

                    b.Property<ulong?>("RaidSpawnTimestamp")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("raid_spawn_timestamp");

                    b.Property<uint>("SponsorId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("sponsor_id");

                    b.Property<int>("Team")
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    b.Property<int>("TotalCP")
                        .HasColumnType("int")
                        .HasColumnName("total_cp");

                    b.Property<ulong>("Updated")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("updated");

                    b.Property<string>("Url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.ToTable("gym");
                });

            modelBuilder.Entity("ChuckDeviceController.Data.Entities.GymDefender", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasColumnName("id");

                    b.Property<ushort>("AttackIV")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("atk_iv");

                    b.Property<ushort>("BattlesAttacked")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("battles_attacked");

                    b.Property<ushort>("BattlesDefended")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("battles_defended");

                    b.Property<double>("BerryValue")
                        .HasColumnType("double")
                        .HasColumnName("berry_value");

                    b.Property<uint>("CpNow")
                        .HasColumnType("int unsigned")
                        .HasColumnName("cp_now");

                    b.Property<uint>("CpWhenDeployed")
                        .HasColumnType("int unsigned")
                        .HasColumnName("cp_when_deployed");

                    b.Property<ushort>("DefenseIV")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("def_iv");

                    b.Property<uint>("DeploymentDuration")
                        .HasColumnType("int unsigned")
                        .HasColumnName("deployment_duration");

                    b.Property<string>("FortId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("fort_id");

                    b.Property<ushort>("Gender")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("gender");

                    b.Property<bool>("HatchedFromEgg")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("hatched_from_egg");

                    b.Property<ushort>("Move1")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("move_1");

                    b.Property<ushort>("Move2")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("move_2");

                    b.Property<ushort>("NpcCombatTotal")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("npc_combat_total");

                    b.Property<ushort>("NpcCombatWon")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("npc_combat_won");

                    b.Property<ushort>("PokemonId")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("pokemon_id");

                    b.Property<ushort>("PvpCombatTotal")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("pvp_combat_total");

                    b.Property<ushort>("PvpCombatWon")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("pvp_combat_won");

                    b.Property<ushort>("StaminaIV")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("sta_iv");

                    b.Property<ushort>("TimesFed")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("times_fed");

                    b.Property<string>("TrainerName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("trainer_name");

                    b.HasKey("Id");

                    b.ToTable("gym_defender");
                });

            modelBuilder.Entity("ChuckDeviceController.Data.Entities.Instance", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasColumnName("name");

                    b.Property<string>("Data")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("data");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("type");

                    b.HasKey("Name");

                    b.ToTable("instance");
                });

            modelBuilder.Entity("ChuckDeviceController.Data.Entities.Pokemon", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasColumnName("id");

                    b.Property<ushort?>("AttackIV")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("atk_iv");

                    b.Property<ushort?>("CP")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("cp");

                    b.Property<double?>("CaptureRate1")
                        .HasColumnType("double")
                        .HasColumnName("capture_1");

                    b.Property<double?>("CaptureRate2")
                        .HasColumnType("double")
                        .HasColumnName("capture_2");

                    b.Property<double?>("CaptureRate3")
                        .HasColumnType("double")
                        .HasColumnName("capture_3");

                    b.Property<ulong>("CellId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("cell_id");

                    b.Property<ulong>("Changed")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("changed");

                    b.Property<ushort>("Costume")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("costume");

                    b.Property<ushort?>("DefenseIV")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("def_iv");

                    b.Property<uint?>("DisplayPokemonId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("display_pokemon_id");

                    b.Property<ulong>("ExpireTimestamp")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("expire_timestamp");

                    b.Property<ulong>("FirstSeenTimestamp")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("first_seen_timestamp");

                    b.Property<ushort?>("Form")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("form");

                    b.Property<ushort>("Gender")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("gender");

                    b.Property<bool>("IsEvent")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_event");

                    b.Property<bool>("IsExpireTimestampVerified")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("expire_timestamp_verified");

                    b.Property<bool?>("IsShiny")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("shiny");

                    b.Property<double>("Latitude")
                        .HasColumnType("double")
                        .HasColumnName("lat");

                    b.Property<ushort?>("Level")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("level");

                    b.Property<double>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("lon");

                    b.Property<uint?>("Move1")
                        .HasColumnType("int unsigned")
                        .HasColumnName("move_1");

                    b.Property<uint?>("Move2")
                        .HasColumnType("int unsigned")
                        .HasColumnName("move_2");

                    b.Property<uint>("PokemonId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("pokemon_id");

                    b.Property<string>("PokestopId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("pokestop_id");

                    b.Property<string>("PvpRankingsGreatLeague")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("pvp_rankings_great_league");

                    b.Property<string>("PvpRankingsUltraLeague")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("pvp_rankings_ultra_league");

                    b.Property<double?>("Size")
                        .HasColumnType("double")
                        .HasColumnName("size");

                    b.Property<ulong?>("SpawnId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("spawn_id");

                    b.Property<ushort?>("StaminaIV")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("sta_iv");

                    b.Property<ulong>("Updated")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("updated");

                    b.Property<string>("Username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("username");

                    b.Property<ushort>("Weather")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("weather");

                    b.Property<double?>("Weight")
                        .HasColumnType("double")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.ToTable("pokemon");
                });

            modelBuilder.Entity("ChuckDeviceController.Data.Entities.Pokestop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasColumnName("id");

                    b.Property<ulong>("CellId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("cell_id");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("deleted");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enabled");

                    b.Property<ulong>("FirstSeenTimestamp")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("first_seen_timestamp");

                    b.Property<uint?>("GruntType")
                        .HasColumnType("int unsigned")
                        .HasColumnName("grunt_type");

                    b.Property<ulong?>("IncidentExpireTimestamp")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("incident_expire_timestamp");

                    b.Property<bool>("IsArScanEligible")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("ar_scan_eligible");

                    b.Property<ulong>("LastModifiedTimestamp")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("last_modified_timestamp");

                    b.Property<double>("Latitude")
                        .HasColumnType("double")
                        .HasColumnName("lat");

                    b.Property<double>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("lon");

                    b.Property<ulong?>("LureExpireTimestamp")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("lure_expire_timestamp");

                    b.Property<uint>("LureId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("lure_id");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("name");

                    b.Property<uint?>("PokestopDisplay")
                        .HasColumnType("int unsigned")
                        .HasColumnName("pokestop_display");

                    b.Property<string>("QuestConditions")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("quest_conditions");

                    b.Property<string>("QuestRewards")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("quest_rewards");

                    b.Property<uint?>("QuestTarget")
                        .HasColumnType("int unsigned")
                        .HasColumnName("quest_target");

                    b.Property<string>("QuestTemplate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("quest_template");

                    b.Property<ulong?>("QuestTimestamp")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("quest_timestamp");

                    b.Property<int?>("QuestType")
                        .HasColumnType("int")
                        .HasColumnName("quest_type");

                    b.Property<uint?>("SponsorId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("sponsor_id");

                    b.Property<ulong>("Updated")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("updated");

                    b.Property<string>("Url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.ToTable("pokestop");
                });

            modelBuilder.Entity("ChuckDeviceController.Data.Entities.Spawnpoint", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<ushort?>("DespawnSecond")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("despawn_sec");

                    b.Property<double>("Latitude")
                        .HasColumnType("double")
                        .HasColumnName("lat");

                    b.Property<double>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("lon");

                    b.Property<ulong>("Updated")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.ToTable("spawnpoint");
                });

            modelBuilder.Entity("ChuckDeviceController.Data.Entities.Trainer", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasColumnName("name");

                    b.Property<uint>("BattlesWon")
                        .HasColumnType("int unsigned")
                        .HasColumnName("battles_won");

                    b.Property<ulong>("CombatRank")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("combat_rank");

                    b.Property<double>("CombatRating")
                        .HasColumnType("double")
                        .HasColumnName("combat_rating");

                    b.Property<ulong>("Experience")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("experience");

                    b.Property<double>("KmWalked")
                        .HasColumnType("double")
                        .HasColumnName("km_walked");

                    b.Property<ushort>("Level")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("level");

                    b.Property<ulong>("PokemonCaught")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("pokemon_caught");

                    b.Property<ushort>("TeamId")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("team_id");

                    b.Property<ulong>("Updated")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("updated");

                    b.HasKey("Name");

                    b.ToTable("trainer");
                });

            modelBuilder.Entity("ChuckDeviceController.Data.Entities.Weather", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<ushort>("CloudLevel")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("cloud_level");

                    b.Property<ushort>("FogLevel")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("fog_level");

                    b.Property<int>("GameplayCondition")
                        .HasColumnType("int")
                        .HasColumnName("gameplay_condition");

                    b.Property<double>("Latitude")
                        .HasColumnType("double")
                        .HasColumnName("latitude");

                    b.Property<ushort>("Level")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("level");

                    b.Property<double>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("longitude");

                    b.Property<ushort>("RainLevel")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("rain_level");

                    b.Property<ushort?>("Severity")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("severity");

                    b.Property<ushort>("SnowLevel")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("snow_level");

                    b.Property<ushort>("SpecialEffectLevel")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("special_effect_level");

                    b.Property<ulong>("Updated")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("updated");

                    b.Property<bool?>("WarnWeather")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("warn_weather");

                    b.Property<ushort>("WindDirection")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("wind_direction");

                    b.Property<ushort>("WindLevel")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("wind_level");

                    b.HasKey("Id");

                    b.ToTable("weather");
                });
#pragma warning restore 612, 618
        }
    }
}
