@using ChuckDeviceConfigurator.Data
@using ChuckDeviceConfigurator.Extensions
@using ChuckDeviceController.Extensions.Json
@using ChuckDeviceController.Plugin

@{
    var data = Html.RenderAction("GetSidebarItems", "Helper");
    var sidebarItems = Convert.ToString(data)?.FromJson<List<SidebarItem>>();

    async Task AddSidebarItem(SidebarItem item)
    {
        if (item.IsDropdown && (item?.DropdownItems?.Any() ?? false))
        {
            var sortedDropdownItems = item.DropdownItems.ToList();
            sortedDropdownItems.Sort((a, b) => a.DisplayIndex.CompareTo(b.DisplayIndex));
            <li class="nav-item">
                <a href="#" data-toggle="collapse" data-bs-toggle="collapse" data-bs-target="#@(item.Text)Submenu" class="dropdown-toggle" role="button" aria-expanded="false">
                    @Html.Raw(string.IsNullOrEmpty(item.Icon) ? "" : $"<i class='{item.Icon}'></i>")
                    @item.Text
                </a>
                <ul class="collapse list-unstyled" id="@(item.Text)Submenu">
                    @foreach (var dropdownItem in sortedDropdownItems)
                    {
                        var hasMore = dropdownItem.IsDropdown && dropdownItem.DropdownItems?.Count() > 0;
                        if (hasMore)
                        {
                            await AddSidebarItem(dropdownItem);
                        }
                        else
                        {
                            if (dropdownItem.IsSeparator)
                            {
                                <li><hr class="dropdown-divider"></li>
                            }
                            else
                            {
                                <li class="nav-item">
                                    <a class="dropdown-item @(dropdownItem.IsDisabled ? "disabled" : "")" asp-area="" asp-controller="@dropdownItem.ControllerName" asp-action="@dropdownItem.ActionName">
                                        @Html.Raw(string.IsNullOrEmpty(dropdownItem.Icon) ? "" : $"<i class='{dropdownItem.Icon}'></i>")
                                        @dropdownItem.Text
                                    </a>
                                </li>
                            }
                        }
                    }
                </ul>
            </li>
        }
        else
        {
            if (item?.IsSeparator ?? false)
            {
                <li><hr class="dropdown-divider"></li>
            }
            else
            {
                <li class="nav-item">
                    <a class="@((item?.IsDisabled ?? false) ? "disabled" : "")" asp-area="" asp-controller="@item?.ControllerName" asp-action="@item?.ActionName">
                        @Html.Raw(string.IsNullOrEmpty(item?.Icon) ? "" : $"<i class='{item.Icon}'></i>")
                        @item?.Text
                    </a>
                </li>
            }
        }
    }
}

@if (sidebarItems != null)
{
    sidebarItems.Sort((a, b) => a.DisplayIndex.CompareTo(b.DisplayIndex));
    <ul class="list-unstyled">
        @foreach (var header in sidebarItems)
        {
            await AddSidebarItem(header);
        }
    </ul>
}