@using Microsoft.AspNetCore.Identity
@using ChuckDeviceConfigurator.Data
@using ChuckDeviceConfigurator.Extensions
@using ChuckDeviceController.Extensions.Json
@using ChuckDeviceController.Plugin
@inject SignInManager<ApplicationUser> SignInManager
@{
    const string DarkTheme = "dark";
    var data = Html.RenderAction("GetSidebarItems", "Helper");
    var sidebarItems = Convert.ToString(data)?.FromJson<List<SidebarItem>>();

    var themeData = Html.RenderAction("GetTheme", "Helper");
    var theme = Convert.ToString(themeData)?.FromJson<string>() ?? DarkTheme;

    async Task AddSidebarItem(SidebarItem item)
    {
        if (item.IsDropdown && (item?.DropdownItems?.Any() ?? false))
        {
            var sortedDropdownItems = item.DropdownItems.ToList();
            sortedDropdownItems.Sort((a, b) => a.DisplayIndex.CompareTo(b.DisplayIndex));
            <li class="nav-item">
                <a href="#" data-toggle="collapse" data-bs-toggle="collapse" data-bs-target="#@(item.Text)Submenu" class="dropdown-toggle" role="button" aria-expanded="false">
                    @Html.Raw(string.IsNullOrEmpty(item.Icon) ? "" : $"<i class='{item.Icon}'></i>")
                    @item.Text
                </a>
                <ul class="collapse list-unstyled" id="@(item.Text)Submenu">
                    @foreach (var dropdownItem in sortedDropdownItems)
                    {
                        var hasMore = dropdownItem.IsDropdown && dropdownItem.DropdownItems?.Count() > 0;
                        if (hasMore)
                        {
                            await AddSidebarItem(dropdownItem);
                        }
                        else
                        {
                            if (dropdownItem.IsSeparator)
                            {
                                <li><hr class="dropdown-divider"></li>
                            }
                            else
                            {
                                <li class="nav-item">
                                    <a class="dropdown-item @(dropdownItem.IsDisabled ? "disabled" : "")" asp-area="" asp-controller="@dropdownItem.ControllerName" asp-action="@dropdownItem.ActionName">
                                        @Html.Raw(string.IsNullOrEmpty(dropdownItem.Icon) ? "" : $"<i class='{dropdownItem.Icon}'></i>")
                                        @dropdownItem.Text
                                    </a>
                                </li>
                            }
                        }
                    }
                </ul>
            </li>
        }
        else
        {
            if (item?.IsSeparator ?? false)
            {
                <li><hr class="dropdown-divider"></li>
            }
            else
            {
                <li class="nav-item">
                    <a class="@(item.IsDisabled ? "disabled" : "")" asp-area="" asp-controller="@item.ControllerName" asp-action="@item.ActionName">
                        @Html.Raw(string.IsNullOrEmpty(item?.Icon) ? "" : $"<i class='{item.Icon}'></i>")
                        @item.Text
                    </a>
                </li>
            }
        }
    }
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ChuckDeviceConfigurator - @ViewData["Title"]</title>

    <link rel="icon" href="~/favicons/chuck.ico" type="image/x-icon" asp-append-version="true" />
    <link rel="apple-touch-icon" href="~/favicons/chuck.gif" sizes="180x180">
    <link rel="icon" href="~/favicons/chuck.png" type="image/png" sizes="32x32">
    <link rel="icon" href="~/favicons/chuck.png" type="image/png" sizes="16x16">
    <link rel="mask-icon" href="~/favicons/chuck.png" color="#5bbad5">

    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/lib/datatables/datatables.css" />
    <link rel="stylesheet" href="~/lib/fontawesome-free-6.1.2-web/css/all.css" />
    <link rel="stylesheet" href="~/lib/bootstrap-cookie-alert/css/cookiealert.css" />
    <link rel="stylesheet" href="~/css/sidebar.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    @if (theme == DarkTheme)
    {
        <link rel="stylesheet" href="~/css/theme.css" asp-append-version="true" />
    }
</head>
<body class="theme-@theme">
    <div class="wrapper">
        <nav id="sidebar">
            <div class="sidebar-header text-center">
                <a href="/" class="navbar-brand">
                    <img src="/favicons/chuck.gif" border="0" height="48">
                    <div class="text-wrap">Chuck Device Configurator</div>
                </a>
            </div>
            @if (SignInManager.IsSignedIn(User))
            {
                if (sidebarItems != null)
                {
                    sidebarItems.Sort((a, b) => a.DisplayIndex.CompareTo(b.DisplayIndex));
                    <ul class="list-unstyled">
                    @foreach (var header in sidebarItems)
                    {
                        await AddSidebarItem(header);
                    }
                    </ul>
                }
                <hr class="dropdown-divider">
                <ul class="list-unstyled">
                    <li>
                        <a asp-controller="Settings" asp-action="Index">
                            <i class="fa-solid fa-fw fa-gear"></i>
                            Settings
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="/swagger" target="_blank">
                            <i class="fa-solid fa-fw fa-file-lines"></i>
                            Swagger API
                        </a>
                    </li>
                    <li class="nav-item">
                        <a asp-controller="Home" asp-action="About">
                            <i class="fa-solid fa-fw fa-circle-info"></i>
                            About
                        </a>
                    </li>
                    <li class="nav-item">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="darkModeToggle" onchange="toggleDarkMode();">
                            <label class="form-check-label" for="darkModeToggle">Dark Mode</label>
                        </div>
                    </li>
                </ul>
            }
            <hr class="dropdown-divider">
            <partial name="_LoginPartial" />
        </nav>
        <div id="content">
            <button id="sidebarCollapse" type="button" class="navbar-btn" aria-label="Toggle navigation">
                <span></span>
                <span></span>
                <span></span>
            </button>
            <div class="container">
                <main role="main" class="pb-3">
                    @RenderBody()
                </main>
                <partial name="_CookieConsentPartial" />
                <partial name="_Footer" />
            </div>
        </div>
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/datatables/datatables.min.js"></script>
    <script src="~/lib/datatables-plugins/ellipsis.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/lib/bootstrap-cookie-alert/js/cookiealert.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>

<script>
    // Get current URL path and toggle 'active' class for sidebar and sidebar collapse/expand button
    const pathname = window.location.pathname;
    /*
     * href* - Contains
     * href^ - Beginning
     * href$ - Ending
     * css=button:contains('')
     */

    // Get navbar header based on current path name comparing against anchor reference
    // NOTE: This will highlight multiple navbar headers if multiple have the same href path
    //const navItems = document.querySelectorAll('#sidebar > ul li > a');
    const navItems = $('#sidebar > ul li > a');
    for (const item of navItems) {
        const path = item.pathname;
        if (item.className.includes('dropdown-toggle')) {
            continue;
        }
        if (pathname.split('/').length >= 3 && pathname.includes(path) && path !== '/') {
            selectSidebarItem(item);
        } else {
            if (pathname === path && path !== '#') {
                selectSidebarItem(item);
            }
        }
    }

    $('#sidebarCollapse').on('click', function () {
        // Show/hide sidebar depending on sidebar button state
        $('#sidebar').toggleClass('active');
        // Toggle sidebar toggle button icon, i.e. X or menu/sandwich icon
        $(this).toggleClass('active');
    });

    function selectSidebarItem(item) {
        const navItem = $(item);
        // Top level navbar header with no dropdowns
        navItem.addClass('active');
        // Get top level navbar 'li' element
        const parent = navItem.parent().parent();
        // Get child anchor 'a' element from top level element
        const parentAnchor = parent.parent().children()[0]; // TODO: Provide correct css selector
        // Add active class so parent (top level) navbar section is highlighted
        $(parentAnchor).addClass('active');
        // Let css know navbar section has expanded
        $(parentAnchor).attr('aria-expanded', 'true');
        // Expand the actual navbar section
        parent.addClass('show');
    }

    function loadTheme() {
        const savedValue = localStorage.getItem('darkMode') !== 'false';
        const enabled = document.body.classList.contains('theme-dark');
        $('#darkModeToggle').prop('checked', savedValue);
        if (savedValue && !enabled) {
            document.body.classList.add('theme-dark');
        } else if (!savedValue && enabled) {
            document.body.classList.remove('theme-dark');
        }
    }

    function toggleDarkMode() {
        if (document.body.classList.contains('theme-dark')) {
            document.body.classList.remove('theme-dark');
        } else {
            document.body.classList.add('theme-dark');
        }
        localStorage.setItem('darkMode', document.body.classList.contains('theme-dark'));
    }

    loadTheme();
</script>