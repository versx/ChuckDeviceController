@using ChuckDeviceConfigurator.Utilities
@using ChuckDeviceConfigurator.ViewModels
@using ChuckDeviceController.Data.Entities
@model ViewModelsModel<Instance>
@{
    ViewData["Title"] = "Instances";
}

<h1>Instances</h1>
<br />

<div class="pb-5">
    <div class="float-start">
        <a class="btn btn-success btn-sm" asp-action="Create">Create New</a>
    </div>
    <div class="checkbox float-end">
        <label><input type="checkbox" asp-for="AutoRefresh" onchange="handleAutoRefresh(this);"> Auto Refresh</label>
    </div>
</div>

<table id="table-instances" class="table table-striped table-bordered dt-responsive nowrap">
    <thead class="table-dark">
        <tr>
            <th scope="col">
                @Html.DisplayNameFor(model => model.Items[0].Name)
            </th>
            <th scope="col">
                @Html.DisplayNameFor(model => model.Items[0].Type)
            </th>
            <th scope="col">
                @Html.DisplayNameFor(model => model.Items[0].Status)
            </th>
            <th scope="col">
                Level
            </th>
            <th scope="col">
                @Html.DisplayNameFor(model => model.Items[0].Geofences)
            </th>
            <th scope="col">
                @Html.DisplayNameFor(model => model.Items[0].DeviceCount)
            </th>
            <th width="5%">Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Items)
        {
            <tr>
                <th scope="row">
                    @Html.DisplayFor(modelItem => item.Name)
                </th>
                <td>
                    @Utils.FormatInstanceType(item.Type)
                </td>
                <td>
                    @Html.Raw(item.Status)
                </td>
                <td>
                    @item.MinimumLevel-@item.MaximumLevel
                </td>
                <td>
                    @string.Join(", ", item.Geofences)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DeviceCount)
                </td>
                <td>
                    <div class="dropdown">
                        <button class="btn btn-primary btn-sm dropdown-toggle" type="button" id="dropdownGroup" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="fa-solid fa-bars"></i>
                        </button>
                        <ul class="dropdown-menu" aria-labelledby="dropdownGroup">
                            <li><a class="dropdown-item" asp-action="Edit" asp-route-id="@item.Name"><i class="fa-solid fa-pen-to-square"></i>&nbsp;Edit</a></li>
                            <li><a class="dropdown-item" asp-action="Details" asp-route-id="@item.Name"><i class="fa-solid fa-circle-info"></i>&nbsp;Details</a></li>
                            <li><a class="dropdown-item" asp-action="Delete" asp-route-id="@item.Name"><i class="fa-solid fa-trash-can"></i>&nbsp;Delete</a></li>
                        </ul>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    <script>
        $(document).ready(function() {
            $('#table-instances').DataTable({
                columnDefs: [
                    { responsivePriority: 0, targets: 0 },
                    { responsivePriority: 5, targets: 1 },
                    { responsivePriority: 2, targets: 2 },
                    { responsivePriority: 6, targets: 3 },
                    { responsivePriority: 3, targets: 4 },
                    { responsivePriority: 10, targets: 5 },
                    { responsivePriority: 1, targets: -1, orderable: false },
                ],
                order: [[0, 'asc']],
                stateSave: true,
                searching: true,
                paging: true,
                lengthMenu: [[25, 50, 100, -1], [25, 50, 100, 'All']],
                colReorder: {
                    enable: true,
                    fixedColumnsLeft: 1,
                },
                fixedHeader: {
                    header: true,
                },
                responsive: true,
                info: true,
            });
        });

        const handleAutoRefresh = (e) => {
            const isChecked = $(e).is(':checked');
            if (isChecked) {
                location.href = "@Html.Raw(Url.Action("Index", new { autoRefresh = true }))";
            } else {
                location.href = "@Html.Raw(Url.Action("Index", new { autoRefresh = false }))";
            }
        };
    </script>
}