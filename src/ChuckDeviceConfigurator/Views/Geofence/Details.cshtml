@model Geofence
@{
    ViewData["Title"] = localizer["Geofence Details {0}", Model.Name];
}

<h1>Geofence Details</h1>

<p>@Html.ValidationMessage("Geofence", new { @class = "text-danger" })</p>

<br />
@Html.DisplayFor(model => model, "Breadcrumbs", new { Controller = "Geofence", ControllerText = localizer["Geofences"], CurrentPage = localizer["Geofence Details"] })

<div class="mb-4">
    <div class="float-start">
        <h4>@localizer["Geofence '{0}'", Model.Name]</h4>
    </div>
    <div class="float-end">
        <a asp-action="Edit" asp-route-id="@Model?.Name" class="btn btn-primary btn-sm">
            <i class="fa-solid fa-pen-to-square"></i>&nbsp;@localizer["Edit"]
        </a>
        <a asp-action="Delete" asp-route-id="@Model?.Name" class="btn btn-danger btn-sm">
            <i class="fa-solid fa-trash"></i>&nbsp;@localizer["Delete"]
        </a>
    </div>
</div>
<br />

<hr />
@Html.DisplayForModel("GeofenceDetails")

@await Html.PartialAsync("_ViewOnlyGeofenceRoutePartial", new { MapConfig = ViewData["MapConfig"] })

<script>
    const type = "@Model?.Type";
    let area = ("@ViewData["GeofenceData"]" || '').replace(/&#xD;/g, '').replace(/&#xA;/g, '\n'); // <- TODO: Fix
    if (type === 'Circle' && area) {
        // Circles
        if (!(area.includes('[') && area.includes(']'))) {
            area = `[{@Model?.Name}]\n${area}`;
        }
        loadCircles(area);
    } else {
        // Geofences
        setReturnGeofenceType(true);
        loadGeofence(area, true);
    }
</script>