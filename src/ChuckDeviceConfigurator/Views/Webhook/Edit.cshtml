@model Webhook
@{
    ViewData["Title"] = localizer["Edit Webhook {0}", Model.Name];
}

<h1>@localizer["Edit Webhook"]</h1>

<p>@Html.ValidationMessage("Webhook", new { @class = "text-danger" })</p>

<br />
@Html.DisplayFor(model => model, "Breadcrumbs", new { Controller = "Webhook", ControllerText = localizer["Webhooks"], CurrentPage = localizer["Edit Webhook"] })

<form asp-action="Edit">
    <div class="pb-4">
        <div class="float-start">
            <h4>@localizer["Webhook '{0}'", Model.Name]</h4>
        </div>
        <div class="float-end">
            <a asp-action="Delete" asp-route-id="@Model?.Name" class="btn btn-danger btn-sm">
                <i class="fa-solid fa-trash"></i>&nbsp;@localizer["Delete"]
            </a>
            &nbsp;
            <button type="submit" class="btn btn-primary btn-sm">
                <i class="fa-solid fa-floppy-disk"></i>&nbsp;@localizer["Save"]
            </button>
        </div>
    </div>
    <hr />
    <div class="row">
        <div class="col-lg-6 col-md-12">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-floating mb-3">
                <input asp-for="Name" class="form-control" placeholder="Webhook name" readonly />
                <label asp-for="Name"></label>
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            @Html.EditorForModel("EditWebhookDetails")
        </div>
        <div class="col-lg-6 col-md-12">
            @Html.EditorForModel("EditWebhookDataDetails")
        </div>
    </div>
</form>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        const types = [
            'pokemon',
            'pokestops',
            'lures',
            'invasions',
            'quests',
            'alternative_quests',
            'gyms',
            'gyminfo',
            'gym_defenders',
            'gym_trainers',
            'eggs',
            'raids',
            'weather',
            'accounts',
        ];
        toggleElements();

        $('#Types').change(() => toggleElements());

        function toggleElements() {
            const selected = $('#Types').val().map(type => types[type]);
            for (const type of types) {
                const show = selected.includes(type);
                hideElements(type, show);
            }
        }

        function hideElements(className, show) {
            const elements = document.getElementsByClassName(className);
            for (const element of elements) {
                element.style.display = show ? 'block' : 'none';
            }
        }
    </script>
}